;???;	DRS:DDP - DDP doesn't fork or PR7
.title	ddp - DD: driver
.include "lib:rust.mac"
;variable size
prt$c=0		; RUST/XM ports
shp$c=0		; SHAREplus signature support
dzp$c=0;1	; DZV port support
dzv$c=0;1	; DZV support
prb$c=0;1	; probe device
;tk$c=1		; stack boot receive packet
tim$c=1		; timeout
rep$c=0		; driver debug reports
wai$c=1		; wait mode
odt$c=0		; terminal boot driver (obsolete)

;	RUST DD: driver
;
;	Multiple unit DD: TU58 driver.
;
;	%build
;	goto 'p1'
;	macro	drs:ddp/object:drb:ddv
;	macro	drs:mmg$t+drs:ddp/object:drb:ddp
;	link:
;	link	drb:ddv/execute:drb:ddv.sys/nobitmap/bound:1000/map:drb:ddv
;	xxboot
;	link	drb:ddp/execute:drb:ddp.sys/nobitmap/bound:1000/map:drb:ddp
;	xxboot
;	driver:
;	@drs:check capture DDV
;	r driver
;	set drb:ddv name=DD
;	!set drb:ddv csr=160100!	dzv
;	!set drb:ddv vector=310!	dzv
;	set drb:ddv csr=176500
;	set drb:ddv vector=300
;	set drb:ddv retry=8
;	set drb:ddv timer=30
;	set drb:ddv nowait
;	!set drb:ddv port=0
;	!set drb:ddv speed=9600
;	exit
;	@drs:check compare DDV
;	
;	@drs:check capture DDP
;	r driver
;	set drb:ddp name=DDX
;	set drb:ddp csr=176500
;	set drb:ddp vector=300
;	set drb:ddp retry=8
;	exit
;	@drs:check compare DDP
;	end:
;	%end

.macro	drinf$
$imgdef	DD 1 0
$imginf fun=drv cre=hammo aut=ijh use=<RUST TU58 DECtape II driver DD:>
$imgham	yrs=<2004> oth=<>
;	%date	
$imgdat <24-Jul-2022 21:11:47>   
;	%edit
$imgedt <93   >
.endm

$brdef		;RT-11 bootstrap
$chdef		;channel
$dcdef		;device codes
$dedef		;device
$drdef		;driver
$dzdef		;dzv11
$fkdef		;fork
$hadef		;handler
$iqdef		;i/o queue
$jbdef		;job
$mmdef		;memory management
$prdef		;pcr
$psdef		;psw
$rmdef		;resident monitor
$sfdef		;special functions
$vedef		;vectors
.library "lib:drvmac.mlb"
$drini
$drcnd
upini$

.sbttl	installation

;	22bit
;
;	r2 ->	device record
;	r3 =	stb date
;	r4 =	^rstb

	.drins	xx			;XX: installation
	nop				;data
;sic]	nop				;system
.if ne shp$c
	cmp	r4,#^rshp		;this SHAREplus?
	bne	20$			;no
	mov	r4,r0			;handshake
	mov	r4,r1			;reply with reason
	cmp	r3,#stbdat		;using the same stb?
	bne	20$			;no
	bis	#de22b$,de.con(r2)	;force /22bit
	bis	#deabo$,de.typ(r2)	;force /abort
.endc
20$:	.if ne prb$c
	bnew	r5,<#^rprb>,30$		; not probing
	clrb	d$riob			; overlay channel
	mov	dr.csr,r5		; supply CSR
	$drcal	in$prb			; probe it
	br	40$			; c=1 => failure
	.endc
30$:	clc
40$:	return

;	Flag SHAREplus 22-bit handler

;.if ne mmg$t
;.save
;.asect
;.=0
;	.rad50	/22b/
;.restore
;.endc
.sbttl	driver information

; STAND-ALONE OPTION
;
;		A TU58 will run a stand-alone program if a TU58 tape
;		begins with octal 206 (a NOP) followed by the rad50
;		name of the image. An RT-11 TU58 formatted tape is
;		assumed.
; TU58
;
;	DEC	Hardware model: two units and 512 block volumes.
;		Note: the DEC driver accepts any block number.
;
;	RUST	Hardware model: two units, 512 block volumes.
;
;		Emulated model: eight units, variable size volumes,
;		zero-read, get info (date/time).
;		Unit seven reserved for internal use.
;
;		Both models support timeout and 19k baud (driver/boot).
;
;		Extended operation:
;
;		1. Extended handshake in control packet.
;		2. Null segment reads (driver/boot)
;		3. ACK returns device size of unit
;		4. Reading block 8 of unit 7 returns time information.
;
; TU58 BOOTSTRAPPING
;
;	The TU58 is used to bootstrap operating systems.
;
;	The rationale is that existing DEC DD:/TU58 bootstraps,
;	or keyed-in software bootstraps can be used to communicate
;	with Windows or Linux servers to run bootstrap systems 
;	which would be used to copy data to a local system disk.
;
; DEC DRIVER
;
;	Does transmission in one gulp, thus retry must repeat the lot.
;	RUST driver transfers and retries block-wise.
;
; PSUEDO-FORK STATE
;
;	The DEC driver uses a psuedo-fork state for some operations.
;	The reasoning is simple -- they could lose TU58 data if
;	some other driver (such as DL:) hogs the fork queue for
;	too long. Since the TU58 operates at priority four they
;	figure they're at the bottom of the food chain anyway.
;
;	The correct solution is to use (small) ring-buffers.
;
;	Historical Note: The CT: (TA11) driver was even worse.
;	It blocked interrupts at priority six. The driver code
;	shows that it was originally envisaged to operate at 
;	priority four (and perhaps with a fork routine).
;
; "STANDARD INTERCHANGE MEDIA"
;
;	The TU58 (DECtape II) was vaunted as the new standard 
;	interchange medium for DEC machines. It had a very short
;	shelf life. Drivers were not supplied with RT-11 V5.5.
;
;	The problem probably lay with RSX and VMS where data loss
;	led to a second design requiring per-byte synchronisation,
;	leading to impossibly slow transfers.
;
; PACKETS
;
;	o  Packet has one word header, data and one word checksum
;	o  Packet count is the data byte count
;	o  Control packets have five words, i.e. ten bytes of data
;	o  Packet checksum includes packet header and data
;
; DEVICE SIZE
;
;	DDP does not check block numbers for out-of-range errors.
;	This allows DDP to automatically handle oversize emulations.
;
;	DDP/DD.EXE support the standard get-device-size special function.
;	The function fails for hardware TU58s and TU58FS.
;
;	TU58FS handles oversize by patching DD[X].SYS location @#54 when
;	it creates RT-11 system images on-the-fly. That doesn't work for 
;	RT-11 system devices that aren't created on-the-fly. However, this
;	is not a problem for DDP which ignores block out-of-range anyway.
.sbttl	interface log

	ifSG0. = 176761
	ifSG1. = 066666
	ifLEN. = 1024.
	ifASC. = 1	; ascii
	ifIPT. = 2	; input byte
	ifOPT. = 3	; output byte

.if ne 0
	.macro	drrep$	str
	jsr	r1,if$asc
	.asciz	~str~
	.even
	.endm
.endc

	.macro	ifipt$	val
	movb	val,-(sp)
	call	if$ipt
	.endm

	.macro	ifopt$	val
	movb	val,-(sp)
	call	if$opt
	.endm

	.macro	ifcod$
i$fsg0:	.word	ifSG0.,ifSG1.
i$fbas:	.word	0
i$fnxt:	.word	0
i$flim:	.word	ifLEN.
i$flen:	.word	ifLEN.
i$fbuf:	.blkb	ifLEN.

if$asc:	psh	#ifASC.
	call	if$sto
10$:	bitb	(r1),(r1)
	beq	20$
	movb	(r1)+,-(sp)
	call	if$sto
	br	10$
20$:	inc	r1
	bic	#1,r1
	rts	r1

	.enabl	lsb
if$ipt:	psh	#ifIPT.
	br	10$
if$opt:	psh	#ifOPT.
10$:	call	if$sto
	psh	2(sp)
	call	if$sto
20$:	pop	(sp)
	return
	.dsabl	lsb

;	stack	r0,cbt,pc,val
	sp.val = 6
if$sto:	rol	-(sp)
	psh	r0
	mov	i$fnxt,r0
	bne	10$
	mova	i$fbuf,r0
	mov	r0,i$fbas
	mov	r0,i$fnxt
	add	r0,i$flim
10$:	cmp	r0,i$flim
	bhis	20$
	movb	sp.val(sp),(r0)
	inc	i$fnxt
20$:	pop	r0
	ror	(sp)+
	pop	(sp)
	return
	.endm
.sbttl	device

map	ddcsr.,,176500		; csr
 map	dd.rsr,,0		; rcv status
 map	dd.rbu			; rcv buffer
 map	dd.xsr			; xmt status
 map	dd.xbu			; xmt buffer
 map	dd.dat			; data value (read)
map	ddvec.,,300		; vector
map	ddpri.,,4		; interrupt priority
map	ddunc.,,8.		; units per controller 
map	ddcod.,,34		; RT-11 device code
map	ddrty.,,8.		; retry count
map	ddsiz.,,512.		; device size
map	ddnam.,,<^rdd>		; device name

;	DZV initializer

map	ddDZI$,,dzpre$!dz96h.!dzpl8.!0
map	ddDZO$,,1		; output enable port 0 

;	CSR definitions.

map	ddbrk$,,1		; break
map	ddenb$,,100		; interrupt enable
map	ddrdy$,,200		; function done

;	packet types

set	ddDAT. 	1	; <->	; data packet
set	ddCTL. 	2	; <->	; control packet
set	ddINI. 	4	;  ->	; init command 
set	ddBOO. 	10	;  ->	; boot command
set	ddCON. 	20	; <-	; continue command
set	ddNUL.	30.	; <-	; null data packet

map	dp.typ,byte,0		; packet type
map	dp.cnt,byte		; byte count
map	dp.cod,byte		; operation code
map	dp.sta,byte		; modifier or status (<0 => error)
map	dp.uni			; device unit (and switches)
map	dp.seq		; 0	; sequence number
map	dp.bct			; byte count
map	dp.blk			; block number
map	dp.chk			; checksum
map	dp.bbs			;

;	Opcodes

set	ddRES.	1		; reset
set	ddREA.	2		; read
set	ddWRI.	3		; write
set	ddEND.	100		; end packet

;	Status

set	ddSUC.	0		; success (1 is okay too)
set	ddUNI.	-8.		; bad unit number
set	ddPRT.	-11.		; write protected unit
set	ddIOX.	-17.		; I/O error
set	ddTRN.  -1		; transmission error (not sent)

;	TU58X hand-shake

map	ddSXT.,,075224	; <-	; Vseq from server
map	ddCXT.,,013224	; ->	; Vseq handshake from client
.sbttl	I/O packet

map	ip.tmp,,0	; temp
map	ip.trn		; transfer function
map	ip.rty		; retry count
map	ip.csr		; csr address
			;
map	ip.uni		; unit number
map	ip.lb0		; logical block
			;
map	ip.bu0		; buffer address
map	ip.bu1		; extended address
map	ip.rwc		; request word count
map	ip.twc		; transfer word count 
			;
map	ip.seg		; segment counter
			;
map	ip.buf		; saved iq.buf
map	ip.par		; saved iq.par
map	ip.r0		;
map	ip.r1		; saved r1
map	ip.r2		; 
map	ip.bbs		;
.sbttl	driver definition

	$drovl			; put overlay routine here
;	$drlim	400		;
	$drcnd			; driver conditionals
	$drstd	ddcsr.,ddvec.,ddpri.,ddrty.,ddnam.
     um	<.drdef	xx,ddcod.,derta$!defun$!devar$,ddsiz.,xxCSR.,xxVEC.,dma=NO>
     xm	<.drdef	xx,ddcod.,derta$!defun$!devar$,ddsiz.,xxCSR.,xxVEC.,dma=NO>
	$drptr
	.drest	class=dedkt.	; disk class

	.if ne wai$c		;
	$drsel	<stwai$> 1	; include set [no]wait
	.endc			;
	.if ne odt$c		;
	$drsel	<stodt$> 1	; include set [no]odt
	.endc			;
	$drsel	<sttim$> 1	; set timer=n (0 for no timeout)
	xxvtb. = 1		; two vectors for set vector
	$drset	cod=0		; standard SET items
.if ne dzp$c
	.drset	PORT,3,st$prt,NUM	; SET DD: PORT=3
	.drset	SPEED,7400,st$prt,NUM	; SET DD: SPEED=9600...

;	Port information has to be written to the driver, the boot
;	the load/fetch code and the install probe code (although 
;	load/fetch picks it up from the driver).

st$prt:	$drcal	lo$dzp res=NO	; do load port routine
	bcs	st$fai		; failed
	$drwri			; write back load overlay
	$drcal	in$dzp res=NO	; do install port routine
	$drwri			; 
	$drget	b$odzi		; read boot section
	mov	r0,b$odzi-$	; change port number
	mov	r1,b$odzo-$	; and output enable mask
	clc			; 
	$drupd			; write and restore block 1
	mov	r0,x$xdzi	; change port number
	mov	r1,x$xdzo	; and output enable mask
	return			;
.endc
	$drset	tbl=0		; standard SET code
	$drlim	1000	
.sbttl	begin I/O, data

	.drbeg	xx vtbl=x$xvtb
	br	xx$sta			; start I/O
x$xvec = xxstrt				; vector location
x$xrty:	.word	xxrty.			; retry count
x$xcsr:	.word	xxcsr.			; csr address
	.drvtb	x$xvtb,xxvec.,xxint	; vector definition
	.drvtb	,xxvec.+ve.bbs,xxint	;
x$xini:	.word	0			; is initialized flag
x$xtmo:	.word	30.*64.			; 30 second timeout
.if ne dzv$c
x$xdzi:	.word	ddDZI$			; 0 => not a DZV
x$xdzo:	.word	ddDZO$			; (see dr$loa)
.endc

.if ne mmg$t
x$xfrk:	.blkb	fk.bbs			; fork block
.endc					;
x$xpkt:	.blkb	ip.bbs			; i/o packet
x$xrsp:	.blkb	dp.bbs			; rsp packet
x$xext:	.word	0			; extended server flag
.if ne wai$c				;
x$xwai:	.word	0			; wait mode
.endc
.if ne odt$c
x$xodt:	.word	0			; terminal boot support
.endc
;???;	DRS:DDP	- Unit out-of-range check commented out
.sbttl	start i/o

xx$sta:
drrep$ <S>
     up	mov	#x$xpkt,r3		; contect
	mov	x$xcsr,ip.csr(r3)	; save csr
	mov	x$xrty,ip.rty(r3)	; retry count
	mov	xxcqe,r4		; i/o queue element
	.if ne odt$c			;
	beqw	x$xodt,10$		; not in odt mode
	call	xx$dsb			; disable interrupts
	.endc				;

10$:	mov	iq.csw(r4),r0		; get the CSW
	movb	ch.uni(r0),ip.uni(r3)	; get the unit number
;	cmp	r1,#ddunc.		; unit too high?
;	bhis	xx$der			; yes
	call	xx$sav			; save address

	call	xx$pnt			; setup pointers
.if ne dzv$c
	beqw	x$xdzi,15$		; not a DZV
	bpsw	#dzcse$,(r5),15$	; it's enabled
	mov	#dzcse$,(r5)		; must have been hardware RESET
	mov	x$xdzi,dd.rbu(r5) 	; configure input channel
	mov	x$xdzo,dd.xsr(r5)	; enable output channel
.endc
	assume	iq.blk eq 0		;
15$:	mov	(r4),ip.lb0(r3)		; setup logical block number
	movb	iq.fun(r4),r2		; get the function
	bne	30$			; special function
	mov	#ddrea.,ip.trn(r3)	; assume read
	mov	iq.wct(r4),r1		; transfer word count
	bpl	20$			; a read
	assume	ddwri. eq ddrea.+1	;
	inc	ip.trn(r3)		; make write
	neg	r1			; logical write
20$:	mov	r1,ip.rwc(r3)		; setup request word count
	br	xx$loo			;

30$:	cmpb	r2,#373			; check function code
	bne	xx$der			; invalid
	jmp	xx$siz			; do the size function
					;
xx$der:
drrep$ <Der>
	jmp	xx$her			;
.sbttl	i/o loop

;	r2 ->	command packet
;	r3 ->	response packet
;	r4 ->	queue element
;
;	Block-wise to avoid repeating full transfer on retry.
;	All transfers are word aligned.

xx$loo:	call	xx$agn		; setup retry point
	bnew	x$xini,5$
	call	xx$ini
5$:
drrep$ <L>
	call	xx$res		; restore addresses
	mov	ip.rwc(r3),r0	; get total count
	mov	r0,ip.twc(r3)	; running count
	asl	r0		; make byte count
	call	xx$ctl		; send that
	cmp	ip.trn(r3),#ddwri. ; this a write?
	beq	xx$wri		; yep 
	fall	xx$rea		;

;recv:	.byte	dddat.		; receive up to four 
;	.byte	byte-count
;	.blkb	data
;	.word	checksum
;	...
;	.blkb	end packet

xx$rea:
10$:
drrep$ a
	mov	#ddDAT.!<ddNUL.*256.>,r0
	call	xx$gfw		; get control code and count
	mov	r0,r2		;
	clrb	r2		; make word count
	swab	r2		;
	asr	r2		; word count
	sub	r2,ip.twc(r3)	; setup transfer word count
	bcs	xx$er1		;
	beqb	r0,#ddDAT.,20$	; regular thing
	bnew	x$xext,#ddCXT.,xx$er2 ; null segments not expected
	mov	iq.buf(r4),r0
15$:	clr	(r0)+
	sobw	r2,15$		;
	mov	r0,iq.buf(r4)
	br	25$		; join common
				; regular read
20$:	call	xx$gtw		; get data
	call	xx$put		; put to user 
	sobw	r2,20$		;
drrep$ c
25$:
	call	xx$chk		; get checksum
	bnew	ip.twc(r3),10$	; more data
;drrep$ d
	br	xx$gep		; get end packet

;recv:	.byte	ddCON.
;
;xmit:	.byte	dddat.
;	.byte	byte-count
;	.blkb	byte-count
;	.word	checksum

xx$wri:
10$:	call	xx$gtb		; synch with continue
	bneb	r0,#ddCON.,xx$erj ; houston ...
	mov	#64.,r2		; assume full sector
	cmp	r2,ip.twc(r3)	; got that?
	blos	20$		; yep
	mov	ip.twc(r3),r2	; nope
20$:	sub	r2,ip.twc(r3)	;
	movb	r2,r0		; get word count
	asl	r0		; make byte count
	swab	r0		; second byte sent
	bisb	#dddat.,r0	;
	clr	(r3)		; init checksum
	call	xx$ptw		; send flag and count
30$:	call	xx$get		; get from user
	call	xx$ptw		; send to device
	sobw	r2,30$		;
	call	xx$pck		; send checksum
	bnew	ip.twc(r3),10$	; next segment
xx$gep:	call	xx$enp		; get end packet
	jmp	xx$don		; all over

xx$er1:	drrep$	<1>
xx$er2:	drrep$	<2>
xx$er3:	drrep$	<3>
xx$erj:	jmp	xx$err
.sbttl	i/o envelope

;	ip.trn	code
;	r0 	byte count

xx$ctl:	begin				; send control packet
     up	mov	#x$xrsp,r1		; r1 = buffer 
	mov	r1,r2			; local copy
	mov	(pc)+,(r2)+		; dp.typ
	.byte	ddCTL.,dp.bbs-4		;
	mov	ip.trn(r3),(r2)+	; dp.cod + dp.mod
	mov	ip.uni(r3),(r2)+	; dp.uni + dp.swi
	mov	x$xext,(r2)+		; dp.seq - extended flag
	mov	r0,(r2)+		; dp.bct
	mov	ip.lb0(r3),(r2)+	; dp.blk
	mov	#dp.bbs-2/2,r2		; r2 = word count
	call	xx$snd			; send this lot with checksum
	end				;

xx$snd:	begin				; r1 -> buffer
	clr	(r3)			; r2 = word count
10$:	mov	(r1)+,r0		; get next word
	call	xx$ptw			; put it
	sobw	r2,10$			; count it
	call	xx$pck			; send checksum
	end	

xx$enp:	begin				; receive and check end packet
     up	mov	#x$xrsp,r1		;
	mov	#ddctl.,r0		; insist on that first
	mov	#dp.bbs-4/2,r2		; get the rest
	call	xx$gfw			; get/check first word
	mov	r0,(r1)+		;
10$:	call	xx$gtw			; get another
	mov	r0,(r1)+		;
	sobw	r2,10$			;
	call	xx$chk			; do checksum
	bnew	x$xrsp+dp.seq,#ddSXT.,30$ ; not extended server
	mov	#ddCXT.,x$xext		; is extended - setup the flag
30$:
;	movb	x$xrsp+dp.sta,r0	; get status
;	beq				; fine
;	beqb	r0,#dd
	bneb	x$xrsp+dp.sta,xx$er3	; some error
	end
.sbttl	interrupt, done, online

xx$wai:	begin	x$xctn			; continue after interrupt
	mov	r0,ip.r0(r3)		;
	mov	r1,ip.r1(r3)		; save stuff
	mov	r2,ip.r2(r3)		;
	drtim$	x$xtmo			; setup timer
xx$ret:	return				;

;	Interrupt entry point

	.drast	xx,ddpri.,xx$abt	; INTERRUPT
	call	xx$dsb			; disable interrupts
tm$ast:	pshs	<r3,r2,r1,r0>		;
	call	10$			; dispatch via x$xctn
     	pops	<r0,r1,r2,r3>		;
	return				;
10$:	call	xx$pnt			;
	beq	xx$ret			; no queue element
20$:	end	x$xctn			;

xx$abt:	call	xx$dsb			; disable interrupts
	clrb	0(r5)			;\clear break
;sic]	clrb	7(r5)			;|DZV
	x$xdz1 = .-2			;/DZV patch address
	br	xx$fin			; and out of here

xx$agn:	mov	(sp),x$xagn		; setup retry point
	return

xx$er4:	drrep$	<4>
xx$er5:	drrep$	<5>
xx$err:	dec	ip.rty(r3)		; final retry attempt?
	bmi	xx$her			; all over
	call	xx$ini			; go init
10$:	jmp	@(pc)+			; back to retry point
x$xagn:	.word	0			; repeat from function

xx$siz: call	xx$agn			; setup retry point
	mov	#ddRES.,ip.trn(r3)	; reset function
	clr	r0			; no data
	call	xx$ctl			; send control packet
	call	xx$enp			; get end packet
	mov	#ddsiz.,r0		; normal TU58 size
	bnew	x$xrsp+dp.seq,#ddSXT.,10$ ; not extended server
	mov	x$xrsp+dp.blk,r0	; get size from server
10$:	call	xx$put			; return size
xx$don:	br	xx$fin			;

;	I/O done - handle errors
;
;	r3 ->	response packet
;	r4 ->	I/O queue element

xx$her:	bis	#csher$,@iq.csw(r4)	;sic] set the error flag
	clr	x$xini			;
xx$fin:	.if ne odt$c			;
	beqw	x$xodt,10$		;not in odt mode
	bis	#ddenb$,@x$xcsr		;reenable terminal
	.endc				;
10$:	drrep$ <Fin>			;
	.drfin	xx			;finish up
.sbttl	device utilities

	.enabl	lsb
xx$gfw:	begin	x$xgtw			; check first byte
	mov	r0,(r3)			; save match value
	call	xx$gtb			; get first
	beqb	r0,(r3),10$		; fine
	swab	(r3)			; is there an alternate?
	beq	xx$err			; no alternate code
	bneb	r0,(r3),xx$er4		; still no joy
10$:	clr	(r3)			; clear checksum
	br	20$			; get second byte

xx$gtw:	begin	x$xgtw			;
	call	xx$gtb			; get two bytes
20$:	swab	r0			;
	call	xx$gtb			;
	swab	r0			;
	add	r0,(r3)			; accumulate checksum
	adc	(r3)			;
	end	x$xgtw
	.dsabl	lsb

xx$gtb:	begin
.if ne prt$c
10$:	call	@ptGET.(r5)		; get next
	bcc	20$			; got one
	call	@ptENB.(r5)		; enable interrupt
	call	xx$wai			; wait for it
	br	10$			;
20$:	clrb	r0			;
	bisb	pt.ipt(r5),r0		;
.iff
10$:	tstb	(r5)			; ready for us?
	bmi	20$			; yep
	.if ne wai$c			; in wait mode
	bnew	x$xwai,10$		; we wait for it
	.endc				;
	bis	#ddenb$,(r5)		; nope - enable and
	call	xx$wai			; and wait for it
	br	10$			;
20$:	clrb	r0			;
	bisb	dd.rbu(r5),r0		;
	ifipt$	r0
.endc
	end

xx$pck:	mov	(r3),r0			; get the checksum
xx$ptw:	begin				;
	add	r0,(r3)			; accumulate checksum
	adc	(r3)			;
	call	xx$ptb			;
	swab	r0			;
	call	xx$ptb			;
	end

xx$chk:	begin				; check the checksum
	mov	(r3),r2			; get the checksum
	call	xx$gtw			; get the checksum
	bnew	r0,r2,xx$er5		; oops
	end				;

xx$ptb:	begin
10$:
.if ne dzv$c
	bpcw	#dzcse$,(r5),20$	; not a DZ
	bmiw	(r5),40$		; ready
	.if ne wai$c			; in wait mode
	bnew	x$xwai,10$		; we wait for it
	.endc				;
	bis	#dzcti$,(r5)		; enable output interrupt
	br	30$			;
.endc
20$:	tstb	dd.xsr(r5)		; ready for us?
	bmi	40$			; yep
	.if ne wai$c			; in wait mode
	bnew	x$xwai,10$		; we wait for it
	.endc				;
	bis	#ddenb$,dd.xsr(r5)	; nope - enable and
30$:	call	xx$wai			; wait for it
	br	10$			;
40$:	movb	r0,dd.xbu(r5)		;
	ifopt$	r0
	end

tm$abt:
     up	mov	#xx$err,x$xctn		; timer abort
xx$dsb:	drtim$	#0			; cancel timeout
	mov	x$xcsr,r5		; ugh
.if ne dzv$c
	bic	#dzcti$!ddenb$,(r5)	; turn off both
.iff
	bic	#ddenb$,(r5)		; switch off interrupts
.endc
	bic	#ddenb$,dd.xsr(r5)	; 
	return

xx$ini:	begin				; init device
drrep$ I
	inc	x$xini			; init in progress
	mov	#8.,r1			; eight retries
10$:	movb	#ddbrk$,0(r5)	;7(r5)	; set break
;sic]	movb	#dzbrk?,7(r5)		; set DZV mask
	x$xdz2=.-4			; DZV patch
	x$xdz3=.-2			; DZV patch
20$:	mov	#177777,r0		; like RT-11
	call	xx$ptw			; send 377 twice
	clrb	0(r5)		;7(r5)	; clear break
	x$xdz4=.-2			; DZV patch
drrep$ J
	mov	(pc)+,r0		;
	.byte	ddini.,ddini.		; two inits
	call	xx$ptw			; write two inits
drrep$ K
25$:	tst	dd.rbu(r5)		; clear input errors
.if ne dzv$c
	nop				; empty DZV silo
	nop				; (emulators need delay)
	bmib	(r5),25$		; more in silo?
.endc
	call	xx$gtb			; get the response
	beqb	r0,#ddCON.,30$		; great
drrep$ L
	sobw	r1,10$			; try again
	jmp	xx$her			; declare it dead
30$:	end

$drtim					; timeout support
.sbttl	memory utilities

xx$sav:	mov	iq.buf(r4),ip.buf(r3)	; save buffer address
     xm	mov	iq.par(r4),ip.par(r3)	; and xm par1
	return

xx$res:	mov	ip.buf(r3),iq.buf(r4)	; restore buffer address
     xm	mov	ip.par(r3),iq.par(r4)	;
	return

xx$get:
     um	mov	@iq.buf(r4),r0		; get word
     um	add	#2,iq.buf(r4)		;
     xm	clr	r0			;
     xm	call	(pc)			; do this twice
     xm	call	@$gtbyt			; get low order
     xm	bisb	(sp)+,r0		;
     xm	swab	r0			;
	return

xx$put:	psh	r0			; put word
     um	pop	@iq.buf(r4)		;
     um	add	#2,iq.buf(r4)		;
     xm	call	@$ptwrd			;
10$:	return
	.dsabl	lsb

xx$pnt:
     up	mov	#x$xpkt,r3		; r3 -> packet
	mov	ip.r0(r3),r0		;
	mov	ip.r1(r3),r1		;
	mov	ip.r2(r3),r2		;
	mov	ip.csr(r3),r5		; r5 -> csr
	mov	xxcqe,r4		; r4 -> queue element
	return				; z=1 => aborted

drrep$
ifcod$
.sbttl	bootstrap

;	Implements timeout

	meta	<boloc$ adr><.=xxboot+adr>
	meta	<bolim$ adr><assume . le <xxboot+adr>>
	.drbot	xx,bo$jmp,bo$rea
xxbbl.=1
boloc$	14				; manual restart
.if ne dzv$c
bo$onc:	mov	#dzcse$,(r5)	;2	; check for DZV
	bpsw	#dzcse$,(r5),bo$on2 ;3	; it's a DZV
	clr	b$obk0		;2	; adjust breaks
	clr	b$obk1		;2	;
	br	bo$onx		;1	;
.iff				;10 (12)
	mov	#b$rksp,sp		; reset stack
	jmp	bo$rst			; restart
.endc

boloc$	40
bo$jmp = .+2
	jmp	@#bo$boo-xxboot

boloc$	44
b$orpk:
.if ne dzv$c
bo$on2:	mov	#ddDZI$,dd.rbu(r5);3 	; enable input
	b$odzi = .-4
	mov	#ddDZO$,dd.xsr(r5);3	; enable output
	b$odzo = .-4
	mov	#tst+65,bo$ptb	;3	; tst tks for output done
	clr	bo$ptb+2	;2	;
	br	bo$onx		;1	;
bolim$	100			;12(13)	; skip clock interrupt
boloc$	110				;
bo$onx:	mov	#mov+2727,bo$pat;3	; zap once-only branch
	br	bo$pat		;1	; start over
.iff				;4 (4)
	.blkb	dp.bbs-2		; receive packet
					; -2 'cos checksum not stored
.endc

;	Boot read routine
;
;	r0	block
;	r1	word count
;	r2	buffer address
;
;	r3	checksum
;	r4	buffer address
;	r5	csr
;
;	init
;	send control packet
;	  receive data header
;	  receive buffer or null segment
;	  receive checksum
;	receive end packet

boloc$	120
bo$rea:	mov	@#b$rdvu,b$ouni		; get the unit number
bo$loa:	mov	sp,(pc)+		; save stack
b$ostk:	.word	0			;
	mov	r0,b$oblk		; block
	asl	r1			; bytes
	mov	r1,b$obct		; byte count
	beq	bo$ret			; forget seeks
	mov	r2,r4			; r4 = buffer address
	mov	(pc)+,r5		; r5 = csr
b$ocsr:	.word	ddcsr.			;

.if ne dzv$c
bo$pat:	br	bo$onc			; once only
;sic]	mov	(pc)+,(pc)+		;
	.word	xxrty.			;
.iff
	mov	#xxrty.,(pc)+		; boot retry count
.endc
b$orty:	.word	xxrty.			; retry counter
bo$agn:	mov	#8.+1.,r1		; repeat inits
bo$ini:	dec	r1			; count inits
	bmi	bo$rty			;
.if ne dzv$c
	movb	#1,7(r5)		; set break
	b$obk0 = .-2
.iff
	mov	#1,(r5)			; set break
.endc
	clr	r0			;
	call	bo$ptw			; two of them
.if ne dzv$c
	clrb	7(r5)			; clear break
	b$obk1 = .-2
.iff
	clr	(r5)			; clear break
.endc
	mov	(pc)+,r0		; send two inits
	.byte	ddINI.,ddINI.		;
	call	bo$ptw			; two of them
	tstb	dd.rbu(r5)		; clear input errors
	call	bo$gtb			; get byte swapped response
	bnew	r0,#ddCON.*256.+ddINI.,bo$ini; wrong answer
bo$trn:	mov	#b$ospk-xxboot,r1	; send packet
	mov	#dp.bbs-2/2,r2		; words to send
	clr	r3			; clear checksum
	call	bo$snd			; send the thing
	mov	r4,r1			; buffer address
10$:	call	bo$gtw			; get data header
	mov	r0,r3			; start checksum
	mov	r0,r2			;
	clrb	r2			;
	swab	r2			;
	asr	r2			;
	bneb	r0,#ddDAT.,20$		; not data -- check end packet
	call	bo$rcv			; get the rest
	br	10$			;
					;
20$:	bneb	r0,#ddNUL.,40$		; not null segment
30$:	clr	(r1)+			; clear segment
	sobw	r2,30$			; more
	call	bo$chk			; get checksum
	br	10$			; loop
					;
40$:	cmp	r0,(pc)+		; check end packet header
	.byte	ddctl.,dp.bbs-4		; 
	bne	bo$rty			; wrong, all wrong
	mov	#b$orpk+2-xxboot,r1	; end packet
	mov	#dp.bbs-4/2.,r2		; size of it
	call	bo$rcv			; read it
	cmp	b$orpk+dp.cod,(pc)+	; check code and status
	.byte	ddEND.,0		;
	bne	bo$rty			; code or status wrong
	bnew	b$orpk+dp.seq,#ddSXT.,bo$ret
	mov	#ddCXT.,b$ospk+dp.seq	; handshake
bo$ret:	return				; viola!

bo$rcv:	call	bo$gtw			; get another
	mov	r0,(r1)+		; store it	
	add	r0,r3			; update checksum
	adc	r3			;
	sobw	r2,bo$rcv		; count them
bo$chk:	mov	r3,r2			; save checksum
	call	bo$gtw			; get server checksum
	beqw	r0,r2,bo$ret		; very good
	tst	(sp)+			; skip return
bo$rty:	dec	b$orty			; retries done?
	bpl	bo$agn			; not quite deceased
	jmp	br$ioe+xxboot		; and all was darkness

bo$snd:	mov	(r1)+,r0		; send packet
	add	r0,r3			; update checksum
	adc	r3			;
	call	bo$ptw			; send it
	sobw	r2,bo$snd		; count them
	mov	r3,r0			; send checksum
bo$ptw:	call	(pc)			; put word
bo$ptb:	bplb	dd.xsr(r5),bo$ptb	; put byte
;sic]	bplw	0(r5),bo$ptb		; DZV patch 
	movb	r0,dd.xbu(r5)		; out damned spot
	swab	r0			; swap for next
	return				;

bo$gtw:	call	(pc)			;
	assume	dd.rsr eq 0		; get byte (in high byte)
bo$gtb:	movb	#12.,20$		; timeout magic
10$:	dec	#0			; low order
	bne	30$			; more
	dec	(pc)+			;
20$:	.word	12.			; high order
	bne	30$			; more
	mov	b$ostk,sp		; restore stack
	br	bo$rty			; try again
30$:	bplb	(r5),10$		; wait for it
	clrb	r0			; avoid sign extend
	bisb	dd.rbu(r5),r0		; get value
	swab	r0			; swap to get word
	return				;

b$ospk:					; send packet
	.byte	ddCTL.,dp.bbs-4		; typ, cnt
	.word	ddREA.			; cod, sta
b$ouni:	.word	0			; uni
	.word	0			; seq
b$obct:	.word	0			; bct
b$oblk:	.word	0			; blk
	.word	0			; chk
.sbttl	hardware boot

;	r0	unit number in low order 3 bits

bo$boo:	mov	#b$rksp,sp		; setup the stack
	bic	#^c7,r0			; isolate unit number
	mov	r0,b$ouni		; setup the unit number
bo$rst:	mov	#brsbn.,r0		; r0 = block
	mov	#brswc.,r1		; r1 = word count
	mov	#br$sec,r2		; r2 = buffer address
	call	bo$loa			; load secondary boot
	mov	#bo$rea-xxboot,@#b$rrea	; fill in address of read routine
	b$onam = . + 2			; for SET
	mov	#xxnam.,@#b$rdvn	; fill in device name
	mov	b$ouni,@#b$rdvu		; setup unit number
	jmp	br$sec+xxboot		; start secondary boot

	assume	. le b$rtop+xxboot	; check space for bioerr etc
	.drend	xx
.sbttl	load/fetch
boloc$	1000
ddload:

dr$fet:
dr$loa:
	call	up$rel			; relocate driver
	mov	(r5),r4			; driver entry point
	sub	#dr.lqe,r4		; r4 -> driver block zero
	vecap$	#v$eclk,#tm$clk,r4	; capture clock for timeout
.if ne dzv$c
	mov	x$xcsr(r4),r3		; r3 -> csr
	mov	#dzcse$,(r3)		; check for DZV
	bpcw	#dzcse$,(r3),20$	; not a DZ
	mov	l$odzi,dd.rbu(r3) 	; enable input
	mov	l$odzo,dd.xsr(r3)	; enable output
	movb	#7,x$xdz1(r4)		; patch break stuff
	movb	l$odzo,x$xdz2(r4)	; patch break stuff
	movb	#7,x$xdz3(r4)		; patch break stuff
	movb	#7,x$xdz4(r4)		; patch break stuff
	br	20$			;
10$:	clr	x$xdzi(r4)		; flag not DZ
.endc
20$:	return

.if ne dzv$c
l$odzi:	.word	ddDZI$
l$odzo:	.word	ddDZO$
.endc

dr$rel:
dr$unl:	mov	(r5),r4
	sub	#dr.lqe,r4
	call	xx$dsb(r4)		; disable (r5 destroyed)
	verel$	#v$eclk,#tm$clk,r4
	return

;	lo$dzp - set port/speed code
;
;	r0	port/speed
;	r3	007400 => speed
;		000017 => port
;
;	r0	rbu: line parameters
;	r1	xsr: output enable
;
;	c=1	invalid values

.if ne dzp$c
lo$dzp:	mova	40$,r1		; data
	beqb	r3,10$		; SET SPEED=
	bhiw	r0,#3,30$	; SET PORT=0..3
	add	r0,r1		; point to output enable
	movb	(r1),l$odzo	; save it
	br	20$		;

10$:	mov	#-1,r2		; search for value
15$:	inc	r2		;
	tst	-(r1)		; any more?
	beq	30$		; nope
	bnew	r0,(r1),15$	; not this one
	swab	r2		; in high word
	mov	r2,r0		;
				;
20$:	bic	r3,l$odzi	; erase field
	bis	l$odzi,r0	; merge fields
	mov	r0,l$odzi	; save speed or port
	mov	l$odzo,r1	; get output enable
	tst	(pc)+
30$:	sec
	return

	.word	0
	.word	19800.,9600.,7200.,4800.
	.word	3600.,2400.,2000.,1800.
	.word	1200.,600.,300.,150.,134.,110.,75.,10.
				; reverse speed data
40$:	.byte	1,2,4,10	; port positive
.endc

uprel$
$vepkg
$hkpkg
$drlim	ddinst+1000
.sbttl	installation probe overlay
boloc$ 2000
ddinst:

;	r5	CSR address
;
;	c=1	probe failed

.if ne prb$c
in$prb:
;sic]	mov	dr.csr,r5		;
	mov	#dzcse$,(r5)		;
	bpsw	#dzcse$,(r5),10$ 	; it's a DZV
	mov	i$ndzi,dd.rbu(r5)	;
	mov	i$ndzo,dd.xsr(r5)	;
10$:	mov	#3.+1.,r1		; repeat inits
in$ini:	dec	r1			; count inits
	bmi	50$			;
	bpsw	#dzcse$,(r5),10$	;
	mov	#1,(r5)			; set break
	br	20$			;
10$:	bisb	i$ndzo,dd.xbu+1(r5)	;
20$:	clr	r0			;
	call	in$ptw			; two of them
	bpsw	#dzcse$,(r5),30$	;
	clr	(r5)			; clear break
	br	40$			;
30$:	clrb	dd.xbu+1(r5)		;
40$:	mov	(pc)+,r0		; send two inits
	.byte	ddINI.,ddINI.		;
	call	in$ptw			; two of them
	tstb	dd.rbu(r5)		; clear input errors
	call	in$gtb			; get response with timeout
	bneb	r0,#ddCON.,in$ini	; wrong answer
	tst	(pc)+			;
50$:	sec				;
60$:	return				;


in$ptw:	call	(pc)			; put word
in$ptb:	bpsw	#dzcse$,(r5),10$	;
	bplb	dd.xsr(r5),in$ptb	; put byte
	br	20$			;
10$:	bplw	(r5),in$ptb		;
20$:	movb	r0,dd.xbu(r5)		; out damned spot
	swab	r0			; swap for next
	return				;

	assume	dd.rsr eq 0		; get byte (in high byte)
in$gtb:	movb	#4.,20$	; was 12.	; timeout magic
10$:	dec	#0			; low order
	bne	30$			; more
	dec	(pc)+			;
20$:	.word	12.			; high order
	bne	30$			; more
	clr	r0			; nothing doing
	br	40$			;
30$:	bplb	(r5),10$		; wait for it
	movb	dd.rbu(r5),r0		; get value
40$:	return				;
.endc

.if ne dzp$c
in$dzp:	mov	r0,(pc)+		; DZV constants
i$ndzi:	.word	ddDZI$
	mov	r1,(pc)+
i$ndzo:	.word	ddDZO$
	return
.endc

drinf$
.end
