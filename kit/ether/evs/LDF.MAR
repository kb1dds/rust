;-------------------------------;
; FAB - FILE ACCESS BLOCK	;
;-------------------------------;
;
.MACRO	$FAB_DEF
;
map$	fab.bid	byte.,0		;
map$	fab.bln	byte.		;
map$	fab.ifi	word.		;
map$	fab.fop	long.		;
map$	fab.sts	long.		;
map$	fab.stv	long.		;
map$	fab.alq	long.		;
map$	fab.deq	word.		;
map$	fab.fac	byte.		;
map$	fab.shr	byte.		;
map$	fab.ctx	long.		;
map$	fab.rtv	byte.		;
map$	fab.org	byte.		;
map$	fab.rat	byte.		;
map$	fab.rfm	byte.		;
map$	fab.jnl	long.		;
map$	fab.xab	long.		;
map$	fab.nam	long.		;
map$	fab.fna	long.		;
map$	fab.dna	long.		;
map$	fab.fns	byte.		;
map$	fab.dns	byte.		;
map$	fab.mrs	word.		;
map$	fab.mrn	long.		;
map$	fab.bls	word.		;
map$	fab.bks	byte.		;
map$	fab.fsz	byte.		;
map$	fab.dev	long.		;
map$	fab.sdc	long.		;
map$	fab.gbc	word.		;
map$	fab.dsm	byte.		;dsbmsk
map$	fab.f00	byte.*3		;
map$	fab.bbs			;
;
;	fab.bid
;
map$	fab_bid.,,3		;bid
;
;	fab.ifi
;
map$	fab_ppf_rat_b,,6	;
map$	fab_ppf_rat$m,,<^x3fc0>	;
map$	fab_ppf_rat_l,,8	;
map$	fab_ppf_ind_,,14	;
map$	fab_ppf_ind$m,,<^x4000>	;
;
;	fab.fop
;
map$	fab_mxv_,,1
map$	fab_sup_,,2
map$	fab_tmp_,,3
map$	fab_tmd_,,4
map$	fab_dfw_,,5
map$	fab_sqo_,,6
map$	fab_rwo_,,7
map$	fab_pos_,,8
map$	fab_wck_,,9
map$	fab_nef_,,10
map$	fab_rwc_,,11
map$	fab_dmo_,,12
map$	fab_spl_,,13
map$	fab_scf_,,14
map$	fab_dlt_,,15
map$	fab_nfs_,,16
map$	fab_ufo_,,17
map$	fab_ppf_,,18
map$	fab_inp_,,19
map$	fab_ctg_,,20
map$	fab_cbt_,,21
map$	fab_jnl_,,22
map$	fab_rck_,,23
map$	fab_nam_,,24
map$	fab_cif_,,25
map$	fab_ufm_,,26
map$	fab_esc_,,27
map$	fab_tef_,,28
map$	fab_ofp_,,29
map$	fab_kfo_,,30
;
;	fab.fac
;
map$	fab_put.,,0
map$	fab_get.,,1
map$	fab_del.,,2
map$	fab_upd.,,3
map$	fab_trn.,,4
map$	fab_bio.,,5
map$	fab_bro.,,6
map$	fab_exe.,,7
;
;	fab.shr
;
map$	fab_shrput_,,0
map$	fab_shrget_,,1
map$	fab_shrdel_,,2
map$	fab_shrupd_,,3
map$	fab_mse_,,4
map$	fab_nil_,,5
map$	fab_upi_,,6
;
;	fab.org
;
map$	fab_org_b,,4
map$	fab_org_l,,4
map$	fab_seq.,,0
map$	fab_rel.,,16
map$	fab_idx.,,32
map$	fab_hsh.,,48
;
;	fab.rat
;
map$	fab_ftn.,,0
map$	fab_cr.,,1
map$	fab_prn.,,2
map$	fab_blk.,,3
;
;	fab.rfm
;
map$	fab_rfm_dflt.,,2
map$	fab_udf.,,0
map$	fab_fix.,,1
map$	fab_var.,,2
map$	fab_vfc.,,3
map$	fab_stm.,,4
map$	fab_stmlf.,,5
map$	fab_stmcr.,,6
map$	fab_maxrfm.,,6
;
.ENDM	$FAB_DEF
;-------------------------------;
; FAP - FILE ACCESS PLEX	;
;-------------------------------;
;
.MACRO	$FAP_DEF
;
map$	fap.suc	long.,0		;successor
map$	fap.pre	long.		;predecessor
map$	fap.fcb	long.		;fcb pointer
map$	fap.chn	word.		;channel number
map$	fap.efn	byte.		;event flag number
map$	fap.ctl	byte.		;control
map$	fap.stc	long.		;status code
map$	fap.stv	long.		;status value
map$	fap.bbs			;
;
map$	fap_pur_,,0		;purge fap during deaccess
;
.ENDM	$FAP_DEF
;-------------------------------;
; FAT - FILE ATTRIBUTES		;
;-------------------------------;
;
.MACRO	$FAT_DEF
;
map$	fat.rfo	byte.,0		;rtype	 rfo rfm/org - record type
map$	fat.rat	byte.		;rattrib atr rat - record attributes
map$	fat.lrl	word.		;rsize	 lrl     - largest record written
map$	fat.hib	long.		;hiblk   hbk	 - high block
map$	fat.hih	word.,fat.hib	;hiblkh	 
map$	fat.hil	word.		;hiblkl
map$	fat.efb	long.		;efblk	 ebk	 - endfile block
map$	fat.efh	word.,fat.efb	;efblkh
map$	fat.efl	word.		;efblkl
map$	fat.ffb	word.		;ffbyte	 ffb	 - first free byte
map$	fat.fsz	byte.		;vfcsize hsz fsz - vfc header size	
map$	fat.bks	byte.		;bktsize bkz bks - bucket size
map$	fat.mrs	word.		;maxrec  mrz mrs - maximum record size or none
map$	fat.deq	word.		;defext  dxq deq - default extension quantity
map$	fat.gbc	word.		;gbc
map$	fat.f00	word.*4		;
map$	fat.vrs	word.		;versions 
;				;	 sbn	 - start block number
map$	fat.bbs			;
;
;	fat.rfo - fat.rfm - fab.rfm - record format
;
map$	fat_rfm_b,,0		;record format
map$	fat_rfm_l,,4		;
map$	fat_udf.,,0		;undefined	udf
map$	fat_fix.,,1		;fixed		fix
map$	fat_var.,,2		;variable	var
map$	fat_stm.,,3		;stream		stm?
map$	fat_scr.,,4		;streamcr
map$	fat_slf.,,5		;streamlf
;
;	fat.rfo - fat.org - fab.org - file organisation
;
map$	fat_org_b,,4		;fileorg - file organisation
map$	fat_org_l,,4		;
map$	fat_seq.,,0		;sequential	seq
map$	fat_rel.,,1		;relative	rel
map$	fat_idx.,,2		;indexed	idx
map$	fat_dir.,,3		;directory	?
;
;	fat.rattrib - fat.rat - fab.rat - record attributes
;
map$	fat_ftn_,,0		;fortrancc	ftn
map$	fat_crn_,,1		;implied	cr
map$	fat_prn_,,2		;printcc	prn
map$	fat_blk_,,3		;nospan		blk
;
.ENDM	$FAT_DEF
;-------------------------------;
; FCB - FILE CONTROL BLOCK	;
;-------------------------------;
;
;	Details a file known to the system
;	Linked to UCB.FSU/UCB.FPR.
;	Pointed to by CCB.FCB
;	Short form (fcb.dbs) for non-file devices
;
.MACRO	$FCB_DEF
;
map$	fcb.suc	long.,0		;successor - ucb queue
map$	fcb.pre	long.		;predecessor
map$	fcb.ctl	word.		;control
map$	fcb.act	word.		;access count
map$	fcb.did	word.*3.	;device/directory (device/penultimate)
map$	fcb.fid	word.*3		;file id - fcb pointer
map$	fcb.slb	long.		;start logical block number or cid
map$	fcb.len	long.		;file length
map$	fcb.fat	null.		;fat area
map$	fcb.dbs	null.		;device byte size
;
map$	fcb.ddv	word.,fcb.did	;device name in rad50
map$	fcb.ddr	word.		;directory name in rad50
map$	fcb.det	word.		;extended name
;
map$	fcb.ffl	word.,fcb.fid	;filename
map$	fcb.fnm	word.		;
map$	fcb.ftp	word.		;
;
;	File header area - file-structured devices only
;
;map$	fcb.dat	word.		;date
;map$	fcb.tim	word.		;time in seconds
;map$	fcb.uic	word.		;uic
;map$	fcb.prt	word.		;protection
;
;	File attributes - 32 bytes
;
map$	fcb.rfo	byte.,fcb.fat	;rtype	 rfo rfm/org - record type ($rfm/$org)
map$	fcb.rat	byte.		;rattrib atr rat - record attributes ($org)
map$	fcb.lrl	word.		;rsize	 lrl     - largest record written
map$	fcb.hbk	long.		;hiblk   hbk	 - high block
map$	fcb.ebk	long.		;efblk	 ebk	 - endfile block
map$	fcb.ffb	word.		;ffbyte	 ffb	 - first free byte
map$	fcb.fsz	byte.		;vfcsize hsz fsz - vfc header size	
map$	fcb.bks	byte.		;bktsize bkz bks - bucket size
map$	fcb.mrs	word.		;maxrec  mrz mrs - maximum record size or none
map$	fcb.deq	word.		;defext  dxq deq - default extension quantity
map$	fcb.gbc	word.		;gbc
map$	fcb.f00	word.*4		;
map$	fcb.vrs	word.		;versions 
;				;	 sbn	 - start block number
;				;
map$	fcb.nod	byte.*7		;6 character node name
map$	fcb.dev	byte.*7		;6 character device name
map$	fcb.dir	byte.*7		;6 character directory name
map$	fcb.fil	byte.*10	;9 character file name
map$	fcb.typ	byte.*4		;3 character file type
;				;
map$	fcb.bbs			;
;
.ENDM	$FCB_DEF
;-------------------------------;
; FIB - FILE INFORMATION BLOCK	;
;-------------------------------;
;
; VMS file information block
;
.MACRO	$FIB_DEF	
;
map$	fib.act	byte.*3,0	;fib$l_acctl	access control to file
map$	fib.bct	byte.		;fib$l_acctl+2	access control byte
map$	fib.wsz	byte.		;fib$b_wsize	window size
;
map$	fib.fid	word.*3		;fib$w_fid	file id
map$	fib.did	word.*3		;fib$w_did	directory id
map$	fib.wcc	long.		;fib$w_wcc	wildcard control
map$	fib.nmc	word.		;fib$w_nmctl	name control
map$	fib.exc	null. 	;\	;fib$w_exctl	extend control
map$	fib.ctf	word. 	;/	;fib$w_ctrlfunc	tape & quota for acpcontrol
map$	fib.exs	null. 	;\	;fib$l_exsz	extend size - zero for truncate
map$	fib.ctv	long. 	;/	;fib$l_ctrlval	control value - tape & quotas
map$	fib.xvb	long.		;fib$l_exvbn	ext=efblk+1, truncate=last vbn
map$	fib.apc	byte.		;fib$b_alopts	allocation position control
map$	fib.amd	byte.		;fib$b_alalign	allocation alignment mode
map$	fib.all	null.*10.	;fib$w_alloc	allocation position
map$	fib.anm	word.		;fib$w_loc_num	allocation file number
map$	fib.asq	word.		;fib$w_loc_seq	allocation file sequence number
map$	fib.arv	word.		;fib$w_loc_rvn	alloc. relative volume number
map$	fib.acb	word.		;fib$w_loc_addr	placement lb, cylinder or vbn
map$	fib.vlm	word.		;fib$w_verlim	version limit
map$	fib.rs0	word.		;		unused for longword align
map$	fib.bbs			;
;
; fib.acc - access control	
;
map$	fib_anw_,,0		;fib$m_nowrite	1=no write access for others
map$	fib_adl_,,1		;fib$m_dlock	1=lock on deaccess - disk only
map$	fib_abl_,,2		;fib$m_blk_lock	1=enable block locking
map$	fib_arw_,,3 		;fib$m_rewind	1=rewind tape before access
map$	fib_asp_,,4 	;\ 	;fib$m_spool	1=spool - disk only
map$	fib_acp_,,4 	;/	;fib$m_curpos	1=access tape at current pos.
map$	fib_awc_,,5		;fib$m_writeck	1=write check
map$	fib_aso_,,6 	;\ 	;fib$m_seqonly	1=sequential only - disk only
map$	fib_aup_,,6 	;/	;fib$m_update	1=access tape at start of file
;		,,7		;
map$	fib_awr_,,8		;fib$m_write	1=write access, 0=read-only
map$	fib_arc_,,9		;fib$m_readck	1=read check
map$	fib_anr_,,10		;fib$m_noread	1=no read access for others
map$	fib_ant_,,11		;fib$m_notrunc	1=no trunctate?
;
; fib.ac2 - access control 2
;
map$	fib_bex_,,0		;fib$m_execute	1=access using execute mode
map$	fib_bpa_,,1		;fib$m_prsrvatr	1=span attributes - tape only
map$	fib_brl_,,2		;fib$m_rmslock	1=declare RMS locking on file
map$	fib_bwt_,,3		;fib$m_writethru 1=writethru
map$	fib_bnl_,,4		;fib$m_nolock	
map$	fib_bne_,,5		;fib$m_norecord	
;
; fib.nmc - name control - same as rsx nb.sta
;
map$	fib_nav_,,3		;fib$m_allver	wildcard versions - common
map$	fib_nat_,,4		;fib$m_alltyp	wildcard types - common
map$	fib_nan_,,5		;fib$m_allnam	wilcard names - common
map$	fib_ndr_,,6		;		explicit directory
map$	fib_ndv_,,7		;		explicit device
map$	fib_nwc_,,8		;fib$m_wild	wildcards present
;		,,8		;		wildcard group
map$	fib_nnv_,,9		;fib$m_newver	create newversion
;		,,9		;		wildcard member
map$	fib_nss_,,10		;fib$m_supersede supersede version
map$	fib_nff_,,11		;fib$m_findfid	find file id
;		,,12		;		fcs
;		,,13		;		fcs
map$	fib_nlv_,,14		;fib$m_lowver	returned if lower versions exist
map$	fib_nhv_,,15		;fib$m_highver	ret. if higher versions exist
;
; fib.exc - extend control
;
map$	fib_eac_,,0		;fib$m_alcon	allocate contiguous
map$	fib_ecb_,,1		;fib$m_alconb	allocate contiguous best try
map$	fib_efc_,,2		;fib$m_filcon	mark file contiguous
map$	fib_ead_,,3		;fib$m_alldef	allocate fib.exs or sys. default
map$	fib_eap_,,4		;fib$m_allocatr	alloc. placement present - cm
;		,,5		;
;		,,6		;
map$	fib_eex_,,7		;fib$m_extend	extend 
map$	fib_etr_,,8		;fib$m_trunc	truncate
map$	fib_enh_,,9		;fib$m_nohdrext	dont generate extension headers
map$	fib_emb_,,10		;fib$m_markbad	dealloc. blocks to badblock file
;				;
map$	fib_enc_,,15		;fib$m_nocharge	no charge
;
; fib.apc - allocation position control
;
map$	fib_pex_,,0		;fib$m_exact	1=exact, 0=approximate
map$	fib_poc_,,1		;fib$m_oncyl	1=position within cylinder
;
; fib.amd - allocation alignment mode
;
map$	fib_lno.,,0		;		no location specified
map$	fib_lcy.,,1		;fib$m_cyl	.word 0,0,rvn,cyl,cyl
map$	fib_llb.,,2		;fib$m_cyl	.word 0,0,rvn,lbn,lbn
map$	fib_lvb.,,3		;fib$m_vbn	.word 0,0,0,vbn,vbn
map$	fib_lfi.,,4		;fib$c_rfi	.word num,seq,rvn,vbn,vbn
;
; fib.ctf - acp control function
;
map$	fib_crv.,,1		;fib$c_rewindvol rewind tape volume
map$	fib_cpe.,,2		;fib$c_posend	pos. at end of tape volume set
map$	fib_cnv.,,3		;fib$c_nextvol	force next volume
map$	fib_csp.,,4		;fib$c_space	
map$	fib_cil.,,5		;fib$c_illegal	
map$	fib_crf.,,6		;fib$c_rewindfil 
;				;
map$	fib_clv.,,7		;fib$c_lock_vol	
map$	fib_cuv.,,8.		;fib$c_unlk_vol	
map$	fib_ceq.,,9.		;fib$c_ena_quota 
map$	fib_cdq.,,10.		;fib$c_dsa_quota	
map$	fib_caq.,,11.		;fib$c_add_quota	
map$	fib_ceq.,,12.		;fib$c_exa_quota	
map$	fib_cmq.,,13.		;fib$c_mod_quota	
map$	fib_crq.,,14.		;fib$c_rem_quota	
map$	fib_cue.,,15.		;fib$c_usereot	
map$	fib_crm.,,16.		;fib$c_remap	
;
; fib.ctv - quota control flags	
;
map$	fib_qam_,,0		;fib$m_all_mem	
map$	fib_qag_,,1		;fib$m_all_grp	
map$	fib_qmu_,,2		;fib$m_mod_use	
map$	fib_qmp_,,3		;fib$m_mod_perm	
map$	fib_qmo_,,4		;fib$m_mod_over	
;
.ENDM	$FIB_DEF
;-------------------------------;
; FID - FILE IDENT		;
;-------------------------------;
;
.MACRO	$FID_DEF
;
map$	fid.num	word.,0		;volume number
map$	fid.seq	word.		;volume sequence
map$	fid.rvn	byte.		;relative volume number
map$	fid.nmx	byte.		;file number extension
map$	fid.bbs			;
;
set$	fid_idx.,,1		;indexf
set$	fid_bit.,,2		;bitmap
set$	fid_mfd.,,3		;mfd
set$	fid_cor.,,4		;corimg
set$	fid_vol.,,5		;volset
set$	fid_con.,,6		;contin
set$	fid_bac.,,7		;backup
set$	fid_bad.,,8		;badlog
set$	fid_fre.,,9		;frefil
;
;	RT11A form
;
map$	fid.fil	word.,0		;FIL in rad50
map$	fid.nam	word.		;NAM in rad50
map$	fid.typ	word.		;TYP in rad50
assume$	fid.bbs eq $		;same length
;
.ENDM	$FID_DEF
;-------------------------------;
; FP  - FRAME PACKET		;
;-------------------------------;
;
.MACRO	$FP_DEF
;
map$	fp_con	long.,0		;condition handler - initially zero
map$	fp.psw	word.		;saved psw <15:5> <4:0>=0
map$	fp.msk	word.		;register and alignment mask
map$	fp.ap	long.		;saved ap
map$	fp.fp	long.		;saved fp
map$	fp.pc	long.		;saved pc
map$	fp.reg	null.		;saved registers
map$	fp.bbs			;basic byte size
;
;	fp.psw
;
map$	fp_psw$p,,<^xffe0>	;psw mask
;
;	fp.msk
;
map$	fp_msk$p,,<^x0fff>	;register save mask (upto 12 r0:r11)
map$	fp_cls$,,1@13		;calls
map$	fp_spa$p,,3@14		;sp alignment
;
;	call entry point
;
map$	fp_sav$p,,<^x0fff>	;register save mask
map$	fp_iv$,,1@14		;iv enable
map$	fp_dv$,,1@15		;dv enable
;
.ENDM	$FP_DEF
                                                                                                                                                                                                                                                                                  