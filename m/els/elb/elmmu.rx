/* file -  elmmu - memory management */
#include "f:\m\els\elb\elmod.h"
#include "f:\m\rid\dbdef.h"
#include "f:\m\rid\prdef.h"
/* code -  memory management */
int elV22b = 0;
elTadr elVhwm = elHWM;
elTadr elVvio = elVIO;
elTadr elVnmx = _1m;
elTadr elVeow = elREG;
ULONG elApar []= {0172340,0172240,0,0177640};
ULONG elApdr []= {0172300,0172200,0,0177600};
elTwrd *elPpar = 0;
elTwrd *elPpdr = 0;
elTwrd elVmmd = 0;
elTwrd elVspm = 0;
elTwrd elVsyn = 0;
/* code -  el_mma - decode MMU address */
el_mma(
elTadr adr ,
int mod ,
elTwrd *val )
{ adr = adr & 0xffff;
  if( elFlsi)return 0;
  if (( ((adr >= (ULONG )0172340) && (adr < (ULONG )0172360)))
  ||(((adr >= (ULONG )0172240) && (adr < (ULONG )0172260)))
  ||(((adr >= (ULONG )0177640) && (adr < (ULONG )0177660)))
  ||(((adr >= (ULONG )0172300) && (adr < (ULONG )0172320)))
  ||(((adr >= (ULONG )0172200) && (adr < (ULONG )0172220)))
  ||(((adr >= (ULONG )0177600) && (adr < (ULONG )0177620)))) {
    return 1; }
  switch ( adr & ~(1)) {
  case 0177570:
    return 1;
   break; case 0177572:
     el_mmu (0);return 1;
   break; case 0177574:
    return 1;
   break; case 0177576:
    return 1;
   break; case 0172516:
    return 1;
   break; case 0177766:
    if( mod){ *val = 0 ; return 1;}
   break; case 0177772:
    return 1;
   break; case 0177546:
    return 1;
   break; case 0177750:
    if ( !mod) {*val=0174021 ;}
   break; case 0177746:
    return 1;
   break; case 0177752:
    return 1;
   break; case 0177744:
    return 1;
   break; default: 
    return 0;
     }
  return 1;
} 
/* code -  el_psw - change psw and stack */
void el_psw(
elTwrd val )
{ if( elFlsi){ PS = val ; return;}
  elAstk[(PS>>14)&3] = SP;
  PS = val;
  SP = elAstk[(PS>>14)&3];
  elVspm = (PS>>14)&3;
  el_mmu (0);
} 
/* code -  el_mmu - setup/reset memory management */
void el_mmu(
int mod )
{ if( !elFmap)return;
  if( (elVmmu = (MM0 & elMAP_) | elVpsr) == 0)return;
  elV22b = MM3 & el22b_;
  if ( mod) {elVsch |= elMMU_ ;}
  if ( mod) {mod = (PS>>12)&3 ;} else {
    mod = (PS>>14)&3 ; }
  elVmmd = mod;
  elPpar = MNW(elApar[mod]);
  elPpdr = MNW(elApdr[mod]);
} 
/* code -  el_mmx - mmu exception */
void el_mmx(
int cod )
{ if( elVsch & elMMU_)return;
  elVsch |= elABT_|elMMU_|elMMX_;
  if( bgVhlt)return;
  MM2 = elVcur;
  MM0 |= 0100000;
} 
/* code -  el_vpx - virtual to physical conversion */
elTadr el_vpx(
elTadr va ,
elTwrd mod )
{ elTadr pa ;
  elTadr apr ;
  elTadr off ;
  elTadr len ;
  elTadr blk ;
  if ( bgVfen && (va == bgVfad)) {++bgVfel ;}
  if( va >= elREG)return ( va );
  if ( !elFmap || !(elVmmu|elVpsr)) {
    if( va < elVvio)return ( va );
    return ( elVhwm|va);
  } 
  apr = (va >> 13) & 7;
  off = va & 017777;
  blk = va & 017700;
  len = (elPpdr[apr]>>2)&017700;
  if (( blk > len)
  ||(!(elPpdr[apr] & mod))) {
    MMUERR(0);
    return ( elDUM); }
  pa = (elPpar[apr]<<6)+off;
  if (( pa >= elVnmx)
  &&(pa < elVhwm)
  ||(pa > elVeow)) {
    INVADR(19); }
  if( elV22b)return ( pa );
  if( pa >= elUIO)return ( pa|(elQIO-elUIO) );
  return ( pa);
} 
