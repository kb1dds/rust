/* file -  ridef - type definition */
#include "f:\m\rid\rider.h"
#include "f:\m\rib\eddef.h"
#include "f:\m\rib\ridef.h"
#include "f:\m\rid\imdef.h"
#include "f:\m\rid\chdef.h"
#include "f:\m\rid\stdef.h"
#include "f:\m\rid\medef.h"
void ri_def (char *,int );
int ri_enc (char ,char *);
/* code -  kw_typ - type definition */
void kw_typ()
{ ri_def ("struct", 'S');
} 
/* code -  kw_uni - union definition */
void kw_uni()
{ ri_def ("union", 'U');
} 
/* code -  ri_def - definition common */
void ri_def(
register char *kwd ,
int typ )
{ char nam [64];
  char str [64];
  register char *ptr ;
  int fwd = 0;
  if (( typ == 'S')
  &&(ed_fnd (" : {"))) {
    ri_enm ();
    return; }
  if ( ed_rep (" : forward", "")) {
    ++fwd;
  } else if ( ed_fnd (" : ")) {
    ri_typ (edPdot, edPdot);
    ed_pre ("typedef");
    ed_app (";");
    return;
  } else if ( ! riVis) {
    im_rep ("W-Invalid type [%s]", edPdot);
    return; }
  ptr = st_skp (edPdot);
  st_app (kwd, (st_app (" ", (st_cop (ptr, nam)))));
  st_app ("_t ", (st_cop (ptr, str)));
  ri_dis ("#define ");
  ri_dis (nam);
  ri_dis (" ");
  ri_prt (str);
  ++riVsup;
  if( fwd)return;
  ri_dis (kwd);
  ri_dis (" ");
  ri_dis (ptr);
  ri_prt ("_t");
  for(;;)  {
    ri_get ();
    if ( riPcur->Veof) {
      im_rep ("EOF in type [%s]", nam);
      return; }
    if( ed_del (" end"))break;
    if ( ed_del (" type")) {
      kw_typ ();
      continue;
    } else if ( ed_del (" unit")) {
      kw_uni ();
      continue; }
    if ( *edPdot) {
      if ( ! ed_fnd (" : ")) {
        im_rep ("Invalid type spec [%s]", nam);
        break;
        } else {
        ri_typ (edPdot, edPdot);
        ed_app (";"); } }
    if ( riVend == 0) {
      ri_put (); }
  if( riVend)break; }
  ed_app (" };");
  riPcur->Vend = 0;
  ri_put ();
  --riVnst;
  ++riVsup;
} 
/* code -  ri_enc - enclosed type/unit */
ri_enc(
register char pre ,
register char *rem )
{ char tag [64];
  if ( pre == '&') {
    ri_dis ("struct {");
    } else {
    ri_dis ("union {"); }
  *(char *)(me_mov (edPdot, tag, rem-edPdot)) = 0;
  ed_del (tag);
  ri_beg ();
  for(;;)  {
    if ( pre == '|') {
      ed_del (" |");
      } else {
      ed_del (" &"); }
    if ( (rem = ed_fnd (" | ")) != 0) {
      ri_enc ('|', rem);
    } else if ( (rem = ed_fnd (" & "))!= 0) {
      ri_enc ('&', rem);
      } else {
      ri_typ (edPdot, edPdot);
      ed_app (";");
      ri_idn (0);
      ri_prt (riPcur->Atxt);
      if( riVend)break; }
    riPcur = riPnxt;
    if( *riPcur->Pbod != pre)break;
    ri_get ();
  } 
  ri_idn (0);
  ri_dis ("} ");
  ri_dis (tag);
  ri_prt (";");
  ri_end ();
} 
