/* code -  ft_mod - font and glyph operations */
#include "c:\m\rid\wimod.h"
#include "c:\m\rid\stdef.h"
#include "c:\m\rid\medef.h"
#include "c:\m\rid\bmdef.h"
#include "c:\m\rid\ftdef.h"
#include "c:\m\rid\dbdef.h"
#include "c:\m\rid\imdef.h"
#define p  ftPAP
#define i  ftINK
char ftAmap [] =  {
  p,p,p,p,
  p,p,p,i,
  p,p,i,p,
  p,p,i,i,
  p,i,p,p,
  p,i,p,i,
  p,i,i,p,
  p,i,i,i,
  i,p,p,p,
  i,p,p,i,
  i,p,i,p,
  i,p,i,i,
  i,i,p,p,
  i,i,p,i,
  i,i,i,p,
  i,i,i,i,
  };
ftTfnt *ft_alc()
{ ftTfnt *fnt = me_acc ( sizeof(ftTfnt));
  RECT rec = {0};
  HWND wnd ;
  HDC dev ;
  fnt->Ldat = ftMAX/8;
  fnt->Pdat = fnt->Agly;
  fnt->Ibmp.Vtot = ftMAX;
  fnt->Ibmp.Pdat = fnt->Abmp;
  fnt->Hdev = CreateEnhMetaFile (NULL,NULL,&rec,NULL);
  if( fnt->Hdev)return ( fnt );
   me_dlc (fnt);return 0;
} 
ft_dlc(
ftTfnt *fnt )
{ ft_rel (fnt);
  DeleteEnhMetaFile (fnt->Hdev);
  me_dlc (fnt);
} 
/* code -  ft_map - map a font */
ft_map(
ftTfnt *fnt )
{ LOGFONT log = {0};
  int cha = fnt->Vcha;
  ft_rel (fnt);
  log.lfHeight = fnt->Vhgt;
  log.lfWidth = fnt->Vwid;
  if ( cha & ftDOS_) {log.lfCharSet = OEM_CHARSET ;}
  if ( cha & ftSYM_) {log.lfCharSet = SYMBOL_CHARSET ;}
  if ( cha & ftFIX_) {log.lfPitchAndFamily = FIXED_PITCH ;}
  if ( cha & ftBOL_) {log.lfWeight = 700 ;}
  if ( cha & ftUND_) {log.lfUnderline = 1 ;}
  if ( cha & ftITA_) {log.lfItalic = 1 ;}
  st_fit (fnt->Anam, log.lfFaceName,  sizeof(log.lfFaceName));
  if( (fnt->Hfnt = CreateFontIndirect (&log)) == 0)return ( 0 );
  if( (ft_sel (fnt, fnt->Hdev)) != 0)return ( 1 );
   ft_rel (fnt);return 0;
  return 1;
} 
ft_sel(
ftTfnt *fnt ,
wsTdev dev )
{ TEXTMETRIC met ;
  if( (fnt->Hold = SelectObject (dev, fnt->Hfnt)) == 0)return ( 0 );
  GetTextMetrics (dev, &met);
  fnt->Vhgt = met.tmHeight;
  fnt->Vasc = met.tmAscent;
  fnt->Vdes = met.tmDescent;
  fnt->Vwid = met.tmMaxCharWidth;
  return 1;
} 
ft_uns(
ftTfnt *fnt ,
wsTdev dev )
{ if( !fnt->Hold)return 1;
  SelectObject (fnt->Hdev, fnt->Hold);
  fnt->Hold = 0;
  return 1;
} 
/* code -  ft_rel - unmap prevailing font */
ft_rel(
ftTfnt *fnt )
{ ft_uns (fnt, fnt->Hdev);
  if ( fnt->Hfnt) {
    DeleteObject (fnt->Hfnt);
    fnt->Hfnt = 0; }
  return 1;
} 
/* code -  ft_gly - get glyph representation of character */
ft_gly(
ftTfnt *fnt ,
int cha )
{ bmTbmp *bmp = &fnt->Ibmp;
  GLYPHMETRICS met = {10,20,0,0,10,20};
  MAT2 mat = {0,1, 0,0, 0,0, 0,1};
  int res ;
  int wid ;
  int hgt ;
  int brd ;
  int len ;
  int maj ;
  long *sp ;
  long *tp ;
  long *src ;
  long *dst ;
  long *tgt ;
  long lng ;
  int rem ;
  int min ;
  int top ;
  res = GetGlyphOutline (fnt->Hdev, cha, GGO_BITMAP, &met,fnt->Ldat, fnt->Pdat, &mat);
  if( res <= 0)return 0;
  bmp->Vwid = wid = met.gmBlackBoxX;
  bmp->Vhgt = hgt = met.gmBlackBoxY;
  brd = ((wid+3)/4)*4;
  bmp->Vwid = brd;
  len = ((wid+31)/32)*32;
  if( (brd * hgt) > bmp->Vtot)return 0;
  sp = (long *)fnt->Pdat;
  tp = (long *)bmp->Pdat;
  top = met.gmptGlyphOrigin.y;
  if ( top != fnt->Vasc) {
    bmp->Vhgt += fnt->Vasc-top;
    tp = me_set (tp, (fnt->Vasc-top)*brd, ftPAP); }
  while ( hgt--) {
    maj = len/32;
    rem = brd/4;
    src = sp, sp = sp + maj;
    tgt = tp, tp = tp + rem;
    while ( maj--) {
      lng = *src++;
      min = 4;
      if ( min > rem) {min = rem ;}
      rem -= min;
      while ( min--) {
        *tgt++ = ((long *)ftAmap)[(lng>>4)&0xF];
        *tgt++ = ((long *)ftAmap)[lng&0xF];
        lng = (lng >> 8) & 0x00ffffff;
      } 
    } 
  } 
  return 1;
} 
