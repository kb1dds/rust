/* file -  rtmod - rt-11 utilities */
#include "c:\m\rid\rider.h"
#include "c:\m\rid\rtdef.h"
#include "c:\m\rid\tidef.h"
#include "c:\m\rid\ctdef.h"
#include "c:\m\rid\chdef.h"
#include "c:\m\rid\medef.h"
/* code -  rt_clk - convert current time to rt-11 clock form */
void rt_clk(
int *tim ,
int *dat ,
int htz ,
int y2k )
{ tiTval val ;
  tiTplx plx ;
  ti_clk (&val);
  ti_plx (&val, &plx);
  *tim = ((plx.Vhou*3600) + (plx.Vmin*60) + plx.Vsec) * htz;
  *dat = ((plx.Vmon+1)<<10) | (plx.Vday<<5) | ((plx.Vyea-1972) & 0x1f);
  if ( y2k) {*dat |= ((plx.Vyea-1972)&0x60)<<9 ;}
} 
/* code -  rt_unp - unpack rad50 */
char rtAunp [41] =  {
  " ABCDEFGHIJKLMNOPQRSTUVWXYZ$%*0123456789",
  };
void rt_unp(
elTwrd *rad ,
char *asc ,
int maj )
{ int div ;
  int wrd ;
  int spc = 0;
  int rem ;
  if ( maj == -4) {maj = 4, spc = 1 ;}
  while ( maj--) {
    wrd = *rad++;
    div = 40 * 40;
    while ( div && wrd) {
      rem = wrd / div;
      wrd -= rem * div;
      *asc++ = rtAunp[rem];
      div /= 40;
    } 
    if( !spc)continue;
    if ( maj == 3) {*asc++ = ':' ;}
    if ( maj == 1) {*asc++ = '.' ;}
  } 
  *asc++ = 0;
} 
/* code -  rt_pck - pack rad50 word */
char *rt_pck(
char *str ,
elTwrd *res ,
int all )
{ int cnt = 3;
  int cha ;
  elTwrd wrd = 0;
  int dig ;
  while ( cnt--) {
    cha = *str;
    dig = 0;
    if ( cha == '%') {
      if ( all) {dig = cha - 011, ++str ;}
    } else if ( cha == '*') {
      if ( all) {dig = cha - 015, ++str ;}
    } else if ( cha == '_') {
      if ( all) {dig = cha - 0137, ++str ;}
    } else if ( ct_dig (cha)) {
      dig = cha - 022, ++str;
    } else if ( ct_alp (cha)) {
      dig = ch_upr (cha) - 0100, ++str; }
    wrd = wrd * 40 + dig;
  } 
  *res = wrd;
  return ( str);
} 
/* code -  rt_spc - pack rad50 filespec */
char *rt_spc(
char *spc ,
elTwrd *nam ,
int mod ,
int cnt )
{ elTwrd wrd ;
  int nth ;
  me_clr (nam, cnt*2);
  spc = rt_pck (spc, &wrd, mod);
  if ( cnt == 4) {
    if ( *spc == ':') {
      *nam++ = wrd, ++spc;
      spc = rt_pck (spc, &wrd, mod);
      } else {
      *nam++ = 0; } }
  *nam++ = wrd;
  *nam++ = wrd;
  spc = rt_pck (spc, nam++, mod);
  if ( *spc == '.') {
    spc = rt_pck (++spc, nam,mod); }
  return ( spc);
} 
