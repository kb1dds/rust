.MCALL	.MODULE
.MODULE	NC,VERSION=19,COMMENT=<DECNA Port Driver>,AUDIT=NO

;                       COPYRIGHT (c) 1989 BY
;           DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;                        ALL RIGHTS RESERVED
;
;THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED
;ONLY  IN  ACCORDANCE  WITH  THE TERMS  OF  SUCH  LICENSE AND WITH THE
;INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY OTHER
;COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
;OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS HEREBY
;TRANSFERRED.
;
;THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT NOTICE
;AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT
;CORPORATION.
;
;DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF ITS
;SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
	.SBTTL	CONDITIONAL ASSEMBLY SUMMARY
	NI$CNA	= 1
	.INCLUDE "SRC:NI.MAC"
	.SBTTL
	.SBTTL	********************************************************
	.SBTTL	*     DECNA Ethernet Controller Device Handler 	       *
	.SBTTL	********************************************************
	.SBTTL	General Information
	.SBTTL		General RT-11 Definitions
	.AUDIT	.NI
	.AUDIT	.NC
.IIF NDF MMG$T 	MMG$T	= 1
.IIF NDF LOOP	LOOP	= 0
	QCOMP	=	270
	SYSVER	= 	276
	CONFIG	=	300
		FBMON$ 	=	000001
	CONFG2	=	370
		PRO$	=	020000
	SYSGEN	=	372
	BIT00 = 1
	BIT01 = 2
	BIT02 = 4
	BIT03 = 10
	BIT04 = 20
	BIT05 = 40
	BIT06 = 100
	BIT07 = 200
	BIT08 = 400
	BIT09 = 1000
	BIT10 = 2000
	BIT11 = 4000
	BIT12 = 10000
	BIT13 = 20000
	BIT14 = 40000
	BIT15 = 100000
	.SBTTL	Macros
.MACRO	SRTCNA	CNACMD,ERRADR
	MOV	CNACMD,SCBCMD(R1)
	JSR	PC,CMD
	BCS	ERRADR
.ENDM	SRTCNA
.MACRO	GETBLK	ERRADR,?A
	CALL	GTBLK
	BCC	A
	JMP	ERRADR
A:
.ENDM GETBLK
.MACRO	PUTBLK
	CALL	PTBLK
.ENDM	PUTBLK
.MACRO	SAVRG	A
	.IRP	REG,<A>
	MOV	REG,-(SP)
	.ENDR
.ENDM	SAVRG
.MACRO	RESRG	A
	.IRP	REG,<A>
	MOV	(SP)+,REG
	.ENDR
.ENDM	RESRG
.MACRO	MAP	PAR1VL
	MOV	PAR1VL,@#KISAR1
.ENDM	MAP
.MACRO	PAGDEF	NUM,ADDR
	PG'NUM'	= ADDR
	PHYL'NUM' = <ADDR&1600>*100
	PHYH'NUM' = <ADDR&176000/2000>&77
.ENDM	PAGDEF
	.SBTTL	Description of DECNA/Host Interaction
	.SBTTL	CNA Device Register and Data Structures
	CR.EM = BIT00
	CR.ME = BIT01
	CR.IE = BIT02
	CR.CA = BIT03
	CR.LP = BIT04
	CR.OA = BIT05
	CR.ED = BIT07
		TOPAR1 = 137600
		SYSBUS = 017766
		ISCP   = 017774
		ST.CX = BIT15
		ST.PR = BIT14
		ST.CN = BIT13
		ST.RN = BIT12
		ST.CU = BIT11-BIT08
			CU.IDL = 0
			CU.SPN = 1*BIT08
			CU.RDY = 2*BIT08
		ST.RU = BIT07-BIT04
			RU.IDL = 0
			RU.SPN = 1*BIT04
			RU.NRS = 2*BIT04
			RU.RDY = 4*BIT04
		CM.XC = BIT15
		CM.RP = BIT14
		CM.NC = BIT13
		CM.NR = BIT12
		CLFLGS=CM.XC+CM.RP+CM.NC+CM.NR
		CM.CU = ST.CU
			CU.NOP = 0
			CU.SRT = 1*BIT08
			CU.RES = 2*BIT08
			CU.STP = 3*BIT08
			CU.ABT = 4*BIT08
		CM.RE = BIT07
		CM.RU = ST.RU
			RU.NOP = 0
			RU.SRT = 1*BIT04
			RU.RES = 2*BIT04
			RU.STP = 3*BIT04
			RU.ABT = 4*BIT04
CBLSTS = 0
		CBL.C = BIT15
		CBL.B = BIT14
		CBL.OK = BIT13
		CBL.AB = BIT12
CBLCMD = 2
		CBL.EL = BIT15
		CBL.S  = BIT14
		CBL.I  = BIT13
		CBL.CM = BIT03-1
			CM.NOP = 0
			CM.SPA = 1
			CM.CFG = 2
			CM.SMA = 3
			CM.XMT = 4
			CM.TDR = 5
			CM.DMP = 6
			CM.DIA = 7
CBLLNK = 4
RLSADD = 14
	CFGWA = 6
	CFGWB = 10
	CFGWC = 12
	CFGWD = 14
	CFGWE = 16
	CFGWF = 20
	CFGDFA = CFA.LM+4
	CFGDFB = CFB.PL+CFB.AL+CFB.AN
	CFGDFC = CFC.GP
	CFGDFD = CFD.RT+1000
	CFGDFE = CFE.TN
	CFA.LM  = 10*BIT08
	CFA.BY  = BIT04-1
	CFB.XL  = BIT15
	CFB.IL  = BIT14
	CFB.PL  = 2*BIT12
	CFB.AL  = BIT11
	CFB.AN  = 6*BIT08
	CFB.SB  = BIT07
	CFB.SA  = BIT06
	CFC.GP  = ^d96*BIT08
	CFC.EB  = BIT07
	CFC.EP  = BIT07-BIT04
	CFC.LP  = BIT03-1
	CFD.RT  = ^D15*BIT12
	CFD.TM  = BIT11-1
	CFE.DS  = BIT15
	CFE.CD  = BIT15-BIT12
	CFE.RS  = BIT11
	CFE.CR  = BIT11-BIT08
	CFE.PD  = BIT07
	CFE.BS  = BIT06
	CFE.CC  = BIT05
	CFE.NI  = BIT04
	CFE.TN  = BIT03
	CFE.MD  = BIT02
	CFE.BD  = BIT01
	CFE.P   = BIT00
	CFF.MN  = BIT08-1
	MLTCNT = 6
	MLTADR = 10
		XMTSTS = CBLSTS
		XMTCMD = CBLCMD
		XMTLNK = CBLLNK
		XMTBDP = 06
		XMTCCB = 10
		XM.CSL = BIT10
		XM.CTS = BIT09
		XM.OVR = BIT08
		XM.DFR = BIT07
		XM.HBT = BIT06
		XM.ABT = BIT05
		XM.AMT = BIT04-1
	TBDBGN = 0
	TBDCNT = TBDBGN
		TBD.EP = BIT15
		TBD.LN = BIT14-1
	TBDLNK = TBDBGN+2
	TBDBUF = TBDBGN+4
	TBDEXT = TBDBGN+6
	TBDCCB = TBDBGN+10
PKTSTS = 0
	PK.C = BIT15
	PK.B = BIT14
	PK.OK = BIT13
	PK.CRC = BIT11
	PK.FRM = BIT10
	PK.RER = BIT09
	PK.OVR = BIT08
	PK.SHT = BIT07
PKTCMD = 2
	PKT.EL = BIT15
	PKT.S  = BIT14
	PKT.I  = BIT13
PKTLNK = 4
PKTBUF = 6
PKTCCB = 10
RBDBGN = 0
RBDCNT = RBDBGN
	RBD.EP = BIT15
	RBD.F  = BIT14
	RBD.LN = BIT14-1
RBDLNK = RBDBGN+2
RBDBUF = RBDBGN+4
RBDEXT = RBDBGN+6
RBDLEN = RBDBGN+10
	RBD.EL = BIT15
	RBD.MX = BIT14-1
RBDCCB = RBDBGN+12
	SW.BRD	= BIT00
	SW.LOO	= BIT01
	SW.XLO	= BIT02
	SW.ON	= BIT03
	SW.HBT	= BIT04
	SW.PRO	= BIT05
	PRO.MD	= BIT15
	.SBTTL	Extended memory definitions.
	BEGREL	=	20000
	ENDREL	=	37776
	PGSIZ	=	20000
	PAGDEF	1,134000
	PAGDEF	2,134200
	RCV1L	=	020000 + 0
	RCV1H	=	056
	RCV2L	=	020000 + MAXMSG
	RCV2H	=	056
	RCV3L	=	020000 + <MAXMSG*2>
	RCV3H	=	056
	RCV4L	=	020000 + <MAXMSG*3>
	RCV4H	=	056
	RC9L	=	020000 + <MAXMSG*4>
	RC9H	=	056
	RCVPR1	=	134200
	RCVBF1	=	20000
	RCVPR2	=	134227
	RCVBF2	=	20052
	RCVPR3	=	134257
	RCVBF3	=	20024
	RCVPR4	=	134306
	RCVBF4	=	20076
	RCPR9	=	134336
	RCBF9	=	20050
	PAGDEF	3,134400
	RCV5L	=	040000 + 0
	RCV5H	=	056
	RCV6L	=	040000 + MAXMSG
	RCV6H	=	056
	RCV7L	=	040000 + <MAXMSG*2>
	RCV7H	=	056
	RCV8L	=	040000 + <MAXMSG*3>
	RCV8H	=	056
	RC10L	=	040000 + <MAXMSG*4>
	RC10H	=	056
	RCVPR5	=	134400
	RCVBF5	=	20000
	RCVPR6	=	134427
	RCVBF6	=	20052
	RCVPR7	=	134457
	RCVBF7	=	20024
	RCVPR8	=	134506
	RCVBF8	=	20076
	RCPR10	=	134536
	RCBF10	=	20050
	PAGDEF	4,134600
	XMT1L	=	060000 + 0
	XMT1H	=	056
	XMTPAR	=	134600
	XMTBUF	=	20000
	PAGDEF  5,135000
	PAGDEF	16,137600
	ISCBSY	=	0
	ISCOFF	=	ISCBSY + 2
	ISCBSE	=	ISCBSY + 4
	SCBSTS	=	ISCBSY + 10
	SCBCMD	=	SCBSTS + 2
	SCBCBL 	=	SCBSTS + 4
	SCBPRA	=	SCBSTS + 6
	SCBCRC	=	SCBSTS + 10
	SCBALN	=	SCBSTS + 12
	SCBRSC	=	SCBSTS + 14
	SCBOVR	=	SCBSTS + 16
	FRELST	=	SCBOVR + 2
	CMDBLK	=	FRELST + 1024.
	MULCMD	=	CMDBLK + 256.
	MULLEN	=	MULCMD + 6
	MULLST	=	MULLEN + 2
	.SBTTL	General Definitions (Size and identities)
BLKNUM	= 30.
BLKSIZ	= 10.
DISINT	= 70
ENBINT	= 50
CLRINT	= 110
CNAID	= 000042
INTCTL	= 173206
DELAY	= 250.
MINMSG	= 64.-4
MAXMSG	= 1518.-4
PROOVR	= 14.
MULMAX	= 16.
NIL	= -1
PKNUM	= 10.
RBDNUM 	= 10.
AMOUNT = 512.*2
LSTSIZ = AMOUNT/BLKSIZ
CMDSIZ = 128.
	.SBTTL	Installation code
	.DRINS	NI
	.ENABL	LSB
	DPMSIZ	= 	4000
	DPMBAS	=	134000
	BR	10$
	BR	40$
10$:
	MOV	@#SYSPTR,R1
	MOV	GETVEC(R1),R0
	TST	(R0)+
	MOV	#CNAID,-(SP)
	CALL	@R0
	MOV	(SP)+,R0
	BCS	40$
	MOV	P1EXT(R1),R0
20$:	.ADDR	#NCNAME,R5
	CALL	FINDGR(R0)
	BCS	30$
	MOV	R1,-(SP)
	BIT	#GR.NRF,GR.STA(R1)
	BNE	25$
	MOV	GR.SIZ(R1),R2
	MOV	GR.ADR(R1),R1
	CALL	XDEALC(R0)
25$:	CLR	@(SP)+
	BR	20$
30$:	TST	R1
	BEQ	40$
	MOV	#DPMSIZ,(R1)+
	MOV	#DPMBAS,(R1)+
	MOV	#<GR.PVT!GR.NRF>,(R1)+
	.ADDR	#NCNAME,R5
	MOV	(R5)+,(R1)+
	MOV	@R5,@R1
	TST	(PC)+
40$:	SEC
	RTS	PC
	.DSABL	LSB
NCNAME:	.WORD	NI$HND
	.RAD50	/$  /
	.Assume	. LE 400,<;INSTALL area overflow>
	.SBTTL	SET option parameter table
	.DRSET	SHOW,CNAID,O.SHOW
	.SBTTL	SET option routines
	.MCALL	.TTYOU,.PRINT,.ADDR	.ASSUME
	CTLMSK	=	000040
	.ENABL	LSB
O.SHOW:
	CALL	GETINF
	BCS	30$
	.ADDR	#MSG,R0
	.PRINT
	CLRB	@RMA
	MOVB	#CTLMSK,@CTL
	MOV	RMD,R1
	MOV	#6.,R2
	BR	20$
10$:	.TTYOU	#'-
20$:	MOV	(R1),-(SP)
	MOVB	(SP),R0
	.REPT 	4.
	ASR	R0
	.ENDR
	BIC	#^C<017>,R0
	.ADDR	#HEX,R0,ADD
	MOVB	(R0),R0
	.TTYOU
	MOVB	(SP)+,R0
	BIC	#^C<017>,R0
	.ADDR	#HEX,R0,ADD
	MOVB	@R0,R0
	.TTYOU
	DEC	R2
	BNE	10$
	.ADDR	#CRLF,R0
	.PRINT
30$:	RTS	PC
	.DSABL	LSB
	GETVEC	= 	436
GETINF:
	MOV	R5,-(SP)
	MOV	@#SYSPTR,R5
	MOV	R3,-(SP)
	MOV	GETVEC(R5),R5
	TST	(R5)+
	CALL	@R5
	BCS	40$
	MOV	(SP),RMD
	ADD	#2,(SP)
	MOV	(SP),RMA
	ADD	#2,(SP)
	MOV	(SP),CTL
	ADD	#2,(SP)
40$:	MOV	(SP)+,MEM
	MOV	(SP)+,R5
	RTS	PC
	.NLIST	BEX
RMD:	.WORD	0
RMA:	.WORD	0
CTL:	.WORD	0
MEM:	.WORD	0
MSG:	.ASCII	/Ethernet address = /<200>
HEX:	.ASCII	/0123456789ABCDEF/
CRLF:	.BYTE	0
	.EVEN
	.LIST	BEX
.Assume	. LE 1000,<;SET area overflow>
	.SBTTL	I/O Initiation Section
	.SBTTL	Some startup routines
	.PSECT	NIDVR
	.MCALL	.TTYOU,.PRINT
	.SBTTL	INIT - Initialize during first entry to handler.
	.ENABL	LSB
	DPMMSK	=	027
INIT:
	MOV	@#SYSPTR,R5
	MOV	#CNAID,-(SP)
	MOV	GETVEC(R5),R5
	CALL	@R5
	MOV	(SP)+,CNAVEC
	BCS	2$
	MOV	#CNAID,-(SP)
	TST	(R5)+
	CALL	@R5
	MOV	(SP)+,R0
	BCS	2$
	MOV	R0,CN$RMD
	ADD	R0,CN$RMA
	ADD	R0,CN$CTL
	ADD	R0,CN$MEM
	MOV	#CNAID,-(SP)
	TST	(R5)+
	CALL	@R5
	MOV	(SP)+,CNASLT
	BCS	2$
1$:	CLR	TMPCTL
	CLR	@CN$CTL
	CLR	@CN$RMA
	BISB	#CTLMSK,TMPCTL
	MOVB	TMPCTL,@CN$CTL
	MOV	CN$RMD,R1
	.ADDR	#NIPHAD,R2
	.REPT	6
	MOVB	(R1),(R2)+
	.ENDR
	MOVB	#DPMMSK,@CN$MEM
	BISB	#<CR.EM+CR.ME>,TMPCTL
	MOVB	TMPCTL,@CN$CTL
	TST	(PC)+
2$:	SEC
	RTS	PC
	.DSABL	LSB
	.SBTTL	ENABLE - Initialize during first open portal.
	.ENABL	LSB
ENABLE:
	JSR	PC,SAVPAR
	JSR	PC,CNAINI
	JSR	PC,CNCONF
	BCS	32$
	MOV	#CMDBLK,R2
	ADD	R1,R2
	CLR	(R2)+
	MOV	#CBL.EL+CM.SPA,(R2)+
	CLR	(R2)+
	.ADDR	#NIPHAD,R0
	MOV	(R0)+,(R2)+
	MOV	(R0)+,(R2)+
	MOV	(R0)+,(R2)+
	CALL	SETIT
32$:	BCS	E.BAD
35$:	JSR	PC,LSTINI
	GETBLK	E.BAD
	MOV	R0,R5
	MOV	R0,BEGFD
	SUB	#BEGREL,R0
	MOV	#PKNUM,R3
	MOV	R0,R4
	MOV	R0,SCBPRA(R1)
40$:	CLR	(R5)+
	CLR	(R5)+
	DEC	R3
	BLE	50$
	GETBLK	E.BAD
	SUB	#BEGREL,R0
	MOV	R0,(R5)+
	MOV	#NIL,(R5)+
	CLR	(R5)
	ADD	#BEGREL,R0
	MOV	R0,R5
	BR	40$
50$:	MOV	R4,(R5)+
	MOV	#NIL,(R5)+
	MOV	#PKT.EL,PKTCMD(R0)
	MOV	R0,ENDFD
	MOV	#RBDNUM,R3
	GETBLK	E.BAD
	MOV	R0,R4
	BR	70$
60$:	GETBLK	E.BAD
70$:	CLR	RBDCNT(R0)
	CLR	RBDLNK(R0)
	JSR	PC,GETPHY
	MOV	#MAXMSG,RBDLEN(R0)
	MOV	SCBPRA(R1),R5
	ADD	#BEGREL,R5
	MOV	PKTBUF(R5),RBDLNK(R0)
	MOV	R0,PKTBUF(R5)
	SUB	#BEGREL,PKTBUF(R5)
	SOB	R3,60$
	MOV	R0,BEGRBD
	MOV	R4,ENDRBD
	BIS	#RBD.EL,RBDLEN(R4)
	MOV	BEGRBD,RBDLNK(R4)
	SUB	#BEGREL,RBDLNK(R4)
	SRTCNA	#<CLFLGS+RU.SRT>,E.BAD
	MOV	#-1,XBUSY
	MOV	#-1,RBUSY
	MOV	CNASLT,R0
	BIS	#CLRINT,R0
	MOV	R0,@#INTCTL
	MOV	CNASLT,R0
	BIS	#ENBINT,R0
	MOV	R0,@#INTCTL
	CLR	SCBCBL(R1)
	TST	(PC)+
E.BAD:	SEC
	RTS	PC
	.DSABL	LSB
	.SBTTL	LSTINI - Initialize list
	.ENABL	LSB
LSTINI:
	MOV	R1,-(SP)
	MOV	#FRELST,R2
	ADD	R1,R2
	MOV	R2,LSTHD
	MOV	R2,R3
	MOV	#LSTSIZ,R1
10$:	ADD	#BLKSIZ,R2
	MOV	R2,(R3)
	MOV	R2,R3
	SOB	R1,10$
	CLR	R3
	MOV	(SP)+,R1
	RTS	PC
	.DSABL  LSB
	.SBTTL	GETBLK - Get block from free list
	.ENABL	LSB
GTBLK:
	SAVRG	<R2>
	MOV	LSTHD,R2
	TST	@R2
	BEQ	10$
	MOV	R2,R0
	MOV	(R2),LSTHD
	TST	(PC)+
10$:	SEC
	RESRG	<R2>
	RTS	PC
	.DSABL	LSB
	.SBTTL	PUTBLK - Put block back on frelist
PUTBLK:
	MOV	LSTHD,(R0)
	MOV	R0,LSTHD
	RTS	PC
	.SBTTL	GETPHY - Get physical address of buffer for RBD
	.ENABL	LSB
GETPHY:	MOV	R3,-(SP)
	NEG	R3
	ADD	#10.,R3
	ASL	R3
	ASL	R3
	.ADDR	#BUFADR,R3,ADD
	MOV	(R3)+,RBDBUF(R0)
	MOV	(R3),RBDEXT(R0)
	MOV	(SP)+,R3
	RETURN
	.DSABL	LSB
	.SBTTL	DISABL - Cleanup after last close portal.
DISABL:
	MOV	CNASLT,R1
	BIS	#DISINT,R1
	MOV	R1,@#INTCTL
	MOV	CNASLT,R1
	BIS	#CLRINT,R1
	MOV	R1,@#INTCTL
	BICB	#CR.ED+CR.IE,TMPCTL
	BISB	#CR.EM+CR.ME+CR.LP,TMPCTL
	MOVB	TMPCTL,@CN$CTL
	RTS	PC
	.SBTTL	SETUP - Set hearing characteristics of controller
	.ENABL	LSB
SETUP:
	JSR	PC,SAVPAR
	MAP	#PG1
	MOV	#BEGREL,R1
	MOV	#CMDBLK,R2
	ADD	R1,R2
	CLR	(R2)+
	MOV	#CBL.EL+CM.CFG,(R2)+
	CLR	(R2)+
	MOV	#CFGDFA+6,(R2)+
	MOV	#CFGDFB,(R2)+
	MOV	#CFGDFC,(R2)+
	MOV	#CFGDFD,(R2)+
	MOV	#CFGDFE,(R2)
	BIC	#CFE.TN,(R2)
	TST	NIPMFG
	BNE	10$
	BIC	#CFE.P,(R2)
	BR	20$
10$:	BIS	#CFE.P,(R2)
20$:	CALL	SETIT
	.ADDR	#NIUAT,R0
	MOV	#MULLST,R2
	MOV	#MULLEN,R3
	ADD	R1,R2
	ADD	R1,R3
	CLR	(R3)
	MOV	#8.,R4
30$:	MOV	(R0)+,-(SP)
	BIS	(R0)+,(SP)
	BIS	(R0)+,(SP)+
	BEQ	40$
	SUB	#UA.ESZ,R0
	.REPT	3
	MOV	(R0)+,(R2)+
	.ENDR
	ADD	#6.,(R3)
40$:	DEC	R4
	BGT	30$
	CALL	SETMLT
	RTS	PC
	.DSABL	LSB
	.SBTTL	SETMLT - Set/Reset multicast address
	.ENABL	LSB
SETMLT:
	MOV	#MULCMD,R2
	ADD	R1,R2
	CLR	(R2)+
	MOV	#<CBL.EL+CM.SMA>,(R2)+
	CLR	(R2)+
	BISB	#CR.EM+CR.ED+CR.ME+CR.IE,TMPCTL
	BICB	#CR.LP,TMPCTL
	MOVB	TMPCTL,@CN$CTL
5$:	TST	SCBCMD(R1)
	BNE	5$
7$:	MOV	#MULCMD,SCBCBL(R1)
	MOV	#CLFLGS+CU.SRT,SCBCMD(R1)
	BISB	#CR.EM+CR.ED+CR.CA+CR.ME+CR.IE,TMPCTL
	MOVB	TMPCTL,@CN$CTL
	BICB	#CR.CA,TMPCTL
	MOVB	TMPCTL,@CN$CTL
	MOV	#DELAY*4,R0
10$:	BIT	#<ST.CX!ST.CN>,SCBSTS(R1)
	BNE	20$
	SOB	R0,10$
15$:
20$:	BISB	#CR.LP,TMPCTL
	MOVB	TMPCTL,@CN$CTL
	RTS	PC
	.DSABL	LSB
	.SBTTL	CNAINI - Initialize the DECNA controller
	.ENABL	LSB
CNAINI:
	MAP	#PG16
	MOV	#BEGREL,R1
	CLR	SYSBUS(R1)
	MOV	#PHYL1,ISCP(R1)
	MOVB	#PHYH1,ISCP+2(R1)
	MAP	#PG1
	MOV	#1,ISCBSY(R1)
	MOV	#PHYL1,ISCBSE(R1)
	MOV	#PHYH1,ISCBSE+2(R1)
	MOV	#SCBSTS,ISCOFF(R1)
	MOV	R1,R2
	ADD	#SCBSTS,R2
	MOV	#8.,R3
10$:	CLR	(R2)+
	SOB	R3,10$
	BISB	#CR.LP+CR.EM+CR.ED+CR.CA+CR.ME,TMPCTL
	MOVB	TMPCTL,@CN$CTL
	BICB	#CR.CA,TMPCTL
	MOVB	TMPCTL,@CN$CTL
	RTS	PC
	.DSABL	LSB
	.SBTTL	CNCONF - Configure the DECNA
	.ENABL	LSB
CNCONF:
	MOV	#CMDBLK,R2
	ADD	R1,R2
	CLR	(R2)+
	MOV	#CBL.EL+CM.CFG,(R2)+
	CLR	(R2)+
	MOV	#CFGDFA+6,(R2)+
	.if	ne	loop
	MOV	#CFGDFB+CFB.XL,(R2)+
	.iff
	MOV	#CFGDFB,(R2)+
	.endc
	MOV	#CFGDFC,(R2)+
	MOV	#CFGDFD,(R2)+
	MOV	#CFGDFE,(R2)
	BIC	#CFE.TN,(R2)
SETIT:
	BISB	#CR.EM+CR.ED+CR.ME+CR.IE,TMPCTL
	BICB	#CR.LP,TMPCTL
	MOVB	TMPCTL,@CN$CTL
5$:	TST	SCBCMD(R1)
	BNE	5$
7$:	MOV	#CMDBLK,SCBCBL(R1)
	MOV	#CLFLGS+CU.SRT,SCBCMD(R1)
	BISB	#CR.EM+CR.ED+CR.CA+CR.ME+CR.IE,TMPCTL
	MOVB	TMPCTL,@CN$CTL
	BICB	#CR.CA,TMPCTL
	MOVB	TMPCTL,@CN$CTL
	MOV	#DELAY*4,R0
10$:	BIT	#<ST.CX!ST.CN>,SCBSTS(R1)
	BNE	20$
	SOB	R0,10$
20$:	BISB	#CR.LP,TMPCTL
	MOVB	TMPCTL,@CN$CTL
	RTS	PC
	.DSABL	LSB
	.SBTTL	Xmit/Recv - Transmit and Receive initiation.
	.ENABL	LSB
XMIT:
	TST	XBUSY
	BPL	10$
	MOV	NIOCQE,R4
	BEQ	10$
	INC	XBUSY
	JSR	PC,SAVPAR
	MAP	#PG1
	MOV	#BEGREL,R1
	BEQ	10$
	JSR	PC,SRCCHK
	JSR	PC,BLKMV
	GETBLK	20$
	MOV	R0,R3
	MOV	R0,R2
	CLR	(R3)+
	MOV	#CBL.EL+CBL.I+CM.XMT,(R3)+
	CLR	(R3)+
	GETBLK	20$
	MOV	R0,(R3)
	SUB	#BEGREL,(R3)
	MOV	R0,R3
	MOV	Q$WCNT(R4),R0
	DEC	R0
	DEC	R0
	ASL	R0
	MOV	R0,(R3)
	BIS	#TBD.EP,(R3)+
	CLR	(R3)+
	MOV	#XMT1L,(R3)+
	MOV	#XMT1H,(R3)+
	MOV	R2,SCBCBL(R1)
	SUB	#BEGREL,SCBCBL(R1)
	SRTCNA	#CU.SRT,20$
10$:	TST	(PC)+
20$:	SEC
	RTS	PC
	.DSABL	LSB
	.ENABL	LSB
RECV:
	JSR	PC,SAVPAR
	MAP	#PG1
	MOV	#BEGREL,R1
	CALL	RCVINT
	RTS	PC
	.DSABL	LSB
	.SBTTL	BLKMV	- Move data between extended and user
	.ENABL	LSB
BLKMV:
	SAVRG	<R0,R1,R2,R3,R4,R5>
	MOV	R4,R3
	MOV	@#SYSPTR,R4
	MOV	P1EXT(R4),(PC)+
$MVBLK:	.WORD	0
	SUB	#2,$MVBLK
	MOV	Q$WCNT(R3),R5
	DEC	R5
	DEC	R5
	MOV	Q$PAR(R3),R1
	MOV	Q$BUFF(R3),R2
	add	#4,r2
	MOV	#XMTPAR,R3
	MOV	#XMTBUF,R4
	CALL	@$MVBLK
	RESRG	<R5,R4,R3,R2,R1,R0>
	RTS	PC
	.DSABL	LSB
	.SBTTL	SRCCHK - Source address check
	.ENABL	LSB
SRCCHK:
	JSR	PC,SAVPAR
	SAVRG	<R1,R2,R4>
	MAP	Q$PAR(R4)
	MOV	Q$BUFF(R4),R2
	add	#4,r2
	ADD	#EF.SRC,R2
	MOV	@R2,-(SP)
	BIS	2(R2),(SP)
	BIS	4(R2),(SP)+
	BNE	10$
	.ADDR	#NIPHAD,R1
	MOV	(R1)+,(R2)+
	MOV	(R1)+,(R2)+
	MOV	(R1)+,(R2)+
10$:	RESRG	<R4,R2,R1>
	RTS	PC
	.DSABL	LSB
	.SBTTL	Interrupt entry
	.DRAST	NI,5,NCABOR
	.ENABL	LSB
	JSR	PC,SAVPAR
	SAVRG	<R0,R1,R2,R3>
	MAP	#PG1
	MOV	#BEGREL,R1
	MOV	SCBSTS(R1),-(SP)
	BIC	#^C<CLFLGS>,(SP)
	SRTCNA	(SP),10$
10$:	ASL	(SP)
	BCC	20$
	JSR	PC,CNACXS
20$:	ASL	(SP)
	BCC	30$
	JSR	PC,CNAPRS
30$:	ASL	(SP)
	BCC	40$
	JSR	PC,CNACNS
40$:	ASL	(SP)+
	BCC	50$
	JSR	PC,CNARNS
50$:
	RESRG	<R3,R2,R1,R0>
	RTS	PC
	.DSABL	LSB
	.SBTTL	Abort entry point
NCABOR:	CALLR	NIABRT
	.SBTTL	CNACXS	- Command done interrupt service routine
	.ENABL	LSB
CNACXS:
	TST	NOQCHG
	BNE	40$
	MOV	SCBCBL(R1),R2
	ADD	#BEGREL,R2
	TST	(R2)
	BNE	20$
10$:	RTS	PC
20$:	MOV	R2,R0
	TST	(R2)+
	BPL	10$
	MOV	(R2)+,R3
	BIC	#^C<CBL.CM>,R3
	TST	(R2)+
	CMP	R3,#CM.XMT
	BNE	10$
CNAXMT:	MOV	#-1,XBUSY
	MOV	NIOCQE,R4
	MOV	(R2),R2
	ADD	#BEGREL,R2
	MOV	(R0),-(SP)
	CALL	PUTBLK
	MOV	R2,R0
	CALL	PUTBLK
	MOV	(SP)+,R2
	BIT	#CBL.OK,R2
	BNE	30$
	BIS	#HDERR$,@-2(R4)
	MOV	#RC.XMT+SC.WEC,-(SP)
	JSR	PC,@$PTWRD
30$:
	MOV	Q$LINK(R4),NIOCQE
	CALL	NIFIN
	JMP	XMIT
40$:	RTS	PC
	.DSABL	LSB
	.SBTTL	CNAPRS - Packet received interrupt service routine
	.ENABL	LSB
CNAPRS:
	TST	NIQCHG
	BNE	F.END
RCVINT:
	INC	RBUSY
	BNE	F.END
NEXT:	MOV	SCBPRA(R1),R3
	BEQ	F1.END
	ADD	#BEGREL,R3
	MOV	R3,BEGFD
	TST	(R3)+
	BPL	F1.END
	TST	(R3)+
	MOV	(R3)+,SCBPRA(R1)
	MOV	(R3)+,R2
	ADD	#BEGREL,R2
	MOV	BEGFD,R3
	MOV	R2,R5
	CLR	R0
10$:	MOV	(R2),R0
	BMI	20$
	br	.-2
20$:	MOV	NIICQE,R4
	BEQ	C.END
	TST	NIPMFG
	BNE	22$
	JSR	PC,GETPRO
	JSR	PC,GETQEL
	BCS	C.END
22$:	BIC	#^C<RBD.LN>,R0
30$:
	BIT	#PK.OK,(R3)
	BEQ	C.END
	JSR	PC,MOVBLK
	BCC	40$
	BIS	#HDERR$,@-2(R4)
	MOV	#RC.TRU,-(SP)
	JSR	PC,@$PTWRD
40$:	JSR	PC,NIIDEQ
C.END:	JSR	PC,MANAGE
	JMP	NEXT
F1.END:	MOV	#-1,RBUSY
F.END:	RTS	PC
	.DSABL	LSB
	.SBTTL	CNACNS - Control Unit not ready service routine
CNACNS:
	RTS	PC
	.SBTTL	CNARNS - Receive Unit not ready service routine
	.ENABL	LSB
CNARNS:
	SRTCNA	#<CLFLGS+RU.SRT>,10$
	TST	(PC)+
10$:	SEC
	RTS	PC
	.DSABL	LSB
	.SBTTL	MANAGE - Update circular rings
	.ENABL	LSB
MANAGE:
	SAVRG	<R3>
	MOV	BEGFD,R0
	BIS	#PKT.EL,PKTCMD(R0)
	MOV	R0,R3
	MOV 	ENDFD,R0
	BIC	#PKT.EL,PKTCMD(R0)
	MOV	R3,ENDFD
	MOV	SCBPRA(R1),BEGFD
	ADD	#BEGREL,BEGFD
	MOV	BEGRBD,R0
	BIS	#RBD.EL,RBDLEN(R0)
	MOV	R0,R3
	MOV	ENDRBD,R0
	BIC	#RBD.EL,RBDLEN(R0)
	MOV	R3,ENDRBD
	MOV	RBDLNK(R2),BEGRBD
	ADD	#BEGREL,BEGRBD
	RESRG	<R3>
	RTS	PC
	.DSABL	LSB
	.SBTTL	GETPRO - Get protocol from user buffer
GETPRO:
	SAVRG	<R0,R1,R2,R3,R4>
	.ADDR	#FAKEQ,R4
	MOV	R2,R0
	JSR	PC,INVALS
	MOV	R1,Q$PAR(R4)
	MOV	R2,Q$BUFF(R4)
	.ADDR	#NCDST,R3
	MOV	#UA.ESZ,R1
10$:	JSR	PC,@$GTBYT
	MOVB	(SP)+,(R3)+
	SOB	R1,10$
	ADD	#EF.TYP,R2
	MOV	R2,Q$BUFF(R4)
	MOV	R3,R0
	JSR	PC,@$GTBYT
	MOVB	(SP)+,(R3)+
	JSR	PC,@$GTBYT
	MOVB	(SP)+,(R3)+
	MOV	(R0),R5
	RESRG	<R4,R3,R2,R1,R0>
	RTS	PC
	.DSABL	LSB
	.SBTTL	INVALS - Input values for Par1 and buf
	.ENABL	LSB
INVALS:
	SAVRG	<R3>
	MOV	RBDBUF(R0),R3
	CMP	#RC9L,R3
	BLO	CHKG3
	BNE	9$
	MOV	#RCPR9,R1
	MOV	#RCBF9,R2
	BR	70$
9$:	CMP	#RCV4L,R3
	BNE	10$
	MOV	#RCVPR4,R1
	MOV	#RCVBF4,R2
	BR	70$
10$:
	CMP	#RCV3L,R3
	BNE	20$
	MOV	#RCVPR3,R1
	MOV	#RCVBF3,R2
	BR	70$
20$:
	CMP	#RCV2L,R3
	BNE	30$
	MOV	#RCVPR2,R1
	MOV	#RCVBF2,R2
	BR	70$
30$:
	CMP	#RCV1L,R3
	BNE	CHKG3
	MOV	#RCVPR1,R1
	MOV	#RCVBF1,R2
	BR	70$
CHKG3:
	CMP	#RC10L,R3
	BNE	39$
	MOV	#RCPR10,R1
	MOV	#RCBF10,R2
	BR	70$
39$:	CMP	#RCV8L,R3
	BNE	40$
	MOV	#RCVPR8,R1
	MOV	#RCVBF8,R2
	BR	70$
40$:
	CMP	#RCV7L,R3
	BNE	50$
	MOV	#RCVPR7,R1
	MOV	#RCVBF7,R2
	BR	70$
50$:
	CMP	#RCV6L,R3
	BNE	60$
	MOV	#RCVPR6,R1
	MOV	#RCVBF6,R2
	BR	70$
60$:
	CMP	#RCV5L,R3
	BNE	70$
	MOV	#RCVPR5,R1
	MOV	#RCVBF5,R2
70$:
	RESRG	<R3>
	RTS	PC
	.DSABL	LSB
	.SBTTL	GETQEL - Get q-element matching protocol if any
	.ENABL	LSB
GETQEL:
	SAVRG	<R0,R1,R2,R3,R4>
	CLR	R3
	.ADDR	#NIUPT,R1
10$:	CMP	(R1)+,R5
	BEQ	20$
	INC	R3
	CMP	#8.,R3
	BGT	10$
	BR	50$
20$:	CALL	MATADR
	BCS	50$
	.ADDR	#NIUOT,R1
	ASL	R3
	ADD	R3,R1
	MOVB	@R1,R0
	MOV	NIICQE,R1
30$:	CMPB	Q$UNIT(R1),R0
	BEQ	40$
	MOV	Q$LINK(R1),R1
	BEQ	50$
	BR	30$
40$:	MOV	R1,R4
	TST	(PC)+
50$:	SEC
	RESRG	<R4,R3,R2,R1,R0>
	RTS	PC
	.DSABL	LSB
	.SBTTL	MATADR  - Match Address
	.ENABL	LSB
MATADR:
	SAVRG	<R3>
	.ADDR	#NIPHAD,R0
	.ADDR	#NCDST,R1
	MOV	R1,R2
	CMP	(R0)+,(R1)+
	BNE	10$
	CMP	(R0)+,(R1)+
	BNE	10$
	CMP	(R0)+,(R1)+
	BEQ	30$
10$:	MOV	R2,R1
	.ADDR	#NIUAT,R0
	MUL	#UA.ESZ,R3
	ADD	R3,R0
	CMP	(R0)+,(R1)+
	BNE	20$
	CMP	(R0)+,(R1)+
	BNE	20$
	CMP	(R0)+,(R1)+
	BNE	20$
30$:	TST	(PC)+
20$:	SEC
	RESRG	<R3>
	RTS	PC
	.DSABL	LSB
	.SBTTL	MOVBLK	- Move data between user and extended memory
	.ENABL	LSB
MOVBLK:
	SAVRG	<R0,R1,R2,R3,R4>
	MOV	@#SYSPTR,R3
	MOV	P1EXT(R3),(PC)+
$BLKMV:	.WORD	0
	SUB	#2,$BLKMV
	MOV	R0,R5
	MOV	Q$WCNT(R4),R0
	DEC	R0
	DEC	R0
	ASL	R0
	CMP	R5,R0
	BLE	10$
	MOV	#-1,RCVFLG
	MOV	R0,R5
10$:
	MOV	Q$BUFF(R4),R0
	TST	(R0)+
	MOV	R0,Q$BUFF(R4)
	MOV	R5,-(SP)
	JSR	PC,@$PTWRD
	MOV	R2,R0
	MOV	Q$PAR(R4),R3
	MOV	Q$BUFF(R4),R4
	ASR	R5
	JSR	PC,INVALS
	CALL	@$BLKMV
	RESRG	<R4,R3,R2,R1,R0>
	TST	RCVFLG
	BPL	20$
	CLR	RCVFLG
	SEC
20$:	RTS	PC
	.DSABL	LSB
	.SBTTL	Support routines
	.SBTTL	CMD - Start the controller to process commands
	.ENABL	LSB
CMD:
	BISB	#CR.LP+CR.EM+CR.ED+CR.CA+CR.ME+CR.IE,TMPCTL
	MOVB	TMPCTL,@CN$CTL
	.if	ne	loop
	BICB	#CR.LP,TMPCTL
	.endc
	BICB	#CR.CA,TMPCTL
	MOVB	TMPCTL,@CN$CTL
10$:
	TST	SCBCMD(R1)
	BNE	10$
	TST	(PC)+
20$:	SEC
	RTS	PC
	.DSABL	LSB
	.SBTTL	Impure data area
	.PSECT	NIDAT
.DRVTB	NI,0,NIINT,SLOTID=CNAID
CN$RMD:		.WORD	0
CN$RMA:		.WORD	2
CN$CTL:		.WORD	4
CN$MEM:		.WORD	6
NINAME:	.WORD	NI$HND
	.WORD	0
NCDST:	.BLKW	3
NCPROT:	.BLKW	1
FREEND:	.BLKW	1
BEGRBD:	.BLKW	1
ENDRBD:	.BLKW	1
ENDFD:	.BLKW	1
BEGFD:	.BLKW	1
CNAVEC:	.BLKW	1
CNASLT:	.BLKW	1
LSTHD:	.BLKW	1
FAKEQ:	.WORD	0
	.WORD	0
F.BUF:	.WORD	0
	.WORD	0
	.WORD	0
F.PAR:	.WORD	0
RCVFLG:	.WORD	0
TMPCTL:	.WORD	0
XBUSY:	.WORD	-1
RBUSY:	.WORD	-1
BUFADR:	.WORD	RCV1L,	RCV1H
	.WORD	RCV2L,	RCV2H
	.WORD	RCV3L,	RCV3H
	.WORD	RCV4L,	RCV4H
	.WORD	RC9L,	RC9H
	.WORD	RCV5L,	RCV5H
	.WORD	RCV6L,	RCV6H
	.WORD	RCV7L,	RCV7H
	.WORD	RCV8L,	RCV8H
	.WORD	RC10L,	RC10H
CNALEN:
	.END
header	tcdef - tcp/ip definitions

  type	tcTetp
  is	Adst : [6] BYTE		; Destination Ethernet Address
	Asrc : [6] BYTE		;
	Vtyp : WORD		; Ethernet protocol type
;	Adat : [4] BYTE		; data
  end

  type	tcTipp
  is	Vver : BYTE		; Version and header length = (6*16)+4
	Vser : BYTE		; type of service
	Vlen : WORD		; total length of IP datagram (header + data)(
	Vidt : WORD		; Segment identifier
	Vmap : WORD		; Mapping flags and fragment offset

	Vtim : BYTE		; Time To Live timeout
	Vpro : BYTE		; IP protocol
	Vchk : WORD		; header checksum
	Vsrc : LONG		; source IP
	Vdst : LONG		; destination IP
	Vopt: LONG		; options
  end

  type	tcTudp
  is	Vsrc : WORD		; source port
	Vdst : WORD		; destination port
	Vlen : WORD		; length
	Vchk : WORD		; checksum
;	Adat : [4] BYTE		; data
  end

  type	tcTtcp
  is	Vsrc : WORD		; port
	Vdst : WORD		; port
	Vseq : LONG		; sequence 
	Vack : LONG		; acknowledgement
	Voff : BYTE		; offset
	Vflg : BYTE		; flags
	Vwin : WORD		; window
	Vchk : WORD		; checksum
	Vptr : WORD		; urgent pointer
	Vopt : LONG		; options
;	Adat : [4] BYTE		; data
  end

end header
