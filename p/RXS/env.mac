clk$c=1		; temp fix waiting for new boot detection code
rst$c=0		; rust
r1v$c=1 ;=1
sim$c=1	;=1	; simh test
;	mapped is wrong in 30kw LSI
;	need to size low memory first then exclude
;	I/O addresses below kernel memory limit.
;	search for ddV.sys
.title	env - check environment
.include "lib:rust.mac"
.psect	env d
$cndef		;config, confg2
$endef		;environment
$jbdef		;job
$mmdef		;mmu
$rmdef		;rmon
$psdef		;ps
$sgdef		;sysgen
$tidef		;time
$vedef		;vector
$vrdef		;V11

;	ENV - Environment check utility
;
;	%build
;	macro	rxs:env/object:rxb:env
;	%end
;
;	ENV.MAC		Environment utility
;	ERE.MAC		Environment report
;	EDA.MAC		Environment data
;	MLE.MAC		Environment macro library
;	SHAPE.MAC	Stand-alone interface
;	SHAPE.SAV	Stand-alone utility
;
;	This utility reports the environment of a PDP-11.
;
;	system		Operating system
;	configuration	config, confg2, sysgen
;	processor	Central processor
;	memory		Memory available
;	mmu		Memory management
;	devices		Devices available
;	vectors		Vector check known devices
;
;	This utility can be run stand-alone or linked to another program.
;	RUST/XM includes this module in the build routine.
;
;	The stand-alone program simply reports the entire environment.
;
;	Since this module must run stand-alone it cannot assume EIS.
;
;	We can run in either a kernel or virtual environment.
;	We handle the wierdness of 11/21's and VAX emulations.
;
;	In kernel mode we cannot rely on config data but that doesn't matter
;	because we can access the i/o page (usually).
;
;	In virtual mode we cannot get to the i/o page but we can rely on
;	on the config data shipped by this utility when it ran in kernel
;	mode.
;
;	We try whenever possible to use tests that will survive in virtual
;	mode. This means avoiding I/O page accesses which can be fudgey
;	anyway. In particular we don't try invalid instructions or
;	addresses until we have cleared the kludgey little 11/21 out of
;	the way.
;
;	Remember that some machines run with software emulators (EIS-eleven).
;	Therefore instruction set tests should only usually be made when
;	testing for the presence of that particular instruction set.
;	However instructions that cannot be emulated may be used freely.
;	Instructions that are unlikely to be emulated may also be used but
;	it is preferable that some collateral be at hand.
;
;	At the conclusion of all testing we should run set of consistency
;	tests to see whether we collected any conflicting information.
;	We could then probably detect the presence of emulators (at times).
.sbttl	some processor notes

;	177772 - Maintenance register
;
;	- bits 4:7 describe module 
;	-- 1 is KDJ11A
;
; 
; 1) If the system has a system size register, it's an 11/70.
; 2) If the system has the MED instruction, it's an 11/60.
; 3) If the system has an MFPT instruction,
; - type 1 is an 11/44
; - type 3 is either an 11/23 or 11/24; if it's not a PRO, and it has a
; display register, it's an 11/24, otherwise an 11/23
; - type 4 is a T11, only the SBC11/21 ever ran RT
; - type 5 is a J11, use the MAINT register to get the machine type.  To
; tell an 11/73B (KDJ11B with no PMI) from an 11/83 (KDJ11B with PMI),
; the OS observes the pattern in the hit/miss register after a cache
; flush
; 4) If the system doesn't have MFPT and doesn't have PSW at 177776,
; it's an 11/03 (LSI-11) (could use 11/03 maintenance instruction 210
; instead)
; 5) If the system doesn't have SXT, it's an 11/04, 11/05, 11/20
; - If IO address 177700 doesn't respond, it's an 11/20 [RSX uses the
; 11/20's unique implementation of SWAB instead]
; - If it doesn't have RTT, it's an 11/05
; - Otherwise, it's an 11/04
; 6) If the system has SPL, it's an 11/45
; 7) If the system has MFPS, it's an 11/34
; 8) Otherwise, it's an 11/40
;  Bob Supnik
;
;	11/03
;
;	no ps
;	eis option, fis option
;
;	11/21
;
;	mfpt=4
;	sxt, xor, sob, rtt, mfpt, mfps, mtps
;	no eis or mark
;	very wierd traps to avoid
;	instructions execute at odd addresses
;	micro-odt is soft
;	no ps
;
;	11/60
;
;	lack a clear picture of this processor
;
;	11/73
.sbttl	start

;	Call all the routines

en$sta::			;start
	.serr			;get all errors
	.scca	#b$uare,#b$uscc	;stop ctrl/c

	call	en$dvt		;catch virtual traps
	call	en$boo		;get boot information
	call	en$ops		;operating system
	call	en$ter		;terminal
;	call	en$clk		;get the clock
	call	en$cpu		;cpu
	call	en$opf		;operating system fixup
	call	en$mem		;memory & size
	call	en$emu		;emulator
	call	en$clk		;get the clock
	call	en$cvt		;cancel virtual traps
	.scca	#b$uare,#0	;enable ctrl/c
	return
.sbttl	trap handlers

;	Declare kernel trap catcher

en$dvt::psh	r0		;save this
	.trpset	#b$uare,#en$vtr	;catch traps
	pop	r0		;
	return

;	Cancel virtual trap

en$cvt::psh	r0		;
	.trpset	#b$uare,#0	;
	pop	r0
	return

;	Catch virtual trap
;
;	c=1 v=1	trap
;	n=0	trap to 4
;	n=1	trap to 10

	stack	pc ps
en$vtr:	mov	sp.ps(sp),e$npsw ;save the ps
	bis	#cbit!vbit!nbit,sp.ps(sp) ;set a cbit return
	bcs	10$		;this was a trap to 10
	bic	#nbit,sp.ps(sp)	;it was a trap to 4
10$:	call	en$dvt		;catch the next one
	rti			;and quit

;	Kernel trap handler
;	Kernel traps are taken at pr7

en$dkt::.enabl	lsb		;setup for kernel traps
	spl	7		;go up
	jsr	r5,50$		;save rt-11's
	.word	v$ebus,e$nbus	;
	jsr	r5,50$		;setup ours
	.word	40$,v$ebus	;
	return

en$ckt::			;cancel kernel trap handler
	jsr	r5,50$		;
	.word	e$nbus,v$ebus	;
	spl	0		;
	return

;	c=1 v=1	trap
;	n=0	trap to 4
;	n=1	trap to 10

stack	pc ps
en$ktr:	mov	sp.ps(sp),e$npsw ;save the ps
	bis	#cbit!vbit!nbit,sp.ps(sp) ;set a cbit return
	bcs	10$		;this was a trap to 10
	bic	#nbit,sp.ps(sp)	;it was a trap to 4
10$:	rti			;and return to them

40$:	.word	en$ktr,pr7,en$ktr,pr7 ;our bus and cpu traps
	.word	en$ktr,pr7	      ;our mmu trap

50$:	pshs	<r1,r0>		;save these
	mov	(r5)+,r0	;source
	mov	(r5)+,r1	;destination
	mov	(r0)+,(r1)+	;save four of them
	mov	(r0)+,(r1)+	;
	mov	(r0)+,(r1)+	;
	mov	(r0)+,(r1)+	;
	pops	<r0,r1>		;restore them
	rts	r5
	.dsabl	lsb
.sbttl	get boot data

;	Get time, date and frequency
;	Get config, confg2, sysgen
;	Get system device

meta	<gval c d><jsr r5,bu$gva><.word c><.iif nb <d>,mov r0,d>

en$boo::			;get rt-11 host information

;	Time & date
;
;	Do this early since we do another later to check for ticking).

	mov	#b$otim,r1	;point to it
	call	en$tim		;get boot time & date

;	Config, confg2, sysgen, version, update, memsiz

	gval	rm.cfg,b$ocfg	;config
	gval	rm.cf2,b$ocf2	;confg2
	gval	rm.syg,b$osyg	;sysgen
	gval	rm.syv,b$over	;get the system version
	gval	rm.mes,b$omes	;get the memory size in pages
	cmpb	b$over,#5	;before V5?
	blo	10$		;yes
	gval	rm.mpt,r1	;get the offset to memory control
	add	#rmrsz.,r1	;adjust to ramsz
	.gval	#b$uare,r1	;get the ram size
	mov	r0,b$omes	;get ram size

;	System device

10$:	gval	rm.syu,b$osyu	;syunit in high byte
	swab	b$osyu		;get it in low byte
	gval	rm.syi		;get syindx
	movb	r0,b$osyi	;
	mov	r0,r1		;get another copy
	gval	rm.pnp		;pname pointer
	add	r0,r1		;point physical name
	.gval	#b$uare,r1	;get the name of the system device
	mov	r0,b$osys	;system device name
	return

bu$gva::.gval	#b$uare,(r5)+	;get it
	rts	r5
.sbttl	operating system

;	Build operating system database
;
;	r2	config
;	r3	confg2
;
;	r5	e$nops

en$ops::
	mov	b$osyg,e$nsyg	;sysgen
	mov	b$ocfg,e$ncfg	;config
	mov	b$ocf2,e$ncf2	;confg2
				;
	mov	#e$ncfg,r2	;r2 -> config
	mov	#e$ncf2,r3	;r3 -> confg2
	mov	#e$nops,r5	;r5 -> en$ops
	mov	#enshp$,r1	;assume RUST/XM
	cmp	e$nrr5,#^rSHP	;is this RUST/XM?
	beq	10$		;yes
	gval	rm.mon,r0	;get the first word of the monitor
	cmp	r0,#137		;this us?
	bne	20$		;nope
	mov	#ensha$,r1	;assume SHARE-eleven
	cmp	j$bsys,#140000	;trying to run from under share?
	beq	10$		;yes
	mov	#ensat$,r1	;no - satellite
10$:	bis	r1,(r5)		;its a satellite
	br	70$		;
				;should check other systems here
20$:	bit	#cnxmm$,(r2)	;is this XM?
	beq	30$		;nope
	bis	#ensxm$,(r5)	;yes
	br	70$
30$:	bit	#cnfbm$,(r2)	;is this FB?
	beq	40$		;nope
	bis	#ensfb$,(r5)	;yes
	br	70$		;
40$:	bis	#enssj$,(r5)	;assume its SJ
	fall	70$
70$:	fall	100$

;	version & update

100$:	movb	b$over,e$nopv	;get the version
	movb	b$oupd,e$nopu	;and the update
	cmp	e$nopv,#4	;this V4 or later?
	blo	110$		;nope
	bis	#ensv4$,(r5)	;set version 4
110$:	

120$:	return
.sbttl	operating system fixup

en$opf::			;operating system fixup
100$:	bit	#ensha$,e$nops	;do we think we are SHARE?
	bne	200$		;yes - skip the RTEM test
	bit	#sgrtm$,e$nsyg	;do we think we are RTEM?
	beq	300$		;nope
	mov	#ensrm$,e$nops	;yes - setup RTEM
	br	300$		;

;	Fix SHARE to VRT

200$:	bit	#enpvx$,e$ncpp	;are we a VAX?
	beq	300$		;nope
	bic	#ensha$,e$nops	;change it to vrt
	bis	#ensvr$,e$nops	;
300$:	return
.sbttl	terminal

;	en.tcs	terminal csr
;	en.tve	terminal vector
;	en.tet	terminal type

en$ter:				;get terminal
	mov	#177560,e$ntcs	;assume csr
	mov	#60,e$ntve	;assume vector
	mov	#e$ntet,r5	;terminal type
	bis	#entsc$,(r5)	;assume scope
	return
.sbttl	clock

;	We must add kernel checks to these.
;
;	r2 ->	config
;	r3 ->	confg2
;	r5 ->	en.clk

en$clk:				;clock
	mov	#e$ncfg,r2	;r2 -> config
	mov	#e$ncf2,r3	;r3 -> confg2
	mov	#e$nclk,r5	;r5 -> en.clk
.if ne clk$c
	beqw	e$nemu,10$	;emulator too fast for clock checks
	bis	#enclk$,(r5)	;we have a clock
	bis	#encsr$,(r5)	;clock has csr
	bis	#encac$,(r5)	;clock is active
.endc
10$:	bit	#cnclo$,(r2)	;config - got a clock?
	beq	20$		;nope
	bis	#enclk$,(r5)	;we have a clock
20$:	bit	#cnlks$,(r2)	;got a csr?
	beq	30$		;nope
	bis	#encsr$,(r5)	;clock has csr
30$:	bit	#cn50h$,(r2)	;this 50 cycles?
	beq	40$		;nope
	bis	#enc50$,(r5)	;clock has 50$ cycles

;	See if the clock is ticking
;
;	We got the time and date when we started.
;	Get it again and see if it has moved.
;	If it has not wait a little while to make sure.

40$:	call	100$		;get it once
	bcc	60$		;it has changed
	clr	r0		;wait for at least a tick
50$:	dec	r0		;count it down
	bne	50$		;
	call	100$		;try again
	bcs	70$		;clock is not ticking
60$:	bis	#encac$,(r5)	;clock is active
70$:	return

	series	ti,word	hot lot dat
100$:	
	mov	#e$ntim,r1	;setup where
	call	en$tim		;get the time & date
.if ne clk$c
	bnew	e$nemu,110$	;emulator too fast for clock checks
.endc
	cmp	(r1)+,b$otim	;check the high order
	bne	110$		;fine - it is ticking
	cmp	(r1)+,b$otim+ti.lot ;check low order
	beq	120$		;it is not ticking
110$:	tst	(pc)+		;clock is active
120$:	sec			;clock is inactive
	return

en$tim:	.gtim	#b$uare,r1	;get the time
	.date			;get the date
	mov	r0,ti.dat(r1)	;plug in the date
	return
.sbttl	cpu

;	Get the cpu parameters.
;
;	Initial test for MFPT to determine cpu type.
;	Ignore all following tests for an 11/21.
;	Call en$cpf for fingerprints.
;	Call en$cpx for extensions.
;	Call en$cpo to determine old non-mfpt cpu's.
;
;	en.cpc	cpu code
;	en.cpp	enpXX$
;	en.cpx	cpu extensions
;	en.cpf	cpu fingerprints
;
;	en.cpx
;
;	Processor type codes define the following:
;
;	0
;	1	11/44
;	2	
;	3	11/23, 11/24	F11
;	4	11/21		T11
;	5	11/73		J11
;
;	Determine the remainder by looking for architectural differences.
;	We use tests that will function in a virtual environment.

meta	<cpu c d e f><jsr r5,en$cdf><.word c,d,e,f>

en$cdf:	mov	(r5)+,e$ncpc	;cpu code
	mov	(r5)+,e$ncpp	;processor flags
	mov	(r5)+,e$ncpi	;internal code
	mov	(r5)+,e$ncpe	;expected fingerprints
	rts	r5

en$cpu:				;build cpu database
	mov	#e$ncfg,r2	; r2 -> config
	mov	#e$ncf2,r3	; r3 -> confg2
	mov	#e$ncpc,r4	; r4 -> cpu numeric code
	mov	#e$ncpp,r5	; r5 -> cpu processor flag

	movb	#-1,e$ncpt	;assume no type
	mfpt			;get the processor type
	bvs	30$		;not implemented - old cpu
	movb	r0,e$ncpt	;save the type
	movb	r0,r1		; r1 = processor type from mfpt
	swab	r0		;get the revision
	movb	r0,e$ncpr	;remember the revision
	cmpb	r1,#5		;this too high?
	blos	10$		;nope
	clr	r1		;yes - use the unknown type
10$:	asl	r1		;get the word set
	asl	r1		;
	asl	r1		;
	add	#50$,r1		;point to the pair
	mov	(r1)+,(r4)	;get the cpu number
	mov	(r1)+,(r5)	;get the bit
	mov	(r1)+,e$ncpi	;internal code
	mov	(r1)+,e$ncpe	;expected fingerprints

;	Special code for 11/21

	cmp	(r4),#21.	;this a 21?
	bne	30$		;nope
	mov	#enf21.,e$ncpf	;yes - setup the fingerprint
	mov	#endkm$,e$nmod	;set cpu mode to kernel
	br	40$		;and skip the rest

30$:	call	en$cpf		;get cpu fingerprints
	call	en$cpx		;get the extensions
	call	en$mod		;get cpu mode

	tst	e$ncpp		;do we have a processor yet?
	bne	40$		;yes
	call	en$cpo		;no - get the old type

40$:	tst	e$ncpp		;do we have one yet?
	bne	45$		;yes
	cpu	enpun$,eniun.,0,0 ;use undefined
45$:	return

;	MFPT data
;
;		cpc	cpp	cpi	cpe
50$:	.word	0,	enpun$,	eniun.,	0	;0 = unused
	.word	44.,	enp44$,	eni44.,	enf44.	;1 = 11/44
	.word	0,	enpun$,	eniun.,	0	;2 = unused
	.word	23.,	enp23$,	eni23.,	enf23.	;3 = F11 - 23/24
	.word	21.,	enp21$,	eni21.,	enf21.	;4 = T11 - 21
	.word	73.,	enp73$,	eni73.,	enf73.	;5 = J11 - 73
.sbttl	fingerprints - part 1

;		fmp	fmx	fjp	fjr	fod	fop
;	enf03.						;enfop$
;	enf04.					enfod$	
;	enf10.			enfjp$		enfod$
;	enf20.	enfmp$	enfmx$	enfjp$		enfod$
;	enf21$	enfmp$	enfmx$				;no bus trap		
;	enf23.	enfmp$	emfmx$				;enfop$
;	enf34.					enfod$
;	enf40$	enfmp$	enfmx$			enfod$	enfop$
;
;	enf44.				enfjr$	enfod$
;	enf45$				enfjr$	enfod$	enfop$
;	enf60$	enfmp$	enfmx$			enfod$	;?
;	enf70$				enfjr$	enfod$	enfop$
;	enf73$	enfmp$	enfmx$		enfjr$	enfod$	enfop$
;	enfv3$				enfjr$	enfod$	;?
;	enfv5$					enfod$	;?	all others
;	enfv8$					enfod$	;?	enfjr$
;
;	Test some cpu fingerprints.
;
;	These have the advantage that they are not altered by emulators.
;	All can be issued for all processors except jrn on t11's.
;
; #1	fmp=0	mov r,(r)+	no increment		; #1 => #2
;	fmp=1	mov r,(r)+	increments
;
; #3	fmx=0	mov pc,x	pc incremented by 2
;	fmx=1	mov pc,x	pc incremented by 4
;	
; #4	fjp=0	jmp (r)+	pc not incremented first
;	fjp=1	jmp (r)+	pc incremented first
;
; #5	fjr=0	jmp r0		traps to 4
;	fjr=1	jmp r0		traps to 10
;
;	fod=0			no odd address trap
;	fod=1			odd address trap
;
;	fop=0	tst (odd)+	register not incremented
;	fop=1	tst (odd)+	register incremented
;
;	Increment on faulty pc makes regaining control difficult.
;	Testing non-existent addresses difficult in 32kw pvas.
;	Halt tests are out since we could halt the cpu.
;
;	r5 ->	en.cpf

en$cpf:				;cpu fingerprints
	mov	sp,e$nksp	;save the stack
	mov	#e$ncpf,r5	; r5 -> fingerprints

; #1	fmp=0	mov r,(r)+	no increment
;	fmp=1	mov r,(r)+	increments

100$:	mov	#e$ndum,r0	;get the dummy word
	.word	010020		;mov r0,(r0)+ (avoid z error)
	cmp	e$ndum,#e$ndum	;did it increment?
	beq	110$		;nope - dont set mrp
	bis	#enfmp$,(r5)	;it incremented
110$:	fall	200$

; #3	fmx=0	mov pc,x	pc incremented by 2
;	fmx=1	mov pc,x	pc incremented by 4

200$:	.word	010737		;mov pc,@#e$dum
	.word	e$ndum		;
210$:	cmp	e$ndum,#210$	;did it increment by four?
	bne	220$		;nope - must be plus two
	bis	#enfmx$,(r5)	;yes - incremented by four
220$:	fall	300$

; #4	fjp=0	jmp (r)+	pc not incremented first
;	fjp=1	jmp (r)+	pc incremented first

300$:	mov	#310$,r0	;test the jump increment
	.word	000120		;jmp (r0)+
310$:	br	330$		;no increment
320$:	bis	#enfjp$,(r5)	;incremented first
330$:	fall	400$

; #5	fjr=0	jmp r0		traps to 4
;	fjr=1	jmp r0		traps to 10

400$:	clc			;clear the carry
	.word	000100		;jmp r0
	bpl	410$		;it was a trap to four
	bis	#enfjr$,(r5)	;it was a trap to 10
410$:	fall	500$		;

;	fod=0			no odd address trap
;	fod=1			odd address trap

500$:	mov	#1,r0		;get an odd value
	tst	(r0)		;try out the trap
	bcc	510$		;no odd address trap
	bis	#enfod$,(r5)	;odd address trap
510$:	fall	600$

;	fop=0	tst (odd)+	register not incremented
;	fop=1	tst (odd)+	register incremented

600$:	mov	#1,r0		;check for odd increment
	tst	(r0)+		;
	bcc	610$		;not a trapper
	cmp	r0,#1		;is this still one?
	beq	610$		;yes
	bis	#enfop$,(r5)	;nope - set the finger print
610$:	fall	700$
.sbttl	cpu fingerprints - part2

; #6	enfsv$		;swab clears vbit
;	enfrt$		;rtt
;	enfod$		;odd address trap
;	enfsp$		;spl
;	enfmf$		;mfps
;
; #6	SWAB clears vbit
;
;	yes	all except 20
;	no	20

700$:	
	sev			;11/20 does not change vbit on swab
	swab	r0		;test vbit
	bvs	710$		;swab does not clear vbit (11/20)
	bis	#enfsv$,(r5)	;swab clears vbit
710$:	fall	750$		;

;	RTT instruction
;
;	yes	all except 10 and 20
;	no	10, 20

750$:				;rtt
	mov	sp,r0		;remember this
	clr	-(sp)		;don't care ps
	psh	#760$		;skip 11/20
	rtt			;perform it
	br	770$		;no rtt
760$:	bis	#enfrt$,(r5)	;rtt present
770$:	mov	r0,sp		;reset the stack
	fall	800$		;
				;we only return on an error
;	SPL instruction
;
;	yes	45 70 (44 73)
;	no	04 34 40 60 VAX (03 21  23 10 20)

800$:	.word	000230		;spl 0 (avoid macros)
	bvs	810$		;no spl
	bis	#enfsp$,(r5)	;have spl instruction
810$:	fall	850$		;

;	MFPS instruction
;44?	
;	yes	34 (03 21 23 73)
;	no	04 40 60 VAX (10 20 45 60 70)

850$:	clv			;warum? (paranoia)
	mfps	r0		;get the ps
	bvs	860$		;no mfps
	bis	#enfmf$,(r5)	;have mfps
860$:	fall	1000$

1000$:
	mov	e$nksp,sp	;get back the stack
	return
.sbttl	cpu fingerprints  - part3

.sbttl	cpu extensions

;	r0
;	r1
;	r2 ->	config
;	r3 ->	confg2
;	r4 ->	en.cpc - cpu number
;	r5 ->	en.cpx
;
;	not called for 11/21

en$cpx:	mov	sp,e$nksp	;save the stack
	mov	#e$ncfg,r2	;r2 -> config
	mov	#e$ncf2,r3	;r3 -> confg2
	mov	#e$ncpc,r4	;r4 -> cpu code
	mov	#e$ncpx,r5	;r5 -> cpx

;	eis

10$:	bit	#cneis$,(r3)	;confg2	- got eis?
	bne	20$		;yes
	clr	r0		;make we dont set the c-bit
	mul	r0,r0		;do we have eis?
	bvs	30$		;nope
20$:	bis	#enxei$,(r5)	;eis

;	fpu
;	we need a better test

30$:	bit	#cnfpu$,(r2)	;config	- got an fpu?
	bne	40$		;yes
	cfcc			;got fpu?
	bvs	50$		;nope
40$:	bis	#enxfp$,(r5)	;fpp

;	fis

50$:	mov	sp,r0		;remember this
	clr	-(sp)		;make space
	clr	-(sp)		;
	clr	-(sp)		;
	clr	-(sp)		;
	fadd	sp		;try out fis
	bvs	60$		;no fis
	bis	#enxfs$,(r5)	;got fis
60$:	mov	r0,sp		;put this back

70$:	bit	#cncis$,(r3)	;confg2	- got cis?
	beq	80$		;nope
	bis	#enxci$,(r5)	;cis
80$:	fall	100$
.sbttl	kernel/virtual tests

;	Kernel/virtual tests
;
;	Kernel	- may access I/O page. May not have reliable config data.
;	Virtual	- can't access I/O page. Should have reliable config data.
;	Compat	- as for virtual environment.
;
;	Check to see if we are in the kernel. The PS is the best test of
;	this condition. However, we must ensure that location 177776 really
;	is the PS. We do this by seeing if we can read/write it and if
;	the cbit sets properly.
;
;	Some tests will fail if we are running in user mode with the
;	i/o page mapped.
;
;	The 11/03 has no ps and is always in kernel mode.
;	The 11/21 has no ps and no options - ignore all tests.
;
;		kernel			virtual
;	eae	status byte		not checked
;	mmu	m$msr0			precondition for virtual mode.
;	22b	m$msr3&mm22b$		22-bit mode
;
;	r4 ->	e$ncpc - cpu code
;	r5 ->	e$ncpx - cpu extensions
;
;	e$nmod	0 => kernel. <>0 => virtual.

100$:	cmp	(r4),#3		;is this an 11/03
	beq	1000$		;yes - always kernel
;	cmp	(r4),#21.	;this a T11?
;	beq	2000$		;yes - escape completely
	mov	#ps,r0		;see if we have a ps
	tst	(r0)		;get the ps
	bvs	110$		;can't read - must be virtual
	clrb	(r0)		;can we clear the ps?
	bvs	110$		;cant write - must be virtual
	sec			;see if we can set the cbit
	movb	(r0),r1		;get the result ps
	asr	r1		;see if the c-bit set
	bcs	1000$		;this is the ps - we are in the kernel

110$:	bis	#endvm$,e$nmod	;set virtual mode
	br	2000$		;and skip the rest

;	Kernel mode tests

1000$:				;we are in kernel mode

;	eae

1010$:	tstb	@#177311	;got eae?
	bvs	1020$		;nope
	bis	#enxea$,(r5)	;we have eae

;	mmu

1020$:	tst	@#ps		;got a ps?
	bvs	1030$		;nope - no memory management
	tst	@#m$msr0	;got sr0?
	bvs	1030$		;nope - no memory management
	bis	#enxmm$,(r5)	;memory management
1030$:
2000$:	return
.sbttl	non-mfpt cpu determination

;	r1 ->	cpu fingerprints
;	r2 ->	config
;	r3 ->	confg2
;	r4 ->	cpu code
;	r5 ->	cpu flags
;
;	11/20
;
;	SWAB clears vbit
;
;	yes	all except 20
;	no	20

en$cpo:				;old cpus
	mov	sp,e$nksp	;save the stack
	mov	#e$ncpf,r1	;r1 -> fingerprints
	mov	#e$ncfg,r2	;r2 -> config
	mov	#e$ncf2,r3	;r3 -> confg2
	mov	#e$ncpc,r4	;r4 -> cpu code
	mov	#e$ncpp,r5	;r5 -> cpu processor flags

1115$:
1120$:	bit	#enfsv$,(r1)	;does swab clear vbit?
	bne	1110$		;yes - no an 11/20
	cpu	20.,enp20$,eni20.,enf20.
	jmp	2000$		;

;	11/10
;
;	RTT instruction
;
;	yes	all except 10 and 20
;	no	10, 20

1105$:
1110$:	bit	#enfrt$,(r1)	;RTT present?
	bne	1103$		;yes- not 11/10
	cpu	10.,enp10$,eni10.,enf10.
	jmp	2000$

;	11/03
;
;	Odd-address trap
;
;	yes	04 34 40 45 60 70 VAX (04 10 20 44 73)
;	no	03 (21 23)

1103$:	bit	#enfod$,(r1)	;got odd traps?
	bne	1145$		;yes - not an 03
	cpu	03.,enp03$,eni03.,enf03.
	br	2000$		;

;	11/45 11/70
;
;	SPL instruction
;
;	yes	45 70 (44 73)
;	no	04 34 40 60 VAX (03 21  23 10 20)
;
;	The 45 and 70 are difficult to separate in a virtual environment.
;	We assume for the moment its an 11/70.

1145$:	bit	#enfsp$,(r1)	;got spl instruction?
	beq	1134$		;nope - can't be 45 or 70

	bit	#cnp70$,(r3)	;confg2	- this an 11/70?
	bne	1170$		;nope
	tst	e$nmod		;are we virtual?
	bmi	1150$		;yes - believe the bit
	bit	#enm22$,e$nmem	;do we have 22-bit addressing?
	bne	1170$		;yes - we are an 11/70

1150$:	cpu	45.,enp45$,eni45.,enf45.
	br	2000$		;

1170$:	cpu	70.,enp70$,eni70.,enf70.
	br	2000$		;

;	11/34
;
;	mfps instruction
;44?	
;	yes	34 (03 21 23 73)
;	no	04 40 60 VAX (10 20 45 60 70)

1134$:	bit	#enfmf$,(r1)	;got mfps?
	beq	1104$		;nope - not a 34
	cpu	34.,enp34$,eni34.,enf34.
	br	2000$		;

;	The following cpu's are ambiguous with VAX's.
;
;	11/04
;
;	mov r,(r)+ increments r first
;
;	yes	40 60 730 (20 21 23 73)
;	no	04 780 (03 10 34 44 45 70)
;
;	Whether all VAX's work this way is doubtful.

1104$:	bit	#enfmp$,(r1)	;move pop increments (mov r,(r)+)?
	bne	1140$		;yes - not an 04

;	Check for 04 or VAX
;
;	If we are in virtual mode we must be VAX.
;	If we are VAX we must be in virtual mode.

	cpu	04.,enp04$,eni04.,enf04. ;assume 04
	tst	e$nmod		;are we kernel?
	bpl	2000$		;yes - must be 04
	br	11700$		;no - some kind of vax

;	11/40, 11/60
;
;	40 and 60 difficult in a virtual environment
;	And are ambiguous with VAX/730's at least.

1140$:	cpu	40.,enp40$,eni40.,enf40. ;assume 11/40
	bit	#cnp60$,(r3)	;confg2	- this an 11/60?
	bne	1160$		;yes - definitely
	tst	e$nmod		;are we virtual?
	bmi	1135$		;yes - check for vax
;	medins			;check a med instruction
;	bvc	1160$		;definitely a vax
	br	2000$		;definitely an 11/40

;	fmx=1	11/40
;	fmp=1	11/40
;
;	We compare the expected codes for an 11/40 with the actual
;	codes. If they are different we assume it is a VAX.

1135$:				;are we a vax?
	cmpb	e$ncpf,#enf40.	;is this what we expected?
	beq	2000$		;yes
11700$:				;some kind of vax
	cpu	730.,enpvx$,enivx.,enfv3.
	cmp	e$ncpf,#enfv3.	;is this a 730?
	beq	2000$		;yes
	cpu	780.,enpvx$,enivx.,enfv8.
	cmp	e$ncpf,#enfv8.	;this a 780?
	beq	2000$		;yes
	cpu	750.,enpvx$,enivx.,enfv5. ;assume a 750
	br	2000$		;

1160$:	cpu	60.,enp60$,eni60.,enf60. ;an 11/60
	fall	2000$		;

2000$:	tst	(r5)		;did we already work it out?
	bne	2020$		;yes

	cpu	0,enpun$,eniun.,0	;unknown

2020$:	mov	e$nksp,sp	;get back the stack
	return
.sbttl	processor mode

;	Determine cpu mode
;
;	endkm$	kernel mode
;	endsm$	supervisor mode (unlikely)
;	endum$	user mode
;	endcm$	compatibility mode
;	endvm$	virtual (user, supervisor or compatibility)
;	endmm$	mapped environment (memory management enabled)
;
;	Not called for 11/21's.

en$mod:				;get the mode
	mov	sp,e$nksp	;save the stack
	mov	#e$nmod,r5	;

;	We want to look at the current/previous mode bits of the psw.
;	In a virtual job we cannot access these directly. But on all
;	known systems we will get a copy of them on the stack during
;	a bus/cpu trap routine.

	.word	000100		;jmp r0 - guaranteed trap
				;trap returns the psw bits
	mov	e$npsw,r0	;get the psw
	rol	r0		;rotate the top two around
	rol	r0		;
	rol	r0		;
	bic	#^c3,r0		;get the mode out
	asl	r0		;
	add	r0,pc		;and dispatch it
	br	100$		;kernel
	br	110$		;supervisor
	br	120$		;invalid
	br	130$		;user

;	kernel mode
;
;	Kernel psw in virtual mode signals compatibility mode.

100$:	bit	#endvm$,(r5)	;are we virtual?
	bne	140$		;yes - compatibility mode
	bis	#endkm$,(r5)	;kernel mode
	br	200$
110$:
120$:	bis	#endsm$,(r5)	;supervisor mode
	bis	#enxmm$,e$ncpx	;and we have memory management
	bis	#enmmu$,e$nmem	;twice
	br	200$

130$:	bis	#endum$,(r5)	;user mode
	bis	#enxmm$,e$ncpx	;and we have memory management
	bis	#enmmu$,e$nmem	;twice
	br	200$

140$:	bis	#endcm$,(r5)	;compatibility mode
200$:	mov	e$nksp,sp	;get back the stack
	return
.sbttl	memory management

;	Get memory management type
;	(should be cautious about mmu tests when 30kw set)
;
;	16	03 04 10 20 21 VAX
;	18	34 40 45 60
;	22	23 44 70 73

en16$ = enp03$!enp04$!enp10$!enp20$!enp21$!enpvx$	;16 bit
en18$ = enp34$!enp40$!enp45$!enp60$			;18 bit
en22$ = enp23$!enp44$!enp70$!enp73$!enpun$		;22-bit
en32$ = enpvx$						;32-bit

en$mem:				;memory
	mov	sp,e$nksp	;remember the stack
	mov	#e$nmem,r5	;mmu flags
	mov	e$nmep,r0	;get the size
	bne	10$		;yes
	mov	b$omes,r0	;get memory size
;	mov	#28.*mmpik.,r0	;v4 - assume 28kw
10$:	tst	e$nmod		;this a virtual environment
	bmi	100$		;yes - forget this
; ew
	bit	#ensxm$,e$nops	;this rt-11xm?
	bne	100$		;yes - do not touch mmu
.if ne rst$c
	bit	#enrxs$,e$nops	;
	bne	100$
.endc

20$:	clr	@#ps		;do we have a PS?
	bvs	100$		;no

	clr	@#m$msr0	;disable management
	bvs	100$		;fine - we have mmu
	bis	#enmmu$,(r5)	;mmu

30$:	tst	@#160000	;this address must be wrong
	bvs	50$		;fine - its wrong
	bis	#enm30$,(r5)	;30k or 31k switched

;	22-bit addressing

50$:	bis	#mm22b$,@#m$msr3;check for 22-bit
	bvs	60$		;not 22-bit
	bit	#mm22b$,@#m$msr3;did it set?
	bvs	60$		;nope
	beq	60$		;nope
	clr	@#m$msr3	;clear it
	bis	#enm22$,(r5)	;22-bit
	mov	#mmi22.,e$nmio	;i/o page address
	br	70$		;

60$:	bis	#enm18$,(r5)	;18-bit memory only
	mov	#mmi18.,e$nmio	;reset the i/o page

70$:	bis	#enmmu$,(r5)	;remember we have it
	call	en$mes		;get the total page size
100$:	mov	r0,e$nmep	;memory size in pages
	clc			;get size in blocks
	ror	r0		;
	asr	r0		;
	asr	r0		;
	mov	r0,e$nmeb	;size in blocks
	asr	r0		;get size in kwords
	asr	r0		;
	mov	r0,e$nmek	;
				;memory size in kwords
	mov	r0,e$nmek	;memory size in kwords
	mov	e$nksp,sp	;get back the stack
	return
.sbttl	memory size

;	Size extended memory
;
;	Must be in kernel mode.
;	Interrupts disabled and a kernel trap catcher used.
;	We must disable interrupts during this for 30kw systems.
;
;	call	en$mes
;
;	r0	memory size in pages

.macro	savmmu	addr
	psh	@#addr'0
	psh	@#addr'1
	psh	@#addr'2
	psh	@#addr'3
	psh	@#addr'4
	psh	@#addr'5
	psh	@#addr'6
	psh	@#addr'7
.endm
.macro	resmmu	addr
	psh	@#addr'7
	psh	@#addr'6
	psh	@#addr'5
	psh	@#addr'4
	psh	@#addr'3
	psh	@#addr'2
	psh	@#addr'1
	psh	@#addr'0
.endm


en$mes:				;size memory
	call	en$dkt		;declare kernel traps

; ew
;	savmmu	m$kip
;	savmmu	m$uip
;	savmmu	m$kid		;
;	savmmu	m$uid		;

	mov	#mmi18.,e$nmio	;assume 18-bit page
	bit	#enm18$,e$nmem	;is this an 18-bit only machine?
	bne	10$		;yes
	mov	#mmi22.,e$nmio	;no - try for 22-bits
	bis	#mm22b$,m$msr3	;and setup 22-bit mode
				;
10$:	call	en$smm		;setup memory management
	clr	r0		;start here
	clr	e$nmkw		;memory in kilowords
20$:	inc	e$nmkw		;count another kiloword
	add	#mmpik.,r0	;advance 1k words
				;
	cmp	r0,e$nmio	;end of it all?
	bcc	50$		;yes - done
	tst	e$nlim		;got a page limit?
	beq	25$		;no
	cmp	e$nmkw,e$nlim	;at page limit?
	bhis	50$		;yes - forget the rest
25$:	mov	r0,@#m$uip1	;get the next location
	mov	sp,r1		;r1 = current sp
	mov	@#0,r2		;r0 = current location zero
	clc			;
	mfpi	@#m$mpa1	;check it
	bvs	40$		;oops - we just ran out

;	Check for wrap-around

	cmp	(sp)+,@#0	;this the same as location zero?
	bne	30$		;nope
	inc	@#0		;yes - reset it
	clc			;
	mfpi	@#m$mpa1	;get it again
	bvs	40$		;should be impossible
	cmp	(sp)+,@#0	;did it change with us?
	beq	40$		;yes - we just wrapped around
30$:	tst	(pc)+		;reset this
40$:	sec			;
	mov	r1,sp		;restore the stack
	mov	r2,@#0		;restore this
	bcc	20$		;keep looking

;	Turn off management

50$:	call	en$rmm		;restore memory management
	call	en$ckt		;cancel kernel traps

;	resmmu	m$uid		;
;	resmmu	m$kid		;
;	resmmu	m$uip
;	resmmu	m$kip

	return			;r0 = memory size in pages

;	setup mmu registers

en$smm::			;setup memory management
	clr	@#ps		;clean up the ps
	clr	@#m$msr0	;disable management
	clr	r0		;page register offset
	clr	r1		;the mapping offset

20$:	mov	r1,m$kip0(r0)	;kernel page
	mov	r1,m$uip0(r0)	;user page
	mov	#mmd4k.,m$kid0(r0) ;and the user also
	mov	#mmd4k.,m$uid0(r0) ;map it
	tst	(r0)+		;do the next
	add	#mmpis.,r1	;the next segment
	cmp	r0,#7.*2	;is this the i/o stuff?
	bne	30$		;nope
	mov	e$nmio,r1	;yes - get the I/O page
30$:	cmp	r0,#8.*2	;done them all?
	blo	20$		;nope
	inc	@#m$msr0	;enable management
	bis	#mmpum$,@#ps	;setup mode
	return

en$rmm:				;restore memory management
	mov	#mmpis.*1,@#m$uip1 ;restore user par1
	clr	@#ps
	bit	#enm18$,e$nmem	;was this 18-bit mode?
	bne	10$		;yes
	clr	@#m$msr3	;no - turn off 22-bit mode
10$:	clr	@#m$msr0	;turn off management
	return
;	e$nrom
.sbttl	emulator checks

;	Adapted from code in RTS:RTBOO.MAC

en$emu:	call	en$v11			; V11/VRT 
	bit	#ensxm$,e$nops		; mapped system?
	bne	10$			; yes - do not touch mmu
	call	en$dkt			; declare kernel traps
	call	en$smm			; setup memory management
	call	en$e11			; E11/SIMH
	call	en$rmm			; restore mmu
	call	en$ckt			; cancel kernel traps
10$:	return


en$v11:	psh	v$eiot			; save it
	psh	v$eiot+2		;
.if ne r1v$c
	mov	sp,r1			;
.endc
	mov	#20$,@#v$eiot		; setup a trap catcher
	clr	v$eiot+2		;
.if eq r1v$c
	mov	sp,r1			;
.endc
	psh	#vrDET.			; detect
	iot				;
	.word	vrSIG.			;
	beqb	r0,#vrPDP.,10$		; PDP-11 mode
	mov	#envrt$,e$nemu		;
	br	20$			;
10$:	mov	#env11$,e$nemu		;
20$:	mov	r1,sp			; dump trap
	pop	v$eiot+2		; restore
	pop	v$eiot			; 
	return				;

.sbttl	check for emulator

;	Check for SIMH or E11
;
;	The only test I've found so far is by fooling MMU SR1
;	which records register movement until frozen by either
;	an exception or by writing 160000 to MMU SR0.
;
;	Anomalies occur for certain ways of writing 160000 to MMU SR0.
;	Separate tests distinquish SIMH and E11 from KDF11s and KDJ11s.
;
;	Test is never entered if the machine has a BOOM ROM at 173000.
;	Neither E11 or SIMH supply a BOOT ROM, so it's a pretty good
;	guess to make and covers most sensible machines.
;
;	Since E11/SIMH run as J11/73s by default the next thing we do
;	is assume that machines without MMU are not emulated.
;
;	There's no real drama if the guess is wrong.

en$e11:
;	bnew	b$ot11,40$		; T11
	bnew	e$nemu,40$		; already know
	mov	#m$msr0,r0		; emulator check
	mov	#m$msr1,r1		;
	tst	(r1)			; got MMU with SR1 etc?
	bcs	40$			; nope
					;
	clr	(r0)+			; clear SR0 with increment
	bis	#160000,-(r0)		; overwrite and freeze
.if ne sim$c
	bneb	(r1),#170027,10$	; SIMH magic number is (17)0027
.iff
	bnew	(r1),#170027,10$	; SIMH magic number is (17)0027
.endc
	mov	#ensim$,e$nemu		;
	br	30$			;
					;
10$:	mov	#340,(r0)		; SR0 = 340
	bnew	(r0),#140,30$		; E11 magic number is 140
	mov	#ene11$,e$nemu		;
30$:	clr	(r0)			; make them all clean again
	clr	(r1)			;
40$:	return

.end
