rst$c=1		;RUST additions and changes
V4=1
.title	kda	kernel data
.include "lib:rust.mac"
$apdef		;acp
$cndef		;acp
$esdef		;error severity
$dedef		;device
$jbdef		;job
$kcdef		;kernel control
$podef		;pool
$prdef		;pcr
$psdef		;ps
$rmdef		;rmon
$scdef		;scheduler
$sgdef		;sysgen
$stdef		;states
$tidef		;timer parameters

;	RUST/XM kernel data
;
;	%build
;	macro rxs:kda/object:rxb:kda
;	%end
;
;	%date
;	<20-Nov-2010 20:53:23.33>
;	<23-Dec-2003 25:11:07.10>
;	%edit
;	<85   >
;	<43   >
;
;	s$yerr			;system error record
;	s$yerc	.word	0	;i/o errors
;	s$ymec	.word	0	;memory errors

crprs.==64.	;64		;processes
crtes.==64.	;64		;terminals
crdes.==31.			;devices
.if ne rst$c
cracs.==16.			;acps
.iff
cracs.==5.	;8		;acps
.endc ;1
crsys.==8.			;system user group code
crfes.==16.			;features
crgrp.==8.			;high system group number
crsyv.==3	;V3		;system version
crsyu.==5	;V2.3		;system update
crsyl.==0	;V2.3 (0)	;field test level
crsyr.==0	;V2.3.4		;release level

;	title	version update level release

.macro	title	vr,u,l,r
.if idn r,0
 .if dif l,0
$imginf fun=sav cre=hammo aut=dev use=<Build RUST/XM V'vr'.'u>
 .iff
$imginf fun=sav cre=hammo aut=dev use=<RUST/XM V'vr'.'u (field test level=l)>
 .endc ;2
.iff
$imginf fun=sav cre=hammo aut=dev use=<RUST/XM V'vr'.'u'.'r>
.endc ;3
.endm

$imgdef	nam=RUST ver=crsyv. upd=crsyu.
title	\crsyv.,\crsyu.,\crsyl.,\crsyr.
.sbttl	asect, csect, psect

;-------------------------------;
; asect				;
;-------------------------------;
.asect				;
.=j$busp			;setup the initial stack
	.word	b$uksp		;42	usersp
.=j$bsys			;
	.word	r$mmon		;54	kernel rmon for patching
				;
				;600	vectors permitted upto 600
;-------------------------------;
; csect				;
;-------------------------------;
.csect				;rt-11 overlays
				;
start::				;RUST/XM starts here
	call	ko$boo		;call in boot overlay
	jmp	bu$sta		;start the build
				;
				;1000	Overlay handler covers 1000 to 1400
				;	during system build.
	b$uksp==1000		;1000	build stack
	f$kksp==1000		;1000	fork stack
				;	See io$don. The fork stack must be
				;	below all other stacks for a check that
				;	tests whether the fork stack is active.
	h$sbot==1000		;1000	128. byte input ring.
	h$stop==1200		;1200	must be located at 1000.
				;	High-speed ring must be at 1000/1200
				;	or equivalent for the algorithm:
				;	add #2,h$sget, bic #hsrn$m,h$sget
	hsrn$m==^c1177		;	high-speed ring mask
				;1200	32*2 scheduler queues
				;1400	start of monitor
				;
;-------------------------------;
; psect				;
;-------------------------------;
				;
.psect	kerbas			;kernel base starts at 1200
.psect	kda			;kernel par0
.sbttl	resources, records and maps

;-------------------------------;
; queues & pools		;
;-------------------------------;
;		suc	pre  pcr;
p$ohed::.word	p$ohed,p$ohed,0,-1 ;kernel pool header (s$yque)
assume	po.typ eq 6		;(p$ohed must be non-empty pool element.
s$yque::.word	s$yque,s$yque,0	;system process resource
;			     rec;
t$pque::.word	t$pque,t$pque,0	;tp queue
t$bque::.word	t$bque,t$bque,0	;tb queue
a$dque::.word	a$dque,a$dque,0	;ad queue
s$hque::.word	s$hque,s$hque,0	;synch queue
				;
;-------------------------------;
; process map			;
;-------------------------------;
p$rprs::.word	crprs.		;\ number of processes
s$ypcr==.+prsyi.		;! system pcr
p$rmap::.blkw	crprs.		;/ PCR pointers.

;-------------------------------;
; device map			;
;-------------------------------;
d$eabm::.word	d$eabm,d$eabm,-1,0 ;device abort mutex			?remove
d$edes::.word	crdes.		;\ number of devices
t$tder==.+detti.		;! terminal device record
s$yder==.+desyi.		;! system device record
v$mder==.+devmi.		;! memory device record
n$lder==.+denli.		;! null device record
d$emap::.blkw	crdes.		;/ device record map (der's)

;-------------------------------;
; terminal map			;
;-------------------------------;
t$econ::.word	t$econ,t$econ	;controller listhead (s$yque)
t$etes::.word	crtes.		;\ number of terminals
t$emap::.blkw	crtes.		;/ terminal record pointers

;-------------------------------;
; acp map			;
;-------------------------------;
assume	acrtn. eq 0
assume	acrta. eq 1
assume	acrtx. eq 2
assume	acrts. eq 3
a$pacs::			;new name
a$cacs::.word	cracs.		;number of acps
a$pmap::			;
a$cmap::.word	rt$11n		;acrtn. - rt11n
	.word	rt$11a		;acrta. - rt11a
	.word	rt$11a		;acrtx. - rt11x
	.word	rt$11s		;acrts. - rt11s
	.blkw	cracs.-4	;user-defined
				;
;-------------------------------;
; name table map		;
;-------------------------------;
				;
n$asys::.word	n$asys,n$asys	;system name table
n$asym::.word	n$asym,n$asym,-1,0 ;system mutex
				;
n$agrp::.word	n$agrp,n$agrp	;group name tables
n$agrm::.word	n$agrm,n$agrm,-1,0 ;group mutex
				;
;-------------------------------;
; feature map			;
;-------------------------------;
				;
f$efes::.word	crfes.		;number of features
f$emap::.blkw	crfes.		;feature map
				;
;-------------------------------;
; byte/word bit map		;
;-------------------------------;

b$ymap::.byte	1,2,4,10,20,40,100,200
w$omap::.word	1,2,4,10,20,40,100,200
	.word	400,1000,2000,4000,10000
	.word	20000,40000,100000
.sbttl	scheduler

;-------------------------------;
; scheduler			;
;-------------------------------;
s$csta::.word	stdor$!sthol$	;scheduler state (held during build)
s$cprc::.word	0		;current process - pcr address
s$cpnd::.word	s$cp31		;highest priority pending
				;default priorities
s$cdba::.byte	scpba.		;default batch priority
s$cdin::.byte	scpin.		;default interactive priority
s$cdtm::.byte	scpio.		;default timer priority
s$cdio::.byte	scpio.		;default i/o priority
s$cdto::.byte	scpto.		;default terminal output priority
s$cdti::.byte	scpti.		;default terminal input priority

.if ne 0
.macro 	queues c d e f g h i j	;define queues
s$cp'c::.word s$cp'c,s$cp'c
.iif nb <d>,queues d e f g h i j 
.endm
.endc ;4

$=1200				;queues cover overlay handler
				;
.macro 	queues c d e f g h i j	;define queues
s$cp'c==$			;next queue
$=$+4				;skip the queue
.iif nb <d>,queues d e f g h i j 
.endm

s$cqbe==$			;beginning of queues
				;s$cp00 used as base addres
queues	00 01 02 03 04 05 06 07	;
queues	08 09 10 11 12 13 14 15	;
queues	16 17 18 19 20 21 22 23	;
queues	24 25 26 27 28 29 30 31	;
s$cqen==$			;end of queues
				;
s$cpbg==s$cp00			;00 = background
				;01 = low priority batch
s$cpba==s$cp02			;02 = batch
				;03 = low priority interactive
s$cpin==s$cp04			;04 = interactive
s$cpio==s$cp09 			;09 = i/o & timer
s$cpto==s$cp10			;10 = terminal output
s$cpti==s$cp11			;11 = terminal input
s$cpsi==s$cp11			;11 = kernel signal
s$cpuv==s$cp13			;15 = user vector
s$cprt==s$cp16			;16 = real-time
				;31 = last
.sbttl	high-speed ring, fork, time, system, spool

t$bfir::.word	0		;first tb in tb chain (from build)
s$ypol::.word	0		;polling process pcr (see dcl:poll)
s$yrea::.word	0		;address of realtime kernel intercept
				;
;-------------------------------;
; kernel bypasses		;
;-------------------------------;
				;
b$yimg::.word	0		;image activate - unused
b$yacp::.word	0		;acp call - r0 -> acp entry point
b$yclo::.word	0		;close file
b$ytrn::.word	0		;i/o transfer - unused
b$ygvl::.word	0		;get value
b$ycli::.word	0		;cli get command - unused
b$ymnt::.word	0		;mount device - r0 = vid
b$ydsm::.word	0		;dismount device - r0 = vid
b$ympp::.word	0		;mpp dispatch
b$yacd::.word	0		;acp dispatch - tsx
b$ybio::.word	0		;before i/o
b$ypio::.word	0		;past i/o - temporary used by rename !
.if ne rst$c
	.blkw	16.		;16 more bypasses
.endc ;5
				;
;-------------------------------;
; high-speed terminal input	;
;-------------------------------;
				;
h$sget::.word	h$sbot		;get pointer
h$sput::.word	h$sbot		;put pointer
h$scnt::.word	-1		;counting semaphore
h$sfrk::.word	0		;fk.suc
	.word	te$del		;fk.pc	terminal fork
	.word	0		;fk.r5
	.word	0		;fk.r4
				;
;-------------------------------;
; fork				;
;-------------------------------;
				;
f$kusp::.word	0		;saved user sp
f$kcqe::.word	0		;current queue element
f$klqe::.word	f$kcqe		;last queue element
				;
;-------------------------------;
; time				;
;-------------------------------;
				;bu$tim/dcl patch next three for 60 herz
t$ih24::.word	ti50h.		;+ number of high-order ticks in day
t$il24::.word	ti50l.		;! number of low order ticks
t$ifre::.word	50.		;! clock frequency
				;!
t$ihod::.word	0		;! high order delta time
t$ilod::.word	0		;! low order delta time
t$idat::.word	0		;! date in rt-11 format
.if ne rst$c
t$iera::.word	0		;! era
t$izon::.word	0		;! zone etc
.endc
				;!
t$ibhi::.word	0		;! high-order boot time
t$iblo::.word	0		;! low-order boot time
t$ibda::.word	0		;+ boot date
.if ne rst$c
t$iber::.word	0		;+ boot date era
t$ibzn::.word	0		;+ boot zone
.endc
				;
s$ynid::.word	0		;node id
s$ynod::.rad50	/      /	;node name
				;
s$ycpu::			;(old name)
t$isch::.word	0		;scheduler high - idle time
t$iscl::.word	0		;scheduler low
t$iinh::.word	0		;interrupt high - interrupt stack time
t$iinl::.word	0		;interrupt low
				;
t$ifrk::.word	0		;fk.suc
	.word	ti$del		;fk.pc - routine
t$istb::.word	stbdat		;fk.r5 - unused - used to hold stb date	
t$ique::.word	0		;fk.r4 - unused - holds timer queue
				;
;-------------------------------;
; system 			;
;-------------------------------;
				;
s$ygrp::.word	crgrp.		;system group limit
s$yver::.byte	crsyv.		;system version
s$yupd::.byte	crsyu.		;system update
				;
s$yiop::.word	0		;system iopage number
s$ybug::.word	0		;address of system debugger (kve)
				;
;-------------------------------;
; spooler database		;
;-------------------------------;
				;
s$prec::.word	0		;spooler record
s$pspp::.word	0		;pipeline spooler record

;-------------------------------;
; dynamic elements		;
;-------------------------------;
				;
.if ne rst$c
s$ytpc::.byte	0		;tp count
s$ytbc::.byte	0		;tb count
s$yadc::.byte	0		;ad count
	.byte	0		;
.endc
.sbttl	resident monitor table

;	Kernel RT-11 RMON table
;
;	Used by handlers and maybe real-time servers.
;	Kernel pname and entry point tables in unused channel area.
;	Only locations used by RUST/XM are defined as globals.
;
;	j$bsys -> r$mmon
;
;	e16lst		not supported
;	emtrtn		not supported
;	synch		not supported

r$mmon::jmp	@#in$int	;[sic] r$mmon must be 137 (i.e. jmp @#)
				;csw area contains data
r$mdkl::.rad50	/dk /		;dk logical name
r$msyl::.rad50	/sy /		;sy logical name
r$mpnm::.blkw	31.		;kernel pname table - required by some
r$ment::.blkw	31.		;kernel entry point table
	.word	-1		;end of entry point table
	.word	0		;free
r$mrsz::.word	0		;r$mrsz - ramsz	v5.2
r$mmpd:	.word	0,r$mmpd	;r$mmpt - memptr
r$mxfo:	.word	r$rxfl-r$mmon	;r$mxfo - r$rxfl - xm free lists
r$mtcd:	.word	0		;r$mtcf - tcfig
	stack	pc ps		;
rm$mtp:	movb	sp.ps(sp),@#ps	;move to ps
	pop	(sp)		;remove ps value
	return			;
rm$mfp:	mov	(sp),-(sp)	;make space
	mov	@#ps,sp.ps(sp)	;move from ps
r$mrts::return			;
r$midd:	.ascii	/SY0:/		;246 - $inddv
	.word	0		;252 +
	.word	0		;254 +
	assume <.-r$mmon> eq 256;	end of CSW area
r$mblk:	.word	0		;256 - current directory segment
r$mchk:	.word	0		;260 - current directory device
r$mdat::.word	0		;262 + date - used by drivers
r$mdfl:	.word	0		;264 - directory operation flag
r$musr: .word	r$mmon-2	;266 - usr address
r$mqco: .word	io$don		;270 + qcomp address
r$mspu::.word	0		;272 + special device usr errors
s$yuni==.+1			;      system device unit
r$msyu::.word	0		;274 + system device unit (in high byte)
r$msyv::.byte	5		;276 + RT-11 system version
r$msup::.byte	4		;277 + RT-11 system update
r$mcfg::.word	0		;300 + system configuration flags (build)
r$mscr:	.word	0		;302 - GT control block address
r$mtks::.word	177560		;304 + console addresses
r$mtkb::.word	177562		;306 +
r$mtps::.word	177564		;310 +
r$mtpb::.word	177566		;312 +
;;;ddn::			;314 * RTX DDn: catch-all device
r$mmax:	.word	-1		;314 - maximum block size (unused)
r$me16: .word	0		;316 - emt 16 group offset (unused)
r$mtim: .word	0,0		;320 - sj time of day (high,low) (unused)
r$msyn: .word	io$syn		;324 ? .synch goto
				;
r$mlmp:				;      lowmap used for kernel stuff
s$ycra::.word	0		;326 + crash reason
s$ycvc::.word	60		;330 + console vector
s$ykc0::.word	kccon$!kcrem$	;332 + kernel control 0 - console & remote
s$ywal::.word			;334 + write-anything word
d$hhan::.word	dh$fkp		;336 - DHV support module		?remove
	assume <.-r$mmon> eq 340;
s$ywsd::.word	128.		;340 - Default working set - public
s$ynet::.word	0		;342 - NF server page number
v$mdsz::.word	0		;344 + VM device size
s$ysti::.word	as$sti		;346 + Stray terminal interrupt		;RXM
r$mdrp:	.word	d$rpnm		;350   Dummy $rmon pname entry
	assume <.-r$mmon> eq 352;	end of lowmap
				;
r$musl:	.word	0		;352 - usr location
r$mgtv: .word	0		;354 - gt shift out vector
s$ylfc::			;356 + login fail count
r$merc:	.word	0		;356 - error count from cusps
r$mmtp:	br	rm$mtp		;360 * move to ps
r$mmfp:	br	rm$mfp		;362 * move from ps
r$msyi::.word	desyi.		;364 + system device index
r$mcfs: .word	0		;366 - command file status - unused
r$mcf2::.word	0		;370 + extension config word
r$msyg::.word	sgfpu$		;372 + sysgen options
r$musa:	.word	2		;374 * size of usr in bytes - constant
r$merl:	.byte	esdef$		;376 - image abort level
r$mcfn:	.byte	16.		;377 - command file nesting level
r$memr:	.word	sy$fex-r$mmon	;400 - emt return path - force exit
r$mfrk:	.word	fk$enq-r$mmon	;402 * offset to fork processor
r$mpnp:	.word	r$mpnm-r$mmon	;404 * dummy pname table
r$mmnm:	.rad50	/RUSTX /	;406 * monitor name
r$msuf:	.rad50	/  X/		;412 * handler suffix
r$mera::			;414 + time era extension (reuses r$mdcn)
r$mdcn:	.word	0		;414 - decnet - spool
r$minx: .byte	0		;416 - ind extension
r$mins: .byte	0		;417 - ind status
r$mmes::.word	0		;420 + memory size in pages (see create)
r$mclg::.word	0		;422 - new usage
r$mtcf::.word	r$mtcd		;424 + pointer to ttcnfg
r$midv::.word	r$midd		;426 + pointer to ind dev name
r$mmpt::.word	r$mmpd-r$mmon	;430 + offset to memory map
r$mp1x:	.word	io$p1x		;432 + par1 externalisation routine
r$mcal::.word	0		;434 r rad50 catch-all device (xm trplst)
r$mgvc::.word	sy$ert		;436 + getvec - v5.1 - sec, return
r$mdwt:	.word	0		;440 + dwtype - v5.1
	assume <.-r$mmon> eq 442;442 + v5.1 & v5.2 end

;	note - DCS:SHOMOR assumes S$YTPC is 18. bytes from
;	r$mgvc - change with new STB.

r$mtrs:	.word	0		;442 - trpset
r$mnul:	.word	0		;444 - $nuljb
r$miml:	.word	0		;446 - imploc
r$mkmn:	.word	0		;450 - kmonin
r$mpgd:	.byte	0,0		;452 - progdf - ked,f4
r$mwld:	.byte	1		;454 - wildef - wildcards
r$mjbs:	.byte	0		;455 - ub slot count (v5.5)
r$mv54:				;v54 end
	assume <.-r$mmon> eq rm.v54
.if eq V4
	.blkw	1		;free 
.iff
r$mb55:;.blkw	1+10		;kco.mac moved to make space
r$mqhk:	.word	r$mrts	;1	;456 - $qhook - pointer to rmon hook for ub
s$ytp3::			;460 - V3 s$ytpc etc
r$mhub:	.word	h$brcc	;2 many	;460 - $h2ub  - dummy ub stubs
r$mhca:	.word	h$brcs	;3	;462 - $h2ca
r$mrpc:	.word	h$brcs	;4	;464 - $rtspc
r$mcf3:	.word	0	;5 some	;466 - $cnfg3 - configuration word 3
r$mt2r:	.word	0	;6	;470 - $tt2rm
r$mrco:	.word	r$mrts	;6	;472 - $rm2co
r$mdec:	.word	0	;6	;474 - $decnt
r$mxps:	.word	h$brcc	;7 TT:	;476 - $xttps - RT-11 TT.SYS only
r$mxpb:	.word	h$brcc	;8 TT:	;500 - $xttpb
r$msl2:	.byte	0	;9	;502 - $slot2 - value of $slot*2 (byte)
r$mf01:	.byte	0	;	;503 - unused
.if ne rst$c
r$msps:.word	0	;10	;504 - $spsiz - special device file size
r$mv55:				;v55 end
	assume <.-r$mmon> eq rm.v55
.endc
;	assume . eq <r$mv54 + <11.*2>>	;V3/V4 STB alignment	;RXM
	.blkw	15.		; extension space
k$demu::.word	0		; emulation flags--see KDV--temporary
.endc

.if eq rst$c
s$ytp4:				;514 - V4 tpc counts (v4 hacks in KMON)
s$ytpc::.byte	0		;tp count
s$ytbc::.byte	0		;tb count
s$yadc::.byte	0		;ad count
	.byte	0		;
.endc

;	Dummy transfer vectors for UB and TT.
;	RXM: from kdv

h$brcc::nop		; ub.get
	nop		; ub.all
	clc		; ub.rel
	return		; c=0
h$brcs::nop
	nop	
	sec
	return		; c=1

.end	start
