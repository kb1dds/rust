.title	bseng - block stream engine
.include "lib:crt.mac"
$emdef
fbdef$
smini$

;	This is the Rider/C buffered I/O enginei (fread/getc/putc etc.)
;
;	Block-at-a-time binary stream package.
;
;	o  Block devices only - sequential devices never get here
;	o  Blocks past EOF are pre-cleared  -- no padding required
;	o  Physical file size is not recorded in the file block.
;	   Physical EOF is detected by I/O errors. 
;	o  Byte size of result file not currently handled.
;
;	bs$opn	init stream
;	bs$get	get next byte
;	bs$put	put next byte
;	bs$flu	flush stream
;	bs$pos	get stream position
;	bs$see	set stream position
;
;	fb$buf	allocate buffer
;	fb$rea	read buffer
;	fb$wri	write buffer
;
; In:	r0 =	byte, as appropriate
;	r4 ->	file block
;
; Out:	r0	byte, EOF, as appropriate
;	r1	burnt

meta	<fbman$ opr,bra><jsr r0,fb$man><.word opr><br bra>
code	bs$opn - prepare for I/O 

bs$opn::bic	#fbBUF$,(r4)		; buffer invalid
	clr	fb.blk(r4)		; beginning of file
	clr	fb.ebl(r4)		; assume empty file
	clr	fb.ebt(r4)		;
	clr	fb.byt(r4)		;
;sic]	bis	#fbEOF$,(r4)		; new files are empty
	bpsw	#fbNEW$,(r4),10$	; it's a new file
;sic]	bic	#fbEOF$,(r4)		; old file
	mov	fb.len(r4),fb.ebl(r4)	; old files have a read limit
;sic]	clr	fb.ebt(r4)		;
10$:	return

code	bs$get - get next byte

bs$ipt:	call	bs$buf			; try again
bs$get::bpsw	#fbEOF$!fbMAN$,(r4),20$ ; EOF or manual
	bpcw	#fbBUF$,(r4),bs$ipt	; need a buffer
	mov	fb.byt(r4),r1		; byte index in block
	bhiw	r1,#511.,bs$ipt		; flush block
	bnew	fb.blk(r4),fb.ebl(r4),10$ ; not in end block
	blow	r1,fb.ebt(r4),10$	; not at end of file
	bis	#fbEOF$,(r4)		; just hit EOF			EOF=1
	jmp	bs$eof			;
10$:	inc	fb.byt(r4)		; skip it
	add	fb.buf(r4),r1		; form address
	clr	r0			; avoid sign extend (-1 = EOF)
	bisb	(r1),r0			; mousey see, mousey do
	return				;
20$:	bpcw	#fbMAN$,(r4),bs$eof	; not manual
	mov	#fbGET.,r1		; manual code
bs$cal:	psh	r4			; file plex
	psh	r1			; operation
	psh	r0			; value
	call	@fb.man(r4)		; call manual routine
	add	#6,sp			;
	return

code	bs$put - put next byte

bs$put::bpsw	#fbEOF$!fbRON$!fbMAN$,(r4),40$ ; EOF, RON or manual
	bpsw	#fbBUF$,(r4),10$	; have buffer
	call	bs$buf			;
10$:	mov	fb.byt(r4),r1		; byte index in block
	add	fb.buf(r4),r1		;
	movb	r0,(r1)
	bis	#fbFLU$!fbWRI$,(r4)	; one great flush...
	inc	fb.byt(r4)		;
	bnew	fb.blk(r4),fb.ebl(r4),20$ ; not in end block
	blow	fb.byt(r4),fb.ebt(r4),20$; not at end of file
	inc	fb.ebt(r4)		; move file out
20$:	blow	fb.byt(r4),#512.,30$	; not end of this block
	call	bs$buf			;
	blow	fb.blk(r4),fb.ebl(r4),30$
	mov	fb.blk(r4),fb.ebl(r4)
	clr	fb.ebt(r4)		;
30$:	clr	r0			; no error
	return
40$:	bpcw	#fbMAN$,(r4),bs$eof	; not manual
	mov	#fbPUT.,r1		; operation
	br	bs$cal			;
code	bs$buf - update buffer

;	Must clear BUF or return ERR or EOF

bs$buf:	psh	r0			; save byte
	call	fb$buf			; make sure we have a buffer
	call	bs$flu			; flush				FLU=?
	bcs	50$			; output error
10$:	bnew	fb.byt(r4),#512.,20$	; not at block transition	
	inc	fb.blk(r4)		; next block			INC
	clr	fb.byt(r4)		;
20$:	call	fb$clr			; clear buffer
	blow	fb.blk(r4),fb.ebl(r4),30$ ; before EOF - read block
	bhi	40$			; past EOF - don't read
	beqw	fb.ebt(r4),40$		; nothing in block to read
30$:	call	fb$rea			; read it
	bcs	50$			; some error			ERR=1
40$:	bis	#fbBUF$,(r4)		; buffer is valid		BUF=1
50$:	pop	r0			;
	return

code	bs$flu - flush buffer

bs$flu::clc				; assume all clear
	bpsw	#fbERR$,(r4),10$	; had channel error
	bpcw	#fbFLU$,(r4),10$	; need flushing?
	bic	#fbFLU$,(r4)		; yep - once-only
	bpsw	#fbMAN$,(r4),20$	; manual flush
	call	fb$wri			; write buffer
10$:	return
20$:	mov	#fbFLU.,r1		; operation
	br	bs$cal			; call them

code	bs$eof - return end-of-file

bs$eof:	bis	#fbEOF$,(r4)		; set EOF
	mov	#EOF,r0			; return EOF
	return
.sbttl	bs$see - seek

; In:	r4	file plex
;	r0/r1 	block/byte
; Out:	c=1	I/O error
;
;????	Problems seeking right up close to EOF
;
;	o Called by fi_see() and rt_see().
;
;	o fb.len is set to ^o177777 for non-file structured access.
;	  Thus no  test is required at "bhiw r0,fb.ebl(r4),20$" below.
;
;	o FB$WRI catches invalid attempts to write-extend (sets EOF/ERR).
;	  Well, sort of -- you can in fact creep into the block past EOF
;	  since that doesn't require a write.

bs$see::bic	#fbEOF$!fbERR$,(r4)	; clear EOF		  ERR=0	EOF=0
	bpsw	#fbTER$,(r4),90$	; terminals seek nothing
	beqw	r0,fb.blk(r4),60$	; current block is easy
	bpcw	#fbBUF$,(r4),10$	; invalid buffer
	call	bs$flu			; flush whatever
	bcs	90$			; oops whatever
10$:	call	fb$buf			; need a buffer for this
	call	fb$clr			; clear buffer
	bhiw	r0,fb.ebl(r4),20$	; extend the file
	mov	r0,fb.blk(r4)		; setup block
	call	fb$rea			; read earlier block
	bcs	90$			; yuk
	bis	#fbBUF$,(r4)		; set buffer valid
	br	80$			; done
					;
20$:	bpcw	#fbnew$,(r4),90$	; not a new file
	mov	fb.ebl(r4),fb.blk(r4)	; move to the end
	bnew	fb.ebt(r4),50$		; that block has been written
30$:	call	fb$wri			; write this block
	bcs	90$			; will nothing work here?
50$:	inc	fb.blk(r4)		;
	blow	fb.blk(r4),r0,30$	; up to the one we want?
	call	fb$clr			; clear the buffer
	br	70$			;
60$:	blow	r2,fb.ebt(r4),80$	; below end byte
70$:	mov	r1,fb.ebt(r4)		; setup end of file
80$:	mov	r1,fb.byt(r4)		;
	tst	(pc)+			;
90$:	sec
	return

.end
