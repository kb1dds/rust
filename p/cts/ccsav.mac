;???;	CCSAV - CC$SAV etc are redundant; never called
sav$c=0
.title	ccsav - save/restore, startup, rundown
.include "lib:crt.mac"
$jbdef
$jsdef
smini$

;	RUST version of CLS:CSV.MAC
;
; If C$PMTR/C$AUTO are undefined, just define them		;05+
;
.iif	ndf	C$PMTR,	C$PMTR	=  4	;formal[n] @ c$pmtr+<n*2>(r5)
.iif	ndf	C$AUTO,	C$AUTO	= -10	;local[n]  @ c$auto-<n*2>(r5)
	.globl	C$PMTR, C$AUTO
.iif	ne	C$PMTR-4,	.error	Bad definition of C$PMTR
.iif	ne	C$AUTO+10,	.error	Bad definition of C$AUTO

;	Define a weak pointer to the image usage string
;	Used by SHOW PROGRAM etc to display usage
;	May be followed by a HELP data structure

.asect	
	assume j$biai eq <^o140>
	. = j$biai
	.rad50	/inf/		; guard word
	.weak	imAinf		; zero if not defined
	.word	imAinf		; pointer info string

cccod$
;
; save R4-R2 and make a one-word temp slot on the stack.
;
C$SAV::								;06
CSV$::	MOV	R5, R1
	MOV	SP, R5
	MOV	R4, -(SP)
	MOV	R3, -(SP)
	MOV	R2, -(SP)
	CLR	-(SP)		;No profile area
	JSR	PC,(R1)		;TST -(SP) JMP (R1)		;04
;
; pop R2-R4 and restore stack linkage registers.
;
C$RET::								;06
CRET$::
	MOV	R5, R2						;03 +
	MOV	-(R2), R4
	MOV	-(R2), R3
	MOV	-(R2), R2					;03 -
C$RETS::			;Funny Whitesmith's entry	;06
	MOV	R5, SP
	MOV	(SP)+, R5
	RTS	PC

;	RUST CRT save/restore
;
;	o R5 is not used by CRT MACRO routines
;	  CRT MACRO routines use SP to access frame arguments & locals
;	  CALL macros adjust for stack depth for all xxx(sp) references
;
;	o cc$sav is called to save r2, r3 and r4
;	o cc$s23 is called to save r2 and r3
;	o Single register saves are handled locally
;	o SM (structured macro) automates these calls
;
;	jsr	r4,cc$sav	save r2,r3,r4


.if ne sav$c
cc$sav::pshs	<r3,r2>			;
	stack	r2,r3,r4,ret,a1,a2	; our stack
	call	(r4)			; call them back
;	stack	res,r2,r3,r4,ret,a1,a2	; (callers stack: res is us) 
	stack	r2,r3,r4,ret,a1,a2	; our stack
	pops	<r2,r3,r4>		;
cc$nop::return				; nop routine

;	jsr	r3,cc$s23	save r2,r3

cc$s23::psh	r2			; save r2
	stack	r2,r3,ret,a1,a2		;
	call	(r3)			; call back
	pops	<r2,r3>			; restore
	return				;
.endc
.sbttl	cc$sta - startup/rundown

;	STARTUP:
;
;	Start sequence for a RUST CRT program:
;
;ccsav:	.end	cc$sta
;
;cc$sta:call	start
;cc$exi:;see below
;
;myapp:	int () start
;
;	RUNDOWN:
;
;	c$cexi points to the final exit routine
;
;	Exit routines should look like this:
;
;	m$yexi:	.word	0			; next exit routine
;
;	my$ini:	mov	c$cexi,m$yexi		; once-only code
;		mov	#my$exi,c$cexi		; chain us in
;
;	my$exi:	...
;		jmp	@m$yexi

	.asect	
	. = j$bjsw
	.word	jsttl$!jsusr$		; lower case, usr swap
ccdat$
c$cexi::.word	cc$qui			; final step
cccod$
	nop				; for RT-11 reenter command
cc$sta::.serr				; default to this app EPT
	.globl	start			; global entry point
	call	start			; call the start routine
cc$exi::jmp	@c$cexi			; do the exit chain
cc.qui::				; quit program (C label)
cc$qui::mov	sp,r0			; final act(MACRO label)
	.exit				;

;	.END CC$STA is placed here because CC$SAV guarantees the module will be referenced
;	CC$STA: transfers control to START: in CCINI

.end	cc$sta
