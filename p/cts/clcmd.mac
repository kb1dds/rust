.title	clcmd - get command with prompt
.include "lib:crt.mac"
$jbdef
$jsdef
smini$

ccdat$
c$lccl:	.word	1		; once-only flag
c$lsin:	.word	0		; single line command
c$lprm:	.byte	^o200,0		; null prompt
cccod$

code	cl_cmd (prm:*char, buf:*char) void

;	o  Get command line or initial CCL line
;	o  Command file input 
;	o  Only accept initial CCL command if no prompt
;	   Windows library is compatible
;
;	o  Windows version accepts a null buffer
;
;	^C Program may be terminated
; ???	^Z Should return EOF - but somewhere else

cl.sin::mov	c$lsin,r0	; single-line command
	return			; fail=>none, find=>present

co.prm::			; limit not used
cl.cmx::mov	#jsGTL$,r0	; avoid command files
	clr	j$bcct		; avoid CCL
	br	cl$cmd		;
cl.cmd::clr	r0		; command files okay
	fall	cl$cmd
local
  proc	cl$cmd	<r2,r3>		;
	p1	prm,r2		;
	p2	buf,r1		;
;	p3	lim,		; co_prm limit not implemented
	mov	r0,r3		; command file flag
	clrb	(r1)		; assume no command
	mov	r2,r0		; check for prompt
	bis	j$bcct,r0	; is a CCL command coming?
	beq	40$		; no command coming
				;
	psh	r1		; sp+6 = buf
	psh	#1		; sp+4 = 1
	psh	r2		; sp+2 = prm
	bne	10$		; got a prompt
	mov	#c$lprm,r2	; use null prompt
10$:	clr	-(sp)		; sp+0 = 0
20$:	tstb	(r2)+		; dratted terminator
	bne	20$		; find the end of it
	movb	#^o200,-(r2)	; use RT-11 terminator
	bis	r3,@#j$bjsw	; setup special mode
	emt	^o345		; .gtlin buf,prm
	bic	r3,@#j$bjsw	; restore special mode
	clrb	(r2)		; restore terminator
				;
	asr	c$lccl		; once only flag because stack
	bcc	40$		; may overwrite ccl area
	mov	#j$bcct,r0	; check CCL command
	mov	(r0)+,r2	; r2 = CCL count
	cmpb	r2,#1		; 0/1 => no command
	blos	40$		; no CCL command
	inc	c$lsin		; remember single line command
	assume	j$bcst eq j$bcct+2
30$:	movb	(r0)+,(r1)+	; move in command
	dec	r2		;
	bne	30$		;
	clrb	(r1)		; terminate it
40$:	end			; r0 != 0

.end
