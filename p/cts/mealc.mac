;	needs rewrite to begin with the last free entry
;	and to handle buffer wrapping for end test
.title	mealc - me_alc/me_acc - allocate memory
.include "lib:crt.mac"
$esdef
$jbdef
smini$

ccdat$
meVmax::.word	0			; maximum entry size
m$esig::.word	0			; memory signal routine
ccstr$
m$eins::.asciz	/F-Insufficient dynamic memory/
m$ecor::.asciz	/F-Dynamic memory corrupted/
cccod$

	.enabl	lsb
	stack	ret,siz
me.alc::call	me$alc			; me.acc calls here
	bnew	r0,100$			; fine
	mov	m$esig,r0		; got a signal routine?
	beq	5$			; nope - just return
	call	(r0)			; call signal routine
	bnew	r0,me.alc		; try again
5$:	call	im.rep #m$eins		; insufficient memory
					; doesn't return

;	me$alc can't be called directly from C source

	stack	r2,r3,r4,ret,usr,siz
me$alc::pshs	<r4,r3,r2>		; save a couple
	tst	m$ebas			; setup yet?
	bne	10$			; yep
	call	me.ini			; initialize it all
10$:	clr	meVmax			; calculate this again
	mov	sp.siz(sp),r3		; get the size
	add	#2+1,r3			; adjust up and even
	bcs	50$			; won't fit
	bic	#1,r3			; must be words
	mov	m$ebas,r1		; r1 -> first

;	memory walk

20$:	mov	#1,r2			; just a wee bit faster
	mov	m$elim,r4		; point at limit
30$:	cmp	r1,r4			; at limit?
	beq	50$			; exhausted
	bhi	40$			; buggered
	mov	r1,r0			; r0 -> current
	mov	(r0),r1			; r1 -> next or limit
	bit	r2,r1			; is this a free entry?
	bne	60$			; yep (otherwise r1 is even)
	cmp	r1,r0			; going backwards?
	bhi	30$			; nope
40$:	call	im.rep #m$ecor		; corrupted memory
50$:	clr	r0			; no memory available
	br	90$			;
					; neither call returns
;	reclaim adjacent empties
;
;	r0 -> current
;	r1 -> (next or limit)

60$:	bic	r2,r1			; remove empty flag
	cmp	r1,r0			; does next precede current?
	blos	40$			; yes - we're dead
	cmp	r1,r4			; at limit?
	bhi	40$			; corrupted
	beq	70$			; at limit
	bit	#1,(r1)			; is the next empty?
	beq	70$			; no
	mov	(r1),r1			; claim it instead
	mov	r1,(r0)			; in both places
	br	60$			; and try again

;	carve out space
;
;	r0 ->	free entry
;	r1 ->	next entry or limit

70$:	mov	r1,r2			; get a copy
	sub	r0,r2			; r2 = size + 2
	cmp	r2,meVmax		; got a new maximum size?
	blo	75$			; nope
	mov	r2,meVmax		; yep
					; already checked wrap
75$:	sub	r3,r2			; r1 = remainder
	bcs	20$			; too small
	beq	80$			; exact fit
	cmp	r2,#2			; would this be silly?
	beq	80$			; yes (skip one word entries)
	mov	r0,(r0)			; rework current 
	add	r3,(r0)			; setup new size
	mov	(r0),r1			; point to new next header
					; (r0 -> result)
	mov	r1,(r1)			; setup the base
	add	r2,(r1)			; carry remainder forward
	inc	(r1)			; flag it empty
80$:	bic	#1,(r0)+		; flag in use and point to it
90$:	pops	<r2,r3,r4>		; restore those
100$:	return
	.dsabl	lsb

.end
