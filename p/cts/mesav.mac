.title	mesav - me_sav - save/restore memory context
.include "lib:crt.mac"
smini$

;	This code has proven to be unreliable in practice
;	(However, it works well enough for VUP, apparently)
;
;	A better approach would be have an alternate memory
;	allocator which allocated downwards from memory top.
;	Temporary objects would be allocated downwards. When
;	temporary ojbects were freed there would be no gaps
;	in memory.
;
;	Or to have a secondary allocator that links segments
;	with an extra word following the me_alc pointer
;
;		xxPprv = 0	; init
;
;		adr = me_alc (siz + 1)
;		*adr++ = xxPprv
;		xxPcur = adr
;		end

map	me.val,,0		; meTctx
map	me.adr
map	me.chn

  proc	me.sav
	p1	ctx		;
	call	me.max		; get largest
	call	me.alc r0	; allocate it
	psh	r0		; save result address
	call	me.dlc r0	; deallocate it
	pop	r0		; get that back
	mov	ctx(sp),r1	;
	mov	-(r0),(r1)+	; save value
	mov	r0,(r1)		; and the address
  end

  proc	me.res
	p1	ctx,r0		; saved context
	mov	(r0)+,@(r0)+	; restore dynamic memory context
  end

.end

