.title	rtfat - RT-11 get/set file attributes interface
.include "lib:crt.mac"
$emdef
$ffdef
$rtdef
fbdef$
smini$
ccstr$
f$ainf:	.byte	eminf.,0
	.asciz	/Error accessing attributes [%s]/
cccod$

local
  proc	rt$fat	<r2 r3>
	p1	spc			; file specification
	p2	opr			; operation
	p3	off			; offset
	p4	get			; get value address
	p5	put			; set value address
	p6	msg			; error message
					;
	movb	off(sp),f$iiob+ff.off	; offset
	movb	opr(sp),f$iiob+ff.opr	; operation
					;
	mov	put(sp),r2		; got something to set?
	beq	20$			; nope
	mov	(r2),f$iiob+ff.val	; new value
20$:	call	fi$opr #f$bopr,spc(sp),msg(sp),#f$ainf,#f$iiob
	mov	r0,r1			; how'd that go?
	beq	30$			; ugly
	mov	f$bopr+fb.len,r1	; fine, return previous state
30$:	mov	get(sp),r2		; want result?
	beq	40$			; nope (default result is zero)
	mov	r1,(r2)			; store it
40$:
  end

.end
  proc	rt.fat	<r2>
??????
.title	rtinf - issue RT-11 get/set file info requests
.include "lib:crt.mac"

rt$inf::stack	ret, fil, cur, upd
	assume	ff.off eq 7		;
;sic]	psh	#offset			; offset
	stack	opr, ret, fil, cur, upd	;
	adcb	(sp)			; adjust opcode
	beq	10$			; not set
	movb	#ffMOV.,(sp)		;
	assume	ff.opr eq 6		;
	assume	ff.val eq 4		;
10$:	psh	sp.upd(sp)		;
	stack	upd, opr, ret, fil, cur	;
	assume	ff.fil eq 2		;

	psh	sp.fil(sp)		;
	stack	fil, upd, opr, ret, xxx, cur
	psh	#emINF.*256.		; emt code
	stack	emt, fil, upd, opr, ret, xxx, cur
	mov	sp,r0			;
	emt	^o375
	bcs	30$			;
	beqw	sp.cur(sp),30$		; don't want previous
	mov	r0,@sp.cur(sp)		; return previous value
20$:	mov	(pc)+,r0		; fine
30$:	clr	r0			;
	add	#sp.ret,sp		;
	return

.end
.title	rtinf - issue RT-11 get/set file info requests
.include "lib:crt.mac"
$emdef
$ffdef
$dsdef
$rtdef
fbdef$
smini$

code	rt_gfd (fil, &val) int		; get file date
code	rt_gft (fil, &val) int		; get file time
code	rt_gfl (fil, &val) int		; get file length
code	rt_sfd (fil, &val, int) int	; set file date
code	rt_sft (fil, &val, int) int	; set file time
code	rt_sfl (fil, &val, int) int	; set file length

;	opr=0	read
;	opr=1	write
;
; Out	r0	0/1 fail/fine
;	fb.cnt	R0 result

rt.gfd::tst	(pc)+
rt.sfd::sec	
	mov	#rt.dat*256.,r0
	br	rt$inf

rt.gft::tst	(pc)+
rt.sft::sec	
	mov	#rt.tim*256.,r0
	br	rt$inf

rt.gfl::tst	(pc)+
rt.sfl::sec	
	mov	#rt.len*256.,r0
	br	rt$inf

rt$inf::stack	ret, fil, cur, upd
	assume	ff.off eq 7		;
	psh	r0			; offset
	stack	opr, ret, fil, cur, upd	;
	adc	(sp)			; adjust opcode
	beq	10$			; not set
	movb	#ffMOV.,(sp)		;
	assume	ff.opr eq 6		;
	assume	ff.val eq 4		;
10$:	psh	sp.upd(sp)		;
	stack	upd, opr, ret, fil, cur	;
	assume	ff.fil eq 2		;

	psh	sp.fil(sp)		;
	stack	fil, upd, opr, ret, xxx, cur
	psh	#emINF.*256.		; emt code
	stack	emt, fil, upd, opr, ret, xxx, cur
	mov	sp,r0			;
	emt	^o375
	bcs	30$			;
	beqw	sp.cur(sp),30$		; don't want previous
	mov	r0,@sp.cur(sp)		; return previous value
20$:	mov	(pc)+,r0		; fine
30$:	clr	r0			;
	add	#sp.ret,sp		;
	return

.end
