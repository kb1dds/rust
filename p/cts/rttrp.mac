.title	rttrp - trap catcher for non-system code
.include "lib:crt.mac"
$psdef
$vedef
smini$
ccdat$
t$rvec::.word	0			; associated vector
t$rast::.word	0			; optional trap ast
;
t$rbus::.word	0			; saved bus trap
t$rcpu:	.word	0			; saved cpu trap
t$rmmu:	.word	0			; saved mmu trap
cccod$

;	catch bus/cpu/MMU traps
;
;	call	tr$cat
;	tst	@#1
;	bvs	10$			; some trap
;  or:	bcs	10$
;	...
;
;	mov	#10$,t$rast		; setup ast
;	tst	@#1			; trigger ast
;	HALT				; shouldn't get here

;
; 10$:	cmp	t$rvec,#v$ebus		; bus error
;	beq	...			;
;
;	...
;	call	tr$res
;	return

tr$cat::bnew	t$rbus,10$		; once only
	mov	@#v$ebus,t$rbus		; save them
	mov	@#v$ecpu,t$rcpu		;
	mov	@#v$emmu,t$rmmu		;
10$:	mov	#tr$bus,@#v$ebus	; catch bus traps
	mov	#tr$cpu,@#v$ecpu	; catch cpu traps
	mov	#tr$mmu,@#v$emmu	; catch cpu traps
	return

tr$res::mov	t$rbus,@#v$ebus		; restore bus trap
	mov	t$rcpu,@#v$ecpu		; restore cpu trap
	mov	t$rmmu,@#v$emmu		; restore mmu trap
	return

tr$bus:	mov	#v$ebus,t$rvec		; save vector
	br	tr$trp			; join common
tr$cpu:	mov	#v$ecpu,t$rvec		; ditto
	br	tr$trp			;
tr$mmu:	mov	#v$emmu,t$rvec		; ditto
	fall	tr$trp			;

	stack	pc,psw
tr$trp:	tst	t$rast			; got a user ast?
	bne	10$			; yes - use it instead
	bis	#vbit!cbit,sp.psw(sp)	; set C-bit and V-bit
	rti				;
10$:	jmp	@t$rast			; let them do it

.end
