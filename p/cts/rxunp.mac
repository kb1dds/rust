.title	rxunp - unpack rad50 word
.include "lib:crt.mac"
smini$

ccdat$
	.word	0,1,40
r$xunp:	.word	40*40		; divisors in reverse
ccstr$
r$xfil::.ascii	/$%*?/		; file extension set
;$xmac:	.ascii	/$.??/		; macro
;$xdec:	.ascii	/~_??/		; decus C
cccod$

code	rx_unp (wrd:WORD, str:*char) *char

; In:	wrd =	rad50 word to unpack
;	str ->	output area
;
; Out:	r0 ->	past string

  proc	rx.unp	<r2>
	p1	wrd,r1
	p2	str,r0
	mov	#r$xfil,r2	; use file set
	call	rx$unp
  end

code	rx$unp - unpack one rad50 word

; In:	r0 ->	string
;	r1 =	word to unpack
;	r2 ->	extension set
;
; Out:	r0 ->	past string

rx$unp::pshs	<r4,r3>
	mov	#r$xunp,r3	; get the divisors
10$:	mov	#-1,r4		; init the result
20$:	inc	r4		; next character
	sub	(r3),r1		; this it?
	bcc	20$		; nope
	add	(r3),r1		; bump back
	beqw	r4,60$		; a null
	blow	r4,#40,21$	; not excessive
	mov	#'?,r4		; too high
	br	50$		;
21$:	sub	#27,r4		; alpha?
	bmi	30$		; yep
	bhiw	r4,#2,40$	; numeric
	add	r2,r4		; add base
	movb	(r4),r4		; get extension character
	br	50$		;
25$:	beqw	r1,60$		; not an embedded null
	movb	3(r2),r4	; embedded null
	br	50$		; usually '?'
30$:	add	#46,r4		;
40$:	add	#18+27,r4	;
50$:	movb	r4,(r0)+	; store it
60$:	tst	-(r3)		;any more?
	bne	10$		;yep
	clrb	(r0)		; terminate it
	pops	<r3,r4>		;
	return

.end
