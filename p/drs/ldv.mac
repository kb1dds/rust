;nfser only sets per for loo
;	Test on real PDP-11 and on NF: stuff on VM:
;	Implement /READ_ONLY and REMOUNT
.if ne 0 ; embed rider
file	ld
include	rid:crt
include	rid:fbdef
include	rid:fidef
include	rid:imdef
include	rid:rtcla
include	rid:rtchn
include	rid:rtcsi
include	rid:rtdev
include rid:stdef

;	%build
;	macro drs:ldv.mac/object:drb:ldv
;	rider drs:ldv.mac/object:drb:ld
;	link drb:(ldv,ld)/ma:drb:ldv/exe:drb:ldv.sys,lib:crt/nobi/bou:1000
;	ldsav
;	set program/jsw=1000 drb:ldv.sys
;	%end

	csi    : csTcsi = {0}
	cuVsho : WORD
	cuVhlp : WORD
	cuVdis : WORD
	cuAdev : [16] char
	cuAfil : [16] char

  type	ldTent
  is	Vgua : WORD		; .rad50 /LD /
	Vvid : BYTE		; vid (slot, unit)
	Vuni : BYTE		; unit
	Voff : WORD		; offset into device, file id or cab address
	Vsiz : WORD		; device size
	Anam : [4] WORD		; generic device name - zero => not mounted
  end
	ldGUA  := 045640	; .rad50 /LD /
	ldTWC  := 8 		; LD: transfer word count
	cuAsav : [512] char+	; saved names

  type	cuTctx
  is	Hdev : * FILE		; device file handle
	Pdev : * char		; device ascii
	Adev : [64] char	; device defaulted
	Pvol : * char		; volume file spec
	Adis : [64] char	; display volume file spec
	Pspc : * char		; permanent unit spec for unit
	Plog : * char		; logical name
	Psav : * char		; cuAsav
	Vuni : int		; current LD: unit
  end

	cu_dis : (*cuTctx) int
	cu_mnt : (*cuTctx) int
	cu_sho : (*cuTctx) int
	cu_dev : (*cuTctx) int
	cu_aut : (*cuTctx) int
	cu_get : (*cuTctx, *ldTent) int
	cu_put : (*cuTctx, *ldTent) int
	cu_uni : (*cuTctx, *ldTent, int) int
	cu_sav : (*cuTctx, int) *char
	cu_upd : (*cuTctx, *ldTent)
data	notes

;	COMPATILITY:
;
;	o RUST LD: behavior is compatible with RT-11 LD:
;	o RUST LD: commands, functions and structures are not RT-11 compatible
;
;	SUB-DIRECTORIES:
;
;	o RUST LD: supports subdirectories.
;	o Volume specs must be 63 or less characters.
;	o Volume specs are saved in LDV.SYS image, not the driver.
;
;	NETWORK VOLUMES:
;
;	o RUST LD: supports remote network volumes.
;
;	RUST/RTX RSX FILES11A VOLUMES
;
;	o RUST/RTX LD: supports RSX FILES11A volumes
;	o RSX [g,m] and named sub-directories are supported
code	start

;	LDV.SYS LDn:,ddn:mydisk.dsk,log:

  func	start
  is	ctx : * cuTctx = me_alc (#cuTctx)
 	swi : * csTswi
	opt : * csTspc~
	dev : * char
	vol : * char
	err : int
	im_ini ("LD")			; who we are
     repeat
	opt = &csi.Aopt			;
					;
	csi.Pidt = "?LD-I-RUST/SJ Logical Disk utility LDV.SYS V1.0"
	csi.Pnon = "DL"			; no value
	csi.Popt = <>			; optional value
	csi.Preq = ""			; required value
	csi.Pexc = "DL"			; mutually exclusive
	csi.Ptyp = "            "	; default types
					;
	next if !cs_par (&csi, <>)	; parse the command

	swi = csi.Aswi			; the switches
	err = 0				; no error yet
	while swi->Vcha
	   case swi->Vcha
	   of 'D'  ++cuVdis		; dismount
	   of 'L'  ++cuVsho		; show
	   end case			; default is mount 
	   ++swi
	end

	next cs_inv () if err		; invalid command

	ctx->Pdev = csi.Aipt[0].Pspc
	ctx->Pvol = csi.Aipt[1].Pspc
	ctx->Plog = csi.Aipt[2].Pspc
	fi_def (csi.Aipt[1].Pdis, "DK:.DSK", ctx->Pvol)
	fi_def (csi.Aipt[1].Pdis, "DK:.DSK", ctx->Adis)
	st_upr (ctx->Adis)

	next cu_sho (ctx) if cuVsho
	next cu_dis (ctx) if cuVdis
	next cu_mnt (ctx)
     forever
  end
code	mount, dismount, show

	rxZER	:= 30		; rad50 "0"
	nfMNT	:= 040001	; mount file (permanent cab)
	nfDSM	:= 040002	; dismount file

  func	cu_mnt
	ctx : * cuTctx 
  is	cla : rtTcla
	cst : rtTcst
	ext : fxText
	fil : * FILE
	vol : * char = ctx->Pvol
	ent : ldTent
;	dst : int
	siz : int

	me_clr (&ext, #fxText)
	me_clr (&ent, #ldTent)

	exit if !cs_val (&csi, 030, 070)	; required, permitted files
	if st_len (ctx->Adis) gt 63		; too long?
	.. fail im_rep ("E-Volume specification too long %s", ctx->Adis)
;??? check
	cu_aut (ctx)				; handle auto-assign LD*:
	exit if !cu_dev (ctx)			; check LDx: 
	cu_get (ctx, &ent)			; get current entry
	if ent.Anam[0]				; entry is in use
	.. fail im_rep ("E-Unit in use", <>)	;
						;
	ext.Vseq = nfMNT			; signal mount to NF: 
	fil = fx_opn (ctx->Pvol, "rb", "", &ext); open volume file
	pass fail				;

	rt_cla (fil, &cla)
	rt_cst (fil, &cst)			; get channel info

	ent.Vgua = ldGUA			; guard word
	ent.Vvid = cst.Vcsw & 076	;unused	; slot index
	ent.Vuni = cst.Vuni			; unit
	ent.Voff = cst.Vblk			; start block
	ent.Vsiz = cla.Vsiz			; volume size
	me_cop (csi.Acsi+19, ent.Anam, 8)	; copy spec in
	ent.Anam[0] = cst.Vdev			; physical device

	cu_put (ctx, &ent)			; update entry
	if fail
	   im_rep ("E-Error accessing device or file %s", ctx->Adis)
	.. fail ent.Anam[0] = 0
	cu_upd (ctx, &ent)			; update saved names
	fi_clo (fil, "")			; close the file
;	fi_prt (ctx->Pvol, "")			; protect the file
	if *ctx->Plog				; got a logical name
	.. ln_def (ctx->Plog, ctx->Pdev)	; define it
  end

code	dismount

  func	cu_dis
	ctx :  *cuTctx 
  is 	ent : ldTent
	ext : fxText
	fil : * FILE
	exit if !cs_val (&csi, 010, 010)	; required, permitted files
	exit if !cu_dev (ctx)			;
	me_clr (&ent, #ldTent)
	cu_get (ctx, &ent)
	ent.Anam[0] = 0
	cu_put (ctx, &ent)
	ln_rem (ctx->Pdev)			; remove logical assignments
  end

code	show

  func	cu_sho
	ctx :  *cuTctx 
  is	ent : ldTent
	nam : [16] char
	sav : * char
	hdr : int = 0
	uni : int = 0
	exit if !cs_val (&csi, 000, 010)	; required, permitted files
	ctx->Pdev = "LD0:" if !ctx->Pdev

      while uni lt 8
	fail if !cu_uni (ctx, &ent, uni++)
	sav = cu_sav (ctx)
	next if !ent.Anam[0]
	PUT("Unit\tDevice\tSize\tOffset\tFile\n") if !hdr++
	PUT("%s\t", ctx->Pdev)
	ent.Anam[0] += (rxZER + ent.Vuni)
	rx_fmt ("%r:", ent.Anam, &nam)
	PUT("%-8s", &nam)
	PUT("%u\t%u\t", ent.Vsiz, ent.Voff)
	PUT("%s\n", sav)
      end
	PUT("?LD-I-No units mounted\n") if !hdr
  end
code	utilities

;	Get LD: device information

  func	cu_dev
	ctx :  *cuTctx 
  is	spc : * char = ctx->Pdev
	dev : * FILE
	dst : rtTdst
	cla : rtTcla
	cst : rtTcst

	fi_def (spc, "", ctx->Adev)	; device
	rt_dst (ctx->Adev, &dst)	; get device status *before* opening

	dev = fi_opn (ctx->Adev,"rb",""); open the file
	pass fail			; device not loaded
	ctx->Hdev = dev			; save device handle

	rt_cla (dev, &cla)		; device class information
	if !(cla.Vflg & fcDEV_)		; must be a device
	.. fail im_rep ("E-Not a device specification %s", spc)
	if !(cla.Vflg & fcVIR_)		; must be a virtual device)
	.. fail im_rep ("E-Not a logical disk %s", spc)

	if !dst.Vent			; must have been loaded
	.. fail im_rep ("E-Logical disk driver not loaded %s", spc)

	if !rt_cst (dev, &cst)		; get channel status
	.. fail im_rep ("E-Error accessing device %s", spc)
	ctx->Vuni = cst.Vuni		;
	fine
  end

  func	cu_aut
	ctx : * cuTctx
  is	ent : ldTent
	uni : int = 8
	st_upr (ctx->Pdev)
	fail if !st_sam (ctx->Pdev, "LD*:")
	repeat
	   fail if --uni lt
	   fail if !cu_uni (ctx, &ent, uni)
	   fine if !ent.Anam[0]
	forever
  end

  func	cu_uni
	ctx :  *cuTctx 
	ent : * ldTent
	uni : int
  is	ctx->Vuni = uni
	FMT(ctx->Pdev, "LD%d:", ctx->Vuni)
	fail if !cu_dev (ctx, <>)		;
	fail if !cu_get (ctx, ent)
	fine fi_clo (ctx->Hdev, <>)
  end

;	Get LD: unit record

  func	cu_get
	ctx : * cuTctx 
	ent : * ldTent
  is	rt_rea (ctx->Hdev, -2, ent, 8, 0) 
	pass fail
	fail if ent->Vgua ne ldGUA
  end

;	Put LD: unit record

  func	cu_put
	ctx : * cuTctx 
	ent : * ldTent
  is	ent->Vgua = ldGUA
	reply rt_wri (ctx->Hdev, -2, ent, 8, 0) 
  end
code	manage saved names

;	Point to saved name

  func	cu_sav 
	ctx : * cuTctx
	()  : * char
  is	reply cuAsav + (ctx->Vuni * 64)
  end

;	Update saved name and write image

  func	cu_upd
	ctx : * cuTctx
	ent : * ldTent
  is	fil : FILE			; dummy file block
	sav : * char
	sav = cu_sav (ctx, ctx->Vuni)	; saved string address
	st_cop (ctx->Adis, sav)		; update string
	fil.Vchn = 15			; setup for write
	rt_wri (&fil,<int>cuAsav/512,cuAsav,256,0); update image
  end

end file
.endc
.iif ndf rtx$c,rtx$c=0
ldx$c=1	; LD: not VV:
cid$c=1	; NF: channel id
.title	ld
.include "lib:rust.mac"
.library "lib:drvmac.mlb"
$chdef
$cidef
$dcdef
$dedef
$didef
$hadef
$iqdef
$jbdef
$emdef
$vvdef
.if ne rtx$c
.library "rtb:rtmac.mlb"
rxrtx$
.endc

.if ne ldx$c
ldgua$ = ^rld
.iff
ldgua$ = ^rvv
.endc
.if eq rtx$c
.asect	
.=j$busp
	.word	l$dstk
.endc
.csect

;	RUST logical disk driver LD:
;
;	%build
;	display/output=drb:ldx$c.mac "ldx$c=1"
;	macro drb:ldx$c+drs:ldp /object:drb:ldv
;	link/nobitmap drb:ldv /execute:drb:ldv.sys
;	goto end
;	display/output=drb:ldx$c.mac "ldx$c=0"
;	macro drs:mmgt+drs:ldp/object:drb:ldp
;	link/nobitmap drb:ldp /execute:drb:ldp.sys
;	end:
;	%end

.macro drinf$
$imgdef	LD 2 1
$imginf	fun=drv cre=hammo aut=ijh use=<RUST logical disk driver LD:>
$imgham	yrs=<1985,2004> oth=<>
;	%date	
$imgdat <22-Dec-2008 01:52:39.30>
;	%edit
$imgedt <71   >
.endm

;	.drins
;	clc			;kmon
;	clc			;boot
;	return

.if ne rtx$c
	ld$vec	= 0
	mmg$t	= 0
	erl$g	= 0
	tim$it	= 0
	ldsts	= derta$!defun$!devar$
	lddsiz	= 177777
	rte$m	= 0
.endc

.if ne mmg$t
	vvxm=1
	vvsj=0
	vvfb=0
.iff
	vvxm=0
	vvfb=1
	vvsj=1
.endc
	vvv4=1		;must be v4 at present
	vvv5=0		;may not be v5 at present

sysptr	=	54
 qcomp	=	270
 $mtps	=	360
 $mfps	=	362
 pnptr	=	404
hderr$	=	1
unit$n	=	177770
unit$p	=	000007
d.dvsz	=	54
pr7	=	340
varsz.	=	373

.macro	meta	m n o p
.macro m
n
o
p
.endm
.endm

meta	<sj c d e><if vvsj c d e>
meta	<fb c d e><if vvfb c d e>
meta	<xm c d e><if vvxm c d e>
meta	<v4 c d e><if vvv4 c d e>
meta	<v5 c d e><if vvv5 c d e>

.macro	if c d e f
.if ne c
.if nb <f>
	d	e,f
.iff
	d	e
.endc
.endc
.endm
.sbttl	driver definition
.if eq rtx$c

	.drdef	ld,deldc.,filst$!spfun$!varsz$,0,0,0,dma=NO
;	.drdef	ld,vvdec.,filst$!spfun$!varsz$,0,0,0,dma=NO
	.drptr
	.drest	class=dvc.dk
	map	xxnam.,,<^rld>
	.drset	empty,1,st$emp
	.drset	clean,1,st$cln
;	.drset	show,1,st$sho

st$emp:	mova	v$vtab,r0		; get the table
	mov	#vvtbs./2,r1		; word count
10$:	clr	(r0)+			; clear all 
	dec	r1			;
	bne	10$			;
	return				; c=0

st$cln:	psh	r5			;
	jsr	r4,10$			; save & point to temp area
	.rad50	/ld /			; device name 
	.blkw	6			; dstat and cstat area
10$:	mov	r4,r0			; r0 -> spec
	tst	(r4)+			; r4 -> dst
	psh	r4			; (sp) -> dst
	emt	emdst.			; .dstat
	bcs	70$			; LD: not loaded
	mov	di.ent(r4),r5		;
	add	#v$vtab-ha.lqe,r5	; point at table
	beqw	(r5),#012767,60$	; not setup yet
	bmiw	r3,30$			; clean
					; empty
	mov	#vvtbs./2,r1		; word count
20$:	clr	(r5)+			; clear all 
	dec	r1			;
	bne	20$			;
	return				; c=0

	mov	#8.,r2			;
30$:	movi	vv.dev,r3,r1		; point at spec
	beqw	(r1),40$		; not loaded
	psh	r4			; (sp) -> dst
	mov	r1,r0			; r0   -> spc
	emt	emdst.			; .dstat
	bcs	70$			; unloaded - remove assignment
					;
	.purge	#15.			; standard channel
	clr	-(sp)			; no sequence number
	psh	r1			; spec
	psh	#emloo.*256.+15.	; lookup code & channel
	mov	sp,r0			; iob
	emt	375			; look it up
	bit	(sp)+,(sp)+		; dump iob
	inc	(sp)+			;
	bcs	40$			; deleted - remove assignment
	mov	r0,vv.siz(r3)		; update the device size
					;
	psh	r4			; status area
	psh	#emcst.*256.+15.	; cstat code & channel
	mov	sp,r0			;
	emt	375			; get channel status
	bit	(sp)+,(sp)+		; dump area
	bcs	70$			; shouldn't happen - abort
	mov	ci.sbl(r4),vv.off(r3)	; update offset
	br	50$			; and retain

40$:	clr	vv.dev(r3)		; dismount it
50$:	add	#vv.bbs,r3		; next block
	sobw	r2,20$			;
60$:	tst	(pc)+			; fine - update driver
70$:	sec				; system error - abort it
	pop	r4			;
	return
.endc
.sbttl	entry point, once-only

;	Entry point followed by unit table.
;	First time executes once-only code.

	.drbeg	ld		;\
vv$beg:	br	10$		;| skip the guard word
	.word	ldgua$		;| guard word
10$:	jsr	r5,vv$sta	;| start i/o
v$vtab:	.assume	v$vtab-vv$beg eq 10 ;see $vvdef
;[sic]	.blkb	vvtbs.		;| unit table
vv$onc:	mov	#5726,vv$sta	;/ replace branch with tst (sp)+
	mov	@#sysptr,r0	;get the system
	add	r0,v$vmtp	;relocate mtps
	add	r0,v$vmfp	;relocate mfps
	add	pnptr(r0),r0	;get the permanent name table
	mov	r0,v$vpn1	;point at it
	mov	r0,v$vpn2	;twice
	psh	r0		;save it
10$:	cmp	(r0)+,#-1	;find the end
	bne	10$		;must be found
.if ne cid$c
	mov	r0,v$vsta	;$stat pointer
.endc
	tst	-(r0)		;back one
	sub	(sp),r0		;back off it it
	asr	r0		;get the halfway mark
	mov	r0,v$vslc	;save the slot count
	add	(sp)+,r0	;entry point table
	mov	r0,v$vent	;save this guy
				;
	.assume	vv$onc-vv$beg eq 10 ;adjacent
	mov	r5,r0		;r5 -> vv$onc
	mov	#40$-vv$onc/2,r1;count it
	br	30$		;
	.assume	.-vv$onc le vvtbs.-6 ;make sure we have the space
	.=vv$onc+vvtbs.-6	;position at the end of the table

;	The clear loop occupies the last three words of the last entry.

30$:	clr	(r0)+		;clear it out
40$:	dec	r1		;count them
	bne	30$		;more
	.assume	.-vv$onc eq vvtbs.
.sbttl	start i/o

;	Start I/O
;
;	Dispatch control and functions
;	Remap to target driver
;	Requeue request to target driver
;
;	r0 ->	fb users buffer (control only)
;	r1	general purpose
;	r2 ->	target cqe - from vv$map
;	r3 ->	unit record
;	r4 ->	queue element
;	r5 ->	callers v$vtab

	.enabl	lsb
vv$sta:	br	vv$onc		;[sic] first time to once-only
;[sic]	tst	(sp)+		;forget pushed r5 on subsequent entries
	mov	r5,r3		;r5 -> start of table thruout
;	mov	vv.cqe(r5),r4	;get the queue element
	mov	ldcqe,r4	;get the queue element
	beq	vv$nop		;oops - we lost it
	mov	iq.buf(r4),r0	;r0 -> buffer for unmapped
	movb	iq.uni(r4),r1	;get the unit
	bic	#unit$n,r1	;isolate it
	.assume	vv.bbs eq 14.	;assume seven word entry
	asl	r1		;*2
	add	r1,r3		;add *2
	asl	r1		;*4
	add	r1,r3		;add *4
	asl	r1		;*8
	add	r1,r3		;add *8 = *14 - r3 -> unit record

;	Check for control function
;
;	r3 ->	LD unit record

	.assume	iq.blk eq 0	;
	cmp	(r4),#-2	;this a function call?
	beq	vv$set		;yes - check set & show
	movb	iq.fun(r4),r1	;got a function?
	bne	vv$fun		;yes - r1 = function
				;
	call	vv$map		;map the target device
	bcs	vv$err		;oops - unloaded
				;r2 -> target cqe
;	Check transfer size

	mov	iq.wct(r4),r1	;r1 = word count
	bpl	10$		;its a read
	bit	#vvrdo$,(r3)	;this set read-only?
	bne	vv$err		;yep - give them the i/o error
	neg	r1		;nope - get positive wordcount
10$:	add	#377,r1		;round up to a block
	bcs	vv$err		;this is ridic
	clrb	r1		;compute the number of blocks
	swab	r1		;r1 = number of blocks
	add	(r4),r1		;add in the start block
	bcs	vv$err		;ridiculous
	cmp	r1,vv.siz(r3)	;exceeds disk space available?
	bhi	vv$err		;yes - this is a hard error

.if ne cid$c
	assume	vv.vid eq 0	;
	movb	(r3),r1		;get $stat offset
	add	(pc)+,r1	;stat base
v$vsta:	.word	0		;
	cmpb	(r1),#defxc.	;going to FX:?
	beq	15$		;yes
	cmpb	(r1),#denfc.	;going to NF:
	bne	20$		;nope
15$:	mov	r3,iq.fun(r4)	;yes - send the unit record
	mov	iq.csw(r4),r1	;adjust for later subtraction
	add	ch.sbl(r1),(r4)	;
	br	30$		;NF: does unit
.endc				;not NF:
20$:	add	vv.off(r3),(r4)	;nope - add in offset to volume

;	Setup the unit

	movb	vv.uni(r3),r1	;get the target unit
	bic	#unit$n,r1	;isolate the unit
	bicb	#unit$p,iq.uni(r4) ;clear out queue element unit number
	bisb	r1,iq.uni(r4)	;and set ours up
30$:	fall	vv$rqu		;go requeue the request
	.dsabl	lsb
.sbttl	requeue request

;	Requeue I/O request
;
;	r2 ->	target handler cqe
;	r3 ->	unit record
;	r4 ->	queue element
;	r5 ->	callers v$vtab

v$vmfp=.+2			;relocated to rmon $mfps
vv$rqu:	call	@#$mfps		;get the ps
	psh	#pr7		;setup to block
v$vmtp=.+2			;relocated to rmon $mtps
	call	@#$mtps		;set the ps
				;
;	mov	iq.lnk(r4),vv.cqe(r5) ;pr7> link forward
	mov	iq.lnk(r4),ldcqe ;pr7> link forward
     sj	beq	20$		;pr7> its the last one
     sj	clr	iq.lnk(r4)	;pr7> clean us up
     sj	pop	r1		;pr7> save ps a sec
     sj	psh	r5		;pr7> save this
     sj	add	#vv.beg,(sp)	;pr7> point back to start i/o routine
     sj	psh	r1		;pr7> put it back
     sj	br	30$		;pr7> queue and return to handler

;	Requeue request

20$:;	clr	vv.lqe(r5)	;pr7> and the next one also
	clr	ldlqe		;pr7> and the next one also
30$: v5	call	@v$vmtp		;pr7> reset priority & return
     v5	add	#2,(sp)		;skip ordinary return
     v5	.assume	.=vv$nop	;i.e. return
				;
     v4	mov	2(r2),r0	;pr7> get cqe, is it empty?
     v4	bne	50$		;pr7> nope
     v4	mov	r4,(r2)+	;pr7> yes, plug last queue entry
     v4	mov	r4,(r2)+	;pr7> plug the current queue entry
				;pr7> ps already on the stack
;    v4	mov	r2,-(sp)	;pr7> fake a call
;    v4	rti			;pr7> and goto it
     v4	call	@v$vmtp		;pr7> restore the stack
     v4	jmp	(r2)		;pr7> and transfer control

;	Link into target queue

40$: v4	mov	iq.lnk(r0),r0	;pr7> link to next
50$: v4	tst	iq.lnk(r0)	;pr7> is this the last?
     v4	bne	40$		;pr7> no - look again
     v4	mov	r4,iq.lnk(r0)	;pr7> point it to us
     v4	mov	r4,(r2)		;pr7> point symbiont lqe at it (for sj)
     v4	call	@v$vmtp		;pr7> reset priority & return
vv$nop:	return			;\ no queue element & abort
ldint:				;/ no isr - abort returns
vv$err:	bis	#hderr$,@-(r4)	;we have an error
vv$fin:
	.drfin ld
.sbttl	control functions

;	Show unit and size function

.enabl	lsb
vv$sho:	cmp	r2,#vv.bbs/2+1	;this the correct show wordcount?
	bne	vv$err		;no
	psh	#ldgua$		;yes - return guardword first
	br	20$		;and get into the transfer loop
vv$fun:	cmpb	r1,#varsz.	;this the variable size function?
	bne	vv$fin		;no - ignore it
	mov	#1,r2		;yes - set wordcount to one
	.assume	vv.siz eq 4	;
	cmp	(r3)+,(r3)+	;point at the size
10$:	psh	(r3)+		;get the next
20$: fb	pop	(r0)+		;send the next
     xm	call	@$ptwrd		;send it
30$:	dec	r2		;count
	bne	10$		;more
	br	vv$fin		;more
	.dsabl	lsb		;

;	Set unit
;
;	r0	fb user buffer
;	r1	function code
;	r2	wordcount
;	r3	unit record
;	r4	queue element
;	r5	callers v$vtab

vv$set:	mov	iq.wct(r4),r2	;get word count
	bpl	vv$sho		;its a show
	cmp	r2,#-<vv.bbs/2+1>;this the magic number
	bne	vv$err		;no - thats an error
     fb	cmp	(r0)+,#ldgua$	;this the guard word?
     fb	bne	vv$err		;no - thats an error
     xm	call	@$gtbyt		;get the first byte
     xm	call	@$gtbyt		;get the second byte
     xm	movb	(sp)+,1(sp)	;construct the word
     xm	cmp	(sp)+,#ldgua$	;this the magic number?
	bne	vv$err		;no
	inc	r2		;yes - decrement negative wordcount
	asl	r2		;get a byte count
.if ne rtx$c
	mov	r3,r1		;points to table entry
.endc
10$: fb	movb	(r0)+,(r3)+	;store it
     xm	call	@$gtbyt		;get the next byte
     xm	movb	(sp)+,(r3)+	;store it
	inc	r2		;count it
	bne	10$		;more
.if ne rtx$c
	bneb	(r1),#fxSLT.,vv$fin ; not FX:
	clr	-(sp)		;
	movb	iq.uni(r4),(sp)	;ld unit number
	psh	r1		;r1 -> table entry
	call	fa$mnt		;load or unload it
	pop	r1		;
	inc	(sp)+		;pop unit number
	bcc	vv$fin		;fine
	clr	vv.dev(r1)	;dismount it
	br	vv$err		;
.iff
	br	vv$fin		;done
.endc
.sbttl	locate target device

;	Locate the target device
;	Slot is saved in unit record.
;	Clear it and search again if its lost.
;
;	r3 ->	unit record
;	r4 ->	queue element
;	r5 ->	callers v$vtab
;
;	r1 =	target generic name - internal
;	r2 ->	target handler lqe
;	c=1	invalid unit

	.enabl	lsb		;
10$:	clrb	(r3)		;lost the device - try again
vv$map:	mov	vv.dev(r3),r1	;get the permanent name
	beq	50$		;no name
	movb	(r3),r2		;get the device slot
	bne	40$		;got one - check it
	clr	r2		;search for the target
v$vpn1=.+word			;relocated to $pname table
20$:	cmp	0(r2),r1	;this our device?
	beq	30$		;yep
	tst	(r2)+		;nope - look at another slot
v$vslc=.+word			;slot count (*2)
	cmp	r2,#0		;too many slots?
	blo	20$		;nope - look at the next
	br	50$		;no device
30$:	movb	r2,(r3)		;store the slot number
v$vpn2=.+word			;points to $pname base
40$:	cmp	0(r2),r1	;still the right device
	bne	10$		;we lost it - search again
v$vent=.+word			;points $entry table
	mov	0(r2),r2	;r2 -> ha.lqe
	beq	50$		;oops - unloaded
	tst	(pc)+		;fine
50$:	sec			;bad news
	return			;
	.dsabl	lsb		;
	.drend	ld		;
.if eq rtx$c
	drinf$			;driver information
.endc
.sbttl	volume data
.if eq rtx$c
.psect	ldsav			; rounded up by linker

	.blkw	512.*2		; stack space

;	8 * 64 character volume names

cuAsav::.blkb	512.		; saved volume names
l$dstk:				; stack for rider code
.endc

.end
