!!	%build
!!	r hlpcom
!!	xub:c=xus:c
!!	^C
!!	%end
!!
!B	C
	CC		CC$COM
	ASS		CC$ASS
	LINK		CC$LNK
	Control_Structure	CC$CTR
	Function	CC$FUN
	Operator	CC$OPR
!F
!E	
!B	CC$COM
	/A		CO$ASS
	/D		CO$DBG
	/I		CO$INT
	/L		CO$LST
	/V		CO$VIW
!S	CC
Compilation statements.

	RUN C:CC [outfil.s,outfil.tml,outfil.tmp=]infile[/option]

Use the command below to compile your C source with the DECUS
C-compiler to pdp_11 assembly language.
!E	
!B	CO$ASS
!S	/A
Automatic chain to assembler.

	RUN C:CC [outfil.s,outfil.tml,outfil.tmp=]infile/A

Cause an automatic chain to the assembler if the compile has
no errors.
!E	
!B	CO$DBG
!S	/D
Debug each overlay in a program.

	RUN C:CC [outfil.s,outfil.tml,outfil.tmp=]infile/D

Causes the compiler to execute breakpoint trap when executing
an overlay segment. This option is only used for maintenance.
!E	
!B	CO$INT
!S	/I	
Retain intermediate compiler files.

	RUN C:CC [outfil.s,outfil.tml,outfil.tmp=]infile/S

Use this option to retain the intermediate file produced by the
compiler. This file is normaly deleted.
!E	
!B	CO$LST
!S	/L
List internal compilation tree.

	RUN C:CC [outfil.s,outfil.tml,outfil.tmp=]infile/L

Write internal code tree as comment to .S file.
!E	
!B	CO$VIW
!S	/V
Display error line.

	RUN C:CC [outfil.s,outfil.tml,outfil.tmp=]infile/V

This option argument causes the compiler to echo the current
line of the source onto the error stream whenever an error is
detected.
!E	
!B	CC$ASS
	/B		AS$BRA
	/D		AS$DEL
	/G		AS$GBL
	/L		AS$LST
	/N		AS$NOB
!S	ASS
Assembler  options.

	RUN C:ASS in-file[/option]

Assembles macro code produced by the compiler to object modules.

You cannot use MACRO to assemble source code produced by the compiler.
!E	
!B	AS$BRA
!S	ASS
Flag extendet branches.

	RUN C:ASS in-file/A

Causes the assembler to flag all branches that where extendet to jumps.
!E
!B	AS$DEL
!S	ASS
Delete source after assembly.

	RUN C:ASS in-file/D

Causes the assembler to delete the source file after asembly.
This option is turned off by errors.
!E
!B	AS$GBL
!S	ASS
Enable global.

	RUN C:ASS in-file/G

Causes all symbols which are undefined after pass 1 to be globals.
!E
!B	AS$LST
!S	ASS
Generate list file.

	RUN C:ASS in-file/L

Causes the assembler to generate a listing file.
!E
!B	AS$NOB
!S	ASS
Suppress object code generation.

	RUN C:ASS in-file/N

Causes the assembler to suppress object code generation.
!E
!B	CC$LNK
	Example	LI$EXA
!!
!S	LINK
Linker options.

	LINK in-files

Link object modules and libraries into programs.

In-files
	Upto six input file specifications.
	The default input file type is .OBJ.

Use SHAREplus HELP to obtain more detailed information about LINK.
!E	
!B	LI$EXA
!S	EXAMPLE
Command example.
	.LINK C:NA,LIB:DCSUP,LIB:DCLIB,LIB:DCGBL/BOTTOM:2000
!E	
!B	CC$FUN
	abort	ABORT
	abs	ABS
	ascr50	ASCR50
	atod	ATOD
	atoi	ATOI
	atol	ATOL
	caller	CALLER
	calloc	CALLOC
	concat	CONCAT
	copy	COPY
	ctime	CTIME
	error	ERROR
	exit	EXIT
	feof	FEOF
	ferr	FERR
	fflush	FFLUSH
	fget	FGET
	fgets	FGETS
	flun	FLUN
	fmkdl	FMKDL
	fopen	FOPEN
	fput	FPUT
	fprintf	PRINTF
	frec	FREC
	fscanf	SCANF
	fseek	FSEEK
	fspool	FSPOOL
	ftell	FTELL
	ftty	FTTY
	fwild	FWILD
	getchar	GETCHAR
	gets	GETS
	gettty	GETTTY
	getw	GETW
	iov	IOV
	iovtoa	IOVTOA
	isalpha	ISALPHA
	isdigit	ISDIGIT
	islower	ISLOWER
	isupper	ISUPPER
	itoa	ITOA
	itoa8	ITOA8
	itoax	ITOAX
	malloc	MALLOC
	memdmp	MEMDMP
	msg	MSG
	mul$l	MUL$L
	printf	PRINTF
	putc	PUTC
	puts	PUTS
	putw	PUTW
	r50toa	R50TOA
	rand	RAND
	realloc	REALLOC
	rewind	REWIND
	rtime	RTIME
	salloc	SALLOC
	sbreak	SBREAK
	scanf	SCANF
	sprintf	PRINTF
	sscanf	SCANF
	screen	SCREEN
	setcc	SETCC
	sleep	SLEEP
	strcmp	STRCMP
	strcpy	STRCPY
	streq	STREQ
	strlen	STRLEN
	swabb	SWABB
	swabi	SWABI
	time	TIME
	tolower	TOLOWER
	toupper	TOUPPER
	trace	TRACE
!!	traps	TRAPS
	ungetc	UNGETC
	unwind	UNWIND
	wdleng	WDLENG
	wrapup	WRAPUP
	zero	ZERO
!!
!S	Function
C Functions.
!E	
!B	ABORT
!S	Function
Abort program with BPT.

abort()

After closing all files, the program exits by executing a BPT.

!E	
!B	ABS
!S	Function
Integer absolute value.

abs(val)
int	val;

Return absolute value of the integer argument.
!E	
!B	ASCR50
!S	Function
Convert ascii to radix-50.

ascr50(count, input, output)
int	count;
int	*output;
char	*input;

Convert 'count' characters from ascii to radix-50.
!E	
!B	ATOD
!S	Function
Convert ascii to double floating.

double
atod(buffer)
char	*buffer;

Convert argument string to double-precision floating point binary number.
!E	
!B	ATOI
!S	Function
Convert ascii to integer.

atoi(p)
char	*p;

Convert ascii-string to integer.
!E	
!B	ATOL
!S	Function
Convert ascii to long.

long
atol(p)
char	*p;

Convert ascii-string to long-integer.
!E	
!B	CALLER
	Example	CALLEX
!S	Function
Return name of profiled caller.

char	*
caller();

Return pointer to name of calling function.

Compile caller() with profile enabeled.
!E	
!B	CALLEX
!S	Function
Sample caller() example.

foo()
{
	foobar();
}

foobar()
{
	extern char *caller();
	printf("foobar was called by %s\n",caller());
}
!E	
!B	CALLOC
!S	Function
Allocate memory.

char	*
calloc(n,m);

Allocates and zeroes memory for  n element each m bytes long.
Return NULL if requested space is not available.
!E	
!B	CONCAT
!S	Function
Concatenate strings.

char	*
concat(out, in1, ..., inN, 0);
char	*out;
char	*in0, in1, ... inN;

Concatenate arguments and return pointer to output string.
!E	
!B	COPY
!S	Function
Copy n bytes.

char	*
copy(out, in, nbytes);
char	*out;
char	*in;
int	nbytes;

Copy nbytes from input vector to output vector. Return pointer to
first free byte of output.
!E	
!B	CTIME
!S	Function
Convert time buffer to ascii.

char	*
ctime(buffer);
struct TIME	{
	int	year;
	int	month;
	int	day;
	int	hour;
	int	minute;
	int	secont;
	int	tick;
	int	tsec;
} buffer;

dayoffweek(buffer);
struct TIME buffer;

Convert the time information in buffer such as returned by rtime()
to a character string in the format:

	FRI AUG 11 22:13:23 1989\0\0

Use ctime(0) to return current date.
!E	
!B	ERROR
!S	Function
Fatal error exit.

error(format, arglist);

Write error message to STDERR and exit C program.
!E	
!B	EXIT
!S	Function
Exit from C program.

exit();			/* no return */

exits(status);		/* exit with status */

$$fail();		/* Immediate exit */

extern int $$exst;	/* exit status value */

The user-supplied wrapup() function is called.
Profiles are printed if requested.
All files are closed.
Exit to operating system.

Note that $$fail() exits without closing files, calling wrapup()
or writing profile.
!E	
!B	FEOF
!S	Function
Test EOF.

feof(iop);
FILE	*iop;

Return TRUE on end of file; NULL otherwise.
!E	
!B	FERR
!S	Function
Test for file error.

ferr(iop);
FILE	*iop;

Return TRUE if an error is detected on I/O channel.
!E	
!B	FFLUSH
!S	Function
Flush output buffers.

fflush(iop);
FILE	*iop;

Flush output buffers. This routine actually does I/O.
Return $$ferr set on error.
!E	
!B	FGET
!S	Function
Input binary record.

fget(buffer, maxbytes, iop);
char	*buffer;
int	maxbytes;
FILE	*iop;

Read a record from file. Maxbytes is the maximum record size.
Return number of bytes read.
The file must have been written by fput().
!E	
!B	FGETS
!S	Function
Read string from file.

char *
fgets(buffer, maxbytes, iop);
char	*buffer;
int	maxbytes;
FILE	*iop;

Read string from file into buffer. Maxbytes is the maximum number of
bytes to read. The string is terminated by a newline and a NULL.
Return NULL on end of file or error.
!E	
!B	FLUN
!S	Function
Get logical unit number.

flun(iop)
FILE	*iop;

Return channel number of associated file.
!E	
!B	FMKDL
!S	Function
Mark file for deletion.

fmkdl(iop)
FILE	*iop;

Close and delete specified file. Return NULL on success -1 on error.
!E	
!B	FOPEN
!S	Function
Open file.

FILE *
fopen(name, mode);
char	*name;	/* file to open */
char	*mode;	/* open modes */

FILE *
freopen(name, mode, iop);
char	*name;	/* file to open */
char	*mode;	/* open modes */
FILE	*iop;	/* I/O pointer */

Opens a new or existing file in the indicated mod:

	r	Read existing file sequentially
	w	Create and write sequentially
	a	Append to the file
	n	Don't do newlines on each record
	u	Use .ttyin and .ttyout

Return NULL on errors. $$ferr gets an error code.
!E	
!B	FPUT
!S	Function
Output a binary record.

fput(buffer, nbytes, iop);
char	*buffer;
ind	nbytes;
FILE	*iop;

The specified record is written to the file. The file is only by
fget() readable. Return nbytes.
!E	
!B	FREC
!S	Function
Test record oriented file.

frec(iop);
FILE	*iop;

Return TRUE if specified file is record oriented.
!E	
!B	FSEEK
!S	Function
Deposit seek.

fseek(iop, offset, param);
FILE	*iop;		/* what device to seek */
long	offset;		/* new read position */
int	param;		/* zero for abs. seek */

Moves the I/O pointer to the indicated position. The position must
have been returned by ftell(). Param must be zero.
Return ZERO if correct, EOF on error.
!E	
!B	FSPOOL
!S	Function
Spool file to printer queue.

fspool(fp);
FILE	*fp;	/* open file IOV */

Return ZERO if the file was spooled, e$$nod = 6 if spooling is not
initiated.
!E	
!B	FTELL
	Example	FTEXAM
!S	Function
Get file position for subsequent seek()

long
ftell(iop);
FILE	*iop;		/* what device to seek */

Return position off the read/write pointer from indicated file.
This value may be fed back to the file system by calling fseek().
!E	
!B	FTEXAM
!S	Function
Sample example using ftell().

If reading lines of text, the correct sequence is:

	position = ftell(fd);
	if (fgets(buffer, sizeof_buffer, fd) != EOF)
	{
		/*
		 * 'position' locates the record
		 * read by the call to fgets()
		 */
	}
!E	
!B	FTTY
!S	Function
Test if terminal file.

ftty(iop)
FILE	*iop;

Return TRUE if terminal-type device such as the console terminal.
!E	
!B	FWILD
	Example	WILDEX
!S	Function
Wild-card file open.

FILE *
fwild(name, mode);
char	*name;		/* file to open */
char	*mode;		/* open modus */

FILE *
fnext(iop);
FILE	*iop;		/* I/O pointer */

Opens a new or existing file. The filename may contain wildcads.
Reefer to fopen() for a list of open modes. Fwild() does not open
anny file found. Return NULL if the file name cannot parse correctly.

Use fnext() to open the first or next file was defined by a previous
call to fwild(). If fnext() returns NULL, there are no (more) files
that match the wild-card specification.

The parser will handle several forms of wild file specs. Including
imbedded "*" and the singel chararcter wild-card "%".
!E	
!B	WILDEX
!S	Function
Wild-card file search example.

The following sequence illustrates the propper use of fwild()/fnext().

	if (gets(name_buff) == NULL)
		exit();
	if ((fd = fwild(name_buff, "r")) == NULL)
		error("Can't open %s\n", name_buff);
	for (count = 0; fnext(fd) != NULL; count++)
	{
		/*
		 * process each file
		 */
		while (fgets(buffer, sizeof_buffe, fd)
			!= NULL)
		{
			/*
			 * process each record
			 */
		}
	}
	if (count == 0)
		error("No files found");
!E	
!B	GETCHAR
!S	Function
Get character.

getchar();

getc(iop);
FILE	*iop;

Getchar() reads one character from STDIN. Getc() reads one character
from the indicated input file. Both return EOF on error or end of file.
!E	
!B	GETS
!S	Function
Read string from STDIN.

char *
gets(buffer);
char	*buffer;

Read a string from STDIN into buffer. Terminate the string with a NULL.
Return buffer or NULL on end of file or error.
!E	
!B	GETTTY
!S	Function
Get control terminal name.

gettty(buffer);
char	*buffer;

Store device name of control terminal in buffer. Return NULL string
on error.
!E	
!B	GETW
!S	Function
Get binary integer from file.

getw(iop);
FILE	*iop;

Reads one (16-bit) word from the indicated file. Use feof() or ferr()
to indicate end of file or error.
!E	
!B	IOV
!S	Function
Define I/O vector structure.

typedef struct iov {
  int	io_flag;	/* Control flags	*/
  int	io_uget;	/* Unget char storage	*/
  char	*io_name;	/* Filename pointer	*/
  char	*io_wild;	/* Wildcard lookup buff.*/
  int	io_lun;		/* RT11 channel number	*/
  int	io_bcnt;	/* Buffer free count	*/
  char	*io_bptr;	/* Buffer free pointer	*/
  int	io_bnbr;	/* Disk block number	*/
  char	io_bbuf[512];	/* Data buffer		*/
} FILE;

Define the I/O vector structure used for communikation by all I/O
routines in the C library. The following files are defined here:

	STDIN	Standart input-file
	STDOUT	Standart output-file
	STDERR	Standart error output-file
!E	
!B	IOVTOA
!S	Function
Convert file-name to ascii.

char	*
iovtoa(iop, buffer);
FILE	*iop;
char	*buffer;

Convert file-name to ascii and store it in buffer. Return pointer to
the trailing NULL in the buffer.
!E	
!B	ISALPHA
!S	Function
Test for alphabetic argument.

isalpha(c);
int	c;

Return TRUE if c is an alphabetic argument. Return FALSE if not.
!E	
!B	ISDIGIT
!S	Function
Test for digit argument.

isdigit(c);
int	c;

Return TRUE if c is an ascii digit, FALSE otherwise.
!E	
!B	ISLOWER
!S	Function
Test for lower-case alphabetic argument.

islower(c);
int	c;

Return TRUE if c is a lower-case alphabetic character, FALSE if not.
!E	
!B	ISUPPER
!S	Function
Test for upper-case alphabetic argument.

isupper(c);
int	c;

Return TRUE if c is a upper-case alphabetic character, FALSE if not.
!E	
!B	ITOA
!S	Function
Convert integer to ascii.

char *
itoa(value, string);
int	value;
char	*string;

Convert value to signed decimal string trailed with a ZERO byte.

The result can be computed more flexibly by executing:

	sprintf(buffer, "%d",value);
!E	
!B	ITOA8
!S	Function
Convert integer to octal ascii.

char *
itoa8(value, buffer);
int	value;
char	*buffer;

Convert value to octal and store result in buffer. Return pointer to
trailing ZERO in the buffer.

The result can be computed more flexibly by executing:

	sprintf(buffer, "%06o",value);

Itoa8() does not generate leading zeros. The "%06o" switch in the
sprintf() function does.
!E	
!B	ITOAX
!S	Function
Convert integer to hexadecimal ascii.

char *
itoax(value, buffer);
int	value;
char	*buffer;

Convert value to hexadecimal ascii and store result in buffer.
Values from 10. to 15. are represented by "A" to "F". Return pointer
to trailing ZERO in the buffer.

The result can be computed more flexibly by executing:

	sprintf(buffer, "%x",value);

!E	
!B	MALLOC
!S	Function
Allocat and free memory.

char *
malloc(size);			/* NULL if no space	*/
unsigned	size;		/* Number of bytes	*/

mfree(p);
free(p);
char	*p;			/* Was allocated	*/

Allocate indicated number of bytes and return pointer to first free.
Return NULL if no space available. Free() and mfree() return a buffer
to free space. See also realloc() and sbreak().
!E	
!B	MEMDMP
!S	Function
Dump memory or registers.

memdmp(start, end);		/* Memory dump routine	*/
char	*start;			/* First to dump	*/
char	*end;			/* Last to dump		*/

regdmp();			/* Register dump	*/

Dump registers and/or memory. If called with a ZERO argument, the
stack will be dumped.

Internal condition codes will be destroyed.
!E	
!B	MSG
!S	Function
Print message on console terminal.

msg(text)
char	*text;

Prints a message on the console terminal.
!E	
!B	MUL$L
!S	Function
Multiply long with long.

long
mul$l(a, b);		/* long = long * long	*/
long	a;
long	b;

long
mul$l(a, b);		/* long = long * int	*/
long	a;
int	b;

Multiply long arguments. This routine is called internally by the
compiler to compile long multiplies.
!E	
!B	PRINTF
	Conversion_Character	PR$CON
	Escape_Characters	PR$ESC
!S	Function
Formatted print routine.

printf(format, arg1, ...);
char	*format;

fprintf(iov, format, arg1, ...);
FILE	*iov;
char	*format;

sprintf(buffer, format, arg1, ...);
char	*buffer;
char	*format;

Printf()  converts, formats, and  prints its arguments, under control
of the first argument, writing output via putchar(). Fprintf() prints
its  output to the indicated file. Sprintf() prints its output to the
indicated string buffer.
!E	
!B	PR$CON
	d	P$COND
	u	P$CONU
	o	P$CONO
	x	P$CONX
	f	P$CONF
	e	P$CONE
	g	P$CONG
	c	P$CONC
	r	P$CONR
	s	P$CONS
!S	Function
Conversion Characters.

The first argument is a character string which contains:

Plain characters, wich are simply copied to the output stream.
			&
Conversion specifications, each of which causes conversion and printing
of the next successive argument to printf.

Each conversion specification is introduced by the character %.
Following the % there may be

- an optional minus sign "-" which specifies left adjustment;
- an optional digit string specifying field width;
- an optional period "." which serves to seperate the field width
  from the next digit string;
- an optional digit string which specifies the precision;
- a  character which indicates the type of convesion to be applied.

Conversion characters and there meaning are:
!E	
!B	P$COND
!S	Function
Signed-decimal conversion.

The integer argument is converted to signed decimal notation.
!E	
!B	P$CONU
!S	Function
Unsigned-decimal conversion.

The integer argument is converted to unsigned-decimal notation.
!E	
!B	P$CONO
!S	Function
Convert to octal.

The integer argument is converted to octal notation.
!E	
!B	P$CONX
!S	Function
Convert to hexa-decimal.

The integer argument is converted to hexadecimal notation.
	%X	10-15 are represented by A-F
	%x	10-15 are represented by a-f
!E	
!B	P$CONF
!S	Function
Convert to decimal ([-]nnn.nn).

The argument is converted to decimal notation in the style:
	"[-]ddd.dd"
The number of digits after the point equals to the precision
specification for the argument.
!E	
!B	P$CONE
!S	Function
Convert float or double.

The fload or double argument is converted in the style:
	"[-]d.ddde+-dd"
There is one digit before the decimal point. The number after is equal
to the precision specified for the argument.
!E	
!B	P$CONG
!S	Function
Convert floating point of some sort.

!E	
!B	P$CONC
!S	Function
Print argument character.

The argument character is printed. (Note that 'lc' takes a long int.)
!E	
!B	P$CONR
!S	Function
Remote format.

This causes the compiler to use the next printf() argument for the
format. Note that this is not a subroutine. The current format is not
processed further. For example:

bug(args)
{
	error("Error at %r", &args);
}

This routine might be called as follows:
	bug("Error %d at %s\n", val, name);
!E	
!E	
!B	P$CONS
!S	Function
Take argument to be a string.

The argument is taken to be a string (character pointer).
Characters  from  the string are  printed  until  a  NULL
character or until the  number of characters specified by
the precision is reached.
!E	
!B	PR$ESC
!S	Function
Escape characters.

Some nonprintable characters will be represented by escape-sequences
intruded  with the backslash character "\"  following  by a sequence-
specifier:


	\n	generates a newline
	\r	generates a carriage return/line feed sequence
	\0	string delimitter
	\t	interpunctuation character TAB
	\\	the backslash itself	
	\0o	generates escape-sequence for octal constant
	\f	form-feed
	\'	a tick
	\"	double quote
!E	
!B	PUTC
!S	Function
Output one character to a file.

putchar(c);
char	c;

putc(c, iop);
char	c;
FILE	*iop;

Putchar() writes one character to the standart output-file STDOUT.
Putc() writes one character to the named output-file.
Return EOF on error, else character.
!E	
!B	PUTS
!S	Function
Output a string to a file.

puts(s);
char	*s;

fputs(s, iop);
char	*s;
FILE	*iop;

fputss(s, iop);
char	*s;
FILE	*iop;

Puts() writes string to STDOUT. Terminate string with a newline.

Fputs() writes string to indicated file. No newline is appended.

fputss()  writes string terminated by newline to indicated file.
!E	
!B	PUTW
!S	Function
Output a binary integer to a file.

putw(word, iop);
int	word;
FILE	*iop;

Writes one word to the indicated file. Return EOF on error, else NULL.
!E	
!B	R50TOA
!S	Function
Convert radix-50 to ascii.

r50toa(buff, r5vec, r5cnt);
char	*buff;			/* Output text buffer		*/
int	*r5vec;			/* Input radix-50 buffer	*/
int	r5cnt;			/* Number of radix-50 words	*/

Convert r5cnt words of radix-50 to ascii. Output buffer wil be not
NULL trailed. All output characters are in upper-case.
!E	
!B	RAND
!S	Function
Generate random number.

rand(max)
int	max;

extern long	seed;		/* Random number seed	*/

Generate a pseudorandom number. If max is ZERO, return a number in the
range 0 .. 32767. If max is non-ZERO, return mod(number, max);

The algorithm is prone to nonrandom sequences when considering the next
pseudorandom number.
!E	
!B	REALLOC
!S	Function
Reallocate memory.

char *
realloc(buff, size);
char		*buff;		/* Buffer from malloc()	*/
unsigned	size;		/* New size for buff	*/

Change the size of the block pointed to by buff. Return pointer to
moved block. See also malloc(), calloc() and sbreak().

The program aborts if buff is not the address of a buffer allocated
by malloc() or calloc().
!E	
!B	REWIND
!S	Function
Rewind a file for re-reading.

rewind(iop);
FILE	*iop;

Rewinds indicated file. Return -1 on error, 0 on success.
On RT_11, if the file was opened for output, it is closed and reopened
for input.
!E	
!B	RTIME
!S	Function
Date and time conversion.


rtime(buffer);

struct TIME	{
	int	year;
	int	month;
	int	day;
	int	hour;
	int	minute;
	int	second;
	int	tick;
	int	tsec;

Stores current time of day in buffer.
!E	
!B	SALLOC
!S	Function
Allocate local memory.


char *
salloc(n);			/* Return NULL if no space	*/

Allocates the requested number of bytes on the run-time stack.
Return pointer to first byte allocated. The allocated space will be
reclaimed automatically when the function that called salloc() exits.

Return NULL if allocation potencially causes the stack to go below
1000 octal.
!E	
!B	SBREAK
!S	Function
Allocate core.

char *
sbreak(amount);
int	ammount;

Allocates the indicated amount of memory from operating system.
The allocation is permanent.

Return NULL if requested space is not available.
!E	
!B	SCANF
	Conversion_Character	SC$CON
	Example	SC$EXA
!S	Function
Formatted input conversion.

scanf(fmt, pointers);
char	*fmt;			/* Fomat string		*/

fscanf(fd, fmt, pointers);
FILE	*fd;			/* Input file pointer	*/
char	*fmt;			/* Format string	*/

sscanf(buff, fmt, pointers);
char	*buf;			/* Input text buffer	*/
char	*fmt;			/* Format string	*/

Parse input stream using the format string fmt and store result(s) in
pointer arguments.

The three functions differs as follows:

	scanf()		Reads from standard input-file STDIN
	
	fscanf()	Reads from the indicated file

	sscanf()	Reads from text buffer
!E	
!B	SC$CON
	%	S$CONP
	d	S$COND
	o	S$CONO
	x	S$CONX
	s	S$CONS
	c	S$CONC
!!	e	S$CONE
!!	f	S$CONF
!!	[]	S$CONB
!S	Function
Conversion specifier.

The  format  string may  contain  control characters  to direct the
conversion of the input data:

' '	Blanks, tabs or newlines are ignored in format strings.

x	An ordinary character (not %) must match the next input char.

%	Conversion specification consists of  '%' an optional '*'
	(to suppress assignment), an optional maximum numeric field
	width, and a dot '.' as precision specifier.


The following conversion characters are specified:
!E	
!B	S$CONP
!S	Function
Suppress assignment.

A single '%' is expected in the input, no assignment is done.
!E	
!B	S$COND
!S	Function
Expect decimal integer.

An decimal integer is expected in the input. The corresponding argument
should be an integer pointer.

If the format specifier is given in upper-case or preceeded by 'l',
for example, "%ld" is identical to "%D", a long integer will be stored.
!E	
!B	S$CONO
!S	Function
Expect octal integer.

An octal integer is expected in the input. The corresponding argument
should be an integer pointer.

If the format specifier is given in upper-case or preceeded by 'l',
for example, "%lo" is identical to "%O", a long integer will be stored.
!E	
!B	S$CONX
!S	Function
Expect hexa-decimal integer.

An hexa-decimal integer is expected in the input. The corresponding
argument should be an integer pointer.

If the format specifier is given in upper-case or preceeded by 'l',
for example, "%lx" is identical to "%X", a long integer will be stored.
!E	
!B	S$CONS
!S	Function
Expect character string.

A character string is expected. The input field will be terminated by
a space tab or newline. The corresponding argument should point to a
buffer large enough to hold the text and a terminating NULL. Leaing
whitespace will be ignored.
!E	
!B	S$CONC
!S	Function
Expect a single character.

A single character is read. Leading whitespace is not supressed.
To read the next non-blank character use "%ls". If a field width
is given  the corresponding argument is a pointer to a vector of
characters and the indicated number of characters are read.
!E	
!B	SC$EXA
!S	Function
Sample example.

Scanf() returns the number of successfully matched and assigned input
items. If end of input was reached, EOF (-1) is returned.

For Example:

main()
{
	register int	c;
	int		i;
	char		text[10];

	c = scanf("%d%9s", &i, &text);
	printf("i = %d, text = %s\n", i, text);
}

If the input-line is "150 foobar", the program will print:

	i = 150, text = foobar
!E	
!B	SCREEN
	scdown	SCDOWN
	scerln	SCERLN
	scerpg	SCERPG
	scget	SCGET
	sclmargin	SCLMARGIN
	scout	SCOUT
	scput	SCPUT
	scset	SCSET
	scsettype	SCSETTYPE
	sctype	SCTYPE
!S	Function
Screen I/O primitives.

Based on the "terminal independent screen procedures" in the VAX/VMS
runtime library, these routines provide an efficient, operating sytem
independent, interface to DIGITAL video terminals. They work correct
with VT52 and VT100 (ANSI) terminals and do nothing disasterous if
the terminal is not a video. All screen I/O primitives are working
only with the consol terminal.

The following definition should be noted:

line	The horizontal line on the screen to which the cursor is to
	be moved. Top of screen is line 1. If the line is less then
	or equal to zero the cursor does not move.

column	The vertical column to which the cursor is to be moved. The
	value will be offset by the left-margin value if one is set.
	The default left margin is column one. If column is less then
	or equal to zero, the cursor does not move.

text	A NULL terminated string to be output.
!E	
!B	SCDOWN
!S	Function
Roll screen down.

scdown();			/* Roll screen down	*/

The cursor is moved up one line on the screen. If the cursor was
already on the top of the screen, all lines are moved down one line,
the top line is replaced with a blank, the bootom line is lost.
!E	
!B	SCERLN
!S	Function
Erase to end of line.


scerln(line, column)		/* Erast to end of line	*/
int	line;			/* Line number		*/
int	column;			/* Column number	*/

Erase the screen from the indicated (or current) cursor position to
the end of line.
!E	
!B	SCERPG
!S	Function
Erase to end of screen.


scerpg(line, column)		/* Erast to end of page	*/
int	line;			/* Line number		*/
int	column;			/* Column number	*/

Erase the screen from the indicated (or current) cursor position to
the end of the screen.
!E	
!B	SCGET
!S	Function
Prompt for input.


char *
scget(buff, siz, text)		/* Prompt and read	*/
char	*buff;			/* Returned text	*/
int	size;			/* Buffer size		*/
char	*text;			/* Optional prompt	*/

Prompts text if given, flush anny buffered text and read text input
from STDIN to the buffer. Return NULL on end of file or error.
!E	
!B	SCLMARGIN
!S	Function
Set left margin.

int
sclmargin(lmarg)		/* Set left margin	*/
int	lmarg;			/* New left margin	*/

Define new left margin if lmarg is greater then zero. Sclmarg() with
no argument returns the old lmarg value.

After a call to sclmargin(), an output request to column one will be
writen to column lmarg.
!E	
!B	SCOUT
!S	Function
Write text to screen.

scout(line, column, text)	/* Write text to screen	*/
int	line;			/* Line number		*/
int	column;			/* Column number	*/
char	*text;			/* Text to write	*/

Move the cursor to the indicated position on screen and output text.
If line or column is less then or equal to zero, the cursor is not
moved. If text is equal to NULL the internal buffers are flushed.
!E	
!B	SCPUT
!S	Function
Reset buffer mode.

scput(oldbf)			/* Rest buffer mode	*/
char	*oldbf;			/* Previous buffer	*/

Terminates the current buffering mode and reverts to the previous
mode as specified in the parameter. If odlbf is NULL, buffering is
terminated and the current buffer is flushed to the screen. If oldbf
if not zero, it is taken as the location of a previous buffer and
the current buffer is copied into the previous buffer. The previous
buffer is then made current.
!E	
!B	SCSET
!S	Function
Set buffer mode.

scset(newbf, size, old)		/* Set buffer mode	*/
char	*newbf;			/* New buffer		*/
char	size;			/* Size of new buffer	*/
char	**old;			/* Previous buffer save	*/

Etablishes a new buffer for the screen routines. Newbf is a string
array from size bytes lenght. (Size must be at least 12 bytes.)

Old is the address of a word, which will be set to the previous
buffer if anny. This is uset for a subsequent call to scput().

Return ZERO if no error. Return -1 if size was less the 12. bytes.
!E	
!B	SCSETTYPE
!S	Function
Force terminal type.

int
scsettype(type)			/* Force terminal type	*/
int	type;			/* Terminal type	*/

Set the terminal type, overriding the definition supplied by the
operating system. The type must be one of the following:

	0	Not a video terminal
	65	VT52 or VT100 in VT52 mode
	97	VT100 in ANSI mode

All other values are ignored and does not change the terminal type.
!E	
!B	SCTYPE
!S	Function
Return terminal type.

int
sctype()			/* Return terminal type	*/

Returns terminal type. The following types are defined:

	0	Not a video terminal
	1	Unknown video terminal
	1+64	VT52
	1+96	VT100
!E	
!B	SETCC
!S	Function
Trap CTRL-C

setcc(function);
extern	int	function();

The function is defined as a CTRL-C trap routine. Executing setcc(0)
disables CTRL-C trapping.

Note: If the routine is reentered (because CTRL-C was typed during
execution of function()), the program aborts.
!E	
!B	SLEEP
!S	Function
Delay job.

sleep(delay);
int	delay;

Sleep given number of seconds by executing a .twait program request.
!E	
!B	STRCMP
!S	Function
String commparison.

strcmp(a, b);
char	*a;
char	*b;

Compare two strings, return:

	-1	if	a  < b
	0	if	a == b
	1	if	a  > b
!E	
!B	STRCPY
!S	Function
String copy.

char *
strcpy(out, in);
char	*out;
char	*in;

Copy in-string to out-string. Return pointer to end ouf out-string.
!E	
!B	STREQ
!S	Function
String equality.

streq(a, b);
char	*a;
char	*b;

Return TRUE if the strings are equal.
!E	
!B	STRLEN
!S	Function
String lenght.

strlen(s);
char	*s;

Return lenght of argument string.
!E	
!B	SWABB
!S	Function
Byte swap.

swabb(buffer);
char	*buffer;

Retun buffer[0] and buffer[1] as a byte-swapped integer. Buffer need
not be on any particular byte or word boundary.
!E	
!B	SWABI
!S	Function
Byte swap (integer).

swabi(value);
int	value;

Return value byte-swapped.
!E	
!B	TIME
!S	Function
Compute time of day.

long
time(0);

long
time(tloc);
long	*tloc;

Return time of day in seconds. If tloc is non-zero, the return value
is also stored in the location to which tlock points.

See alo rtime().
!E	
!B	TOLOWER
!S	Function
Convert upper-case to lower-case.

tolower(c);
int	c;

Return lower-case equivalent to c if c is an upper-case alphabetic.
Otherwise return c.
!E	
!B	TOUPPER
!S	Function
Convert lower-case to upper-case.

toupper(c);
int	c;

Return upper-case equivalent to c if c is an lower-case alphabetic.
Otherwise return c.
!E	
!B	TRACE
!S	Function
Profile support entry module.

#include <stdio.h>
extern	FILE	*$$flow;

$$flow = fopen("trace.out", "w");

/*	or $$flow = stderr; to trace to the console	*/
...
$$flow = NULL;		/* Turn off flow trace		*/

This module is called whenever a function that was compiled with
the profile option is executed. It checks that the stack will remain
above 600 octal when the function executes an optionally prints a
flow-trace.
!E	
!B	UNGETC
!S	Function
Pushback character to input stream.

ungetc(c, iop);
char	c;
FILE	*iop;

Push one character back on the indicated stream. Abort by executing
a bpt instruction if more then one character is pushed back.
!E	
!B	UNWIND
!S	Function
Execute non-local goto.

setexit();

unwind();

These routines are usefull for dealing with errors and interrupts
encountered in a low-level subroutine of a program.

Setexit() saves its stack environment in a static place for later
use by unwind(). It returns ZERO.

Unwind() restores the last environment saved by setexit(). It then
returns in such a way that execution continues as if the call of
setexit() had just returned. All accessible data have values as of
the time unwind() was called. The return from setexit() will have
the value 1. For example:

	if (setexit())	{
			/* Unwind called	*/
	}
	else	{
			/* Setexit setup called	*/
	}

The routine that called setexit() must still be active when unwind()
is called.
!E	
!B	WDLENG
!S	Function
Expensive sizeoff(int).

wdleng()

Return word lenght.

This may be replaced by:

	#define wdleng() (sizeof (int))
!E	
!B	WRAPUP
!S	Function
Dummy.

wrapup()

This routine (which does nothing) is called on exit if the user's
program does not provide a wrapup() routine.

Wrapup() will be called only once.
!E	
!B	ZERO
!S	Function
Clear block of memory.

zero(addr, nbytes);
char	*addr;
int	nbytes;

Clear the block of core. Nothing is returned.
!E	
!B	CC$OPR
!!
!S	Operator
C Operators.

!E	
!B	CC$CTR
	IF		IF
	WHILE		WHILE
	DO		DO
	FOR		FOR
!!	SWITCH		SWITCH
!!	CASE		CASE
!!	DEFAULT		DEFAULT
	BREAK		BREAK
!!	CONTINUE	CONTINUE
	GOTO		GOTO
!S	Control_directives
Program control directives.

Use C control structures to direct the flow of your program.
!e	
!B	IF
!S	IF
Traditional IF clausel.

  if(<expression>)
	then <statement>;
	else <statement>;
!E	
!B	WHILE
!S	WHILE
Traditional WHILE statement.

  while (<expression>)
	<statement>;
!E	
!B	DO
!S	DO
Traditional DO - WHILE construct.

  do <statement>;
	while (<expression>);
!E	
!B	FOR
!S	FOR
FOR-TO-NEXT construct.

  for (<expression>; <expression>; <expression>)
	<statement>;
!E	
!B	BREAK
!S	BREAK
Terminate current program block.

  switch(c)
  {
  case FF:
	ffflag=1;
	break;
  case '\n':
  .
  .
  .
!E	
!B	GOTO
!S	GOTO
The unavoidable GOTO statement.

  label:  goto label;
!E	
