v11$c=0		; accept V11/VRT ascii names
rst$c=1		; use VMOUNT instead of .SPFUN
V4=1
.title	mount
.pass	
.mcall	.purge	.lookup	.spfun

;-------------------------------;
; mount				;
; dismount			;
; show subset			;
;-------------------------------;
;
;	MOUNT VM:/BLOCKS=blocks		;sets up size for VM:
;	MOUNT VM: file-spec logical	;VRT only
;	MOUNT LDn: file-spec logical
;???	MOUNT/CREATE logical dir-spec [logical]
;
;	DISMOUNT LDn,LD1,VM
;
;	SHOW SUBSET

set	sp.siz	373			;returns size
set	sp.sho	374			;returns setup
set	sp.mou	375			;mounts one
set	sp.dis	376			;dismounts one
meta	<map c d=2><c=$><$=$+d>
$=0

map	l.sta
 lf.all	=	1
 lf.act	=	2
 lf.nwr	=	4
 lf.for	=	10
map	l.chan
map	l.len
map	l.fna	8.
map	l.nam	82.
map	l.err	82.
map	l.bs

impure:
mstat:	.word	0			;l.sta	mount status
mchan:	.word	0			;l.cha	vms only
msize:	.word	0			;l.len	unit block size
mfile:	.rad50	/            /		;l.fnp	rad50 filename
mname:	.blkb	82.			;l.nam	ascii filename
merro:	.blkb	82.			;l.err	vms error

mdevi:	.rad50	/            /		;rad50 device + unit
mgene:	.rad50	/            /		;rad50 generic device name
mslot:	.word	0			;slot number
munit:	.word	0			;unit number
mlogi:	.word	0			;logical name to deassign
mdeas:	.word	0			;dismount should deassign
purity:
.sbttl	mount

mount::	case	<dismou,shosub,shomnt>	;mount, dismount, show subset	
	mov	#impure,r0		;clean up the impure
10$:	clr	(r0)+			;raus dreck!
	cmp	r0,#purity		;all clean yet?
	blo	10$			;nope
	setup	$mount
	edit	<D="">			;no default
	scan	<^M>			;get switchs
	scan	<^IF=1Q="Device? ">	;
	call	valdev			;get our device name
	cmp	mgene,#^rvm		;this VM:?
	beq	30$			;yes - we are done
	call	vrtnam			;check for a VRT filename
	bcc	20$			;we got it this time
	edit	<D="DK:">		;default device			;V4
	scan	<^OF=1Q="File  ? ">	;nope - get more
20$:	edit	<D="">			;no default
	scan	<^LF=1Q="">		;logical name
	call	m.ld			;mount it first
	edit	<L0> 25$		;no assignment
	edit	<^Z"assign "_I" "_L}>	;define the logical name
	jmp	build			;go do it
25$:	jmp	kmon			;quit
30$:	jmp	m.vm			;mount vm

$mount:
option	WRITE		1 _	null	m.write
option	NOWRITE		1 _	null	m.nwrite
option	SIZE		1 _	null	m.size
.if eq V4
option	HOST		1 _	null	m.host
option	CREATE		1 _	null	m.create
.endc
option

m.nwri:	bis	#lf.nwr,mstat		;
m.writ:	return

m.size:
	call	getval			; << r0 = block size
	mov	r0,msize		;save the block size
	return
.sbttl	dismount

dismount:
	setup	$dismount,d.lex
	edit	<D="">			;no default
	clr	mdeas			;first time by hand
	scan	<^M>			;get switchs
	mov	mdeas,(pc)+		;save it for later
5$:	.word	0
10$:	mov	#impure,r0		;cleaneth impure
20$:	clr	(r0)+			;begone dull data cell
	cmp	r0,#purity		;rein?
	blo	20$			;nein
	mov	5$,mdeas		;get column 1 /deassign setting
	scan	<^IF=1Q="Device? ">	;
	psh	r5			;save the input stream
	call	valdev			;get our device name
	cmp	mgene,#^rvm		;this VM:?
	bne	30$			;nope - must be LD:
	call	d.vm			;dismount VM:
	br	40$			;
30$:	call	d.ld			;dismount it
40$:	mov	$unam1,r0		;equivalence/physical names
	mov	$unam2,r1		;logical names
	mov	$slots,r2		;
50$:	cmp	(r1),mlogi		;this the logical one?
	beq	60$			;yes
	tst	mdeas			;should we deassign it?
	beq	70$			;nope
	cmp	(r0),mdevi		;is this our physical name?
	bne	70$			;nope
60$:	clr	(r1)			;take it out
	clr	(r0)
70$:	cmp	(r0)+,(r1)+		;next one
	sub	#2,r2			;is there a next one?
	bne	50$			;yes
	pop	r5			;
	tstb	(r5)			;anymore?
	bne	10$			;yes
	jmp	kmon			;nope - we're done

$dismou:
option	DEASSIGN	1 _	null	d.deass
option
d.lex:	edit	<r,r=" ">		;replace commas with spaces
	return
d.deass:mov	sp,mdeas		;flag deassign
	return
.sbttl	mount/dismount ld:

;	mount ldn: file-spec [logical:]
;	':' is optional
;	"ldn" can be a logical name

m.ld:					;mount ld
.if ne v11$c
	tst	k$mv11			;v11?
	bne	5$			;yep
.endc
.if ne rst$c
	tst	k$mrus			;this rust?
	bne	ru$mld			;yup
.endc
5$:	tst	k$mvrt			;is this VRT?
	bne	10$			;yes - use ascii name
	mov	$out,r1			;get the filename
	mov	#mfile,r2		;and the filename area
	mov	#^rdsk,6(r2)		;setup default type
	call	conaf			;convert the filename
	tstb	(r1)			;this must be it all
	bne	20$			;oops
10$:	mov	#sp.mou,r1		;setup for the mount
	call	ld$spf			;call up ld
	bit	#lf.all,mstat		;did we win?
	beq	30$			;nope
	return
20$:	jmp	illegal			;poorly formed command
30$:	type	<?DCL-F-Error mounting >
	jmp	ld$err			;and do the rest

ru$mld:	edit	<^Z"load ld:"}"r ldv.sys"}_I","_O","_L}"^C"}>
;	edit	<L0> 25$		;no assignment
;	edit	<"assign "_I" "_L}>	;define the logical name
25$:	jmp	build

d.ld:
.if ne rst$c
	tst	k$mrus			;dismount ld:
	bne	ru$dld			;
.endc
5$:	mov	#sp.dis,r1		;dismount us
	call	ld$spf			;
	tst	merro			;got an error?
	beq	10$			;nope
	type	<?DCL-F-Error dismounting >
	jmp	ld$err			;display the reason
10$:	return

ru$dld:	edit	<^Z"r ldv.sys"}_I"/D"}"^C"}>
	jmp	build

;	r1	= function

ld$spf:	.purge	#0			;get a channel
	.lookup	#area,#0,#mdevi		;look us up
	bcs	20$			;oops
	.spfun	#area,#0,r1,#mstat,#l.bs,#0 ;perform the function
	.purge	#0			;
	return
20$:	fatdev	<Invalid device>

ld$err:	mov	$begin,r1		;get the name
	call	bold			;type uppercase string
	type	<:>
	mov	#mname,r1		;
	tstb	(r1)			;got a name?
	beq	10$			;nope
	type	< with >		;yes
	call	bold			;
10$:	print
	tst	merro			;got a VAX error?
	beq	20$			;nope
	.print	#merro			;yes - display this also
20$:	jmp	kmon
.sbttl	mount/dismount vm:

m.vm:	psh	#kmon			;exit to KMON
	tst	msize			;mount
	beq	vmcom			;use the default
d.vm:	mov	mslot,r0		;get the slot
	add	$dvsiz,r0		;point to the size
	mov	msize,(r0)		;and setup the size
vmcom:	.purge	#0			;and look it up
	.lookup	#area,#0,#mgene		;check it out
	bcs	10$			;it does not seem to be there
	.readw	#area,#0,#merro,#40.,#0	;seek to it
	bcs	20$			;oops
	return
10$:	fatdev	<Invalid device>
20$:	type	<?DCL-F-Error >
	cmp	(sp),#kmon		;is this a mount?
	beq	30$			;yes
	type	<dis>			;
30$:	print	<mounting VM:>
	tst	merro			;did VRT reply?
	beq	40$			;nope
	.print	#merro			;yes
40$:	jmp	setfat			;and exeunt
.sbttl	shosub

shosub::				;show subset
.if ne rst$c
	tst	k$mrus
	bne	ru$lds
.endc
	mov	#^rld,mgene		;get the generic name
	mov	#^rld0,mdevi		;start with zero
10$:	mov	#sp.sho,r1		;setup to display
	call	ld$spf			;call LD:
	bit	#lf.all,mstat		;is this setup?
	beq	60$			;nope
	mov	mdevi,r1		;display the name
	call	unpack			;type it
	type	<: = >
	mov	#mname,r1		;get the name
20$:	movb	(r1)+,r0		;get the next
	beq	30$			;that was all
	.ttyout
	br	20$
30$:	type	<  >			;
	type	</Size=>		;
	mov	msize,r1		;get the size
	call	decimal
	type	<.>
	bit	#lf.nwr,mstat		;this /NOWRITE?
	beq	40$			;nope
	type	</Nowrite>
40$:	bit	#lf.for,mstat		;this foreign?
	beq	50$			;nope
	type	</Foreign>		;yes
50$:	print
60$:	inc	mdevi			;get the next	
	cmp	mdevi,#^rld7		;all done?
	blos	10$			;nope
	jmp	kmon

	.enabl	lsb
shomnt:;edit	<^Z"r map"}"show"}"^C"}>
;	br	10$
ru$lds:	edit	<^Z>
10$:	edit 	<"r ldv.sys"}"/L"}"^C"}>
	jmp	build
	.dsabl	lsb
.sbttl	valdev, findev, vrtnam, getval, conaf

;	decode the device

valdev::				;get a unit number
	psh	r5			;
	mov	$input,r5		;point to the name
	mov	r5,r0			;
1$:	tstb	(r0)+			;
	bne	1$			;
	dec	r0			;
	cmpb	-1(r0),#':		
	beq	2$			
	movb	#':,(r0)+
	clrb	(r0)
2$:	call	getdev			;get the device
	mov	name,r0			;store it again
	call	conle			;see if its a logical name
	bcs	5$			;not a logical name
	mov	name,mlogi		;remember it was logical
5$:	mov	r0,mgene		;assume VM:
	mov	r0,mdevi		;save it for access
	tst	k$mvrt			;must be VRT
	beq	10$			;
	cmp	r0,#^rvm		;this vm?
	beq	40$			;yes
10$:	clr	r1			;
	cmp	r0,#^rld		;this LD:?
	blo	50$			;nop
	beq	30$			;exact
	sub	#^rld0,r0		;check it again
	cmp	r0,#7			;too high
	bhi	50$			;yes
	mov	r0,munit		;store the unit
30$:	mov	#^rld,mgene		;setup the name
	pop	r5
	return

40$:	call	findev			;find the slot
	bcs	50$			;
	pop	r5			;restore this
	return
50$:	fatdev	<Invalid device>	;

findev:	mov	$pname,r0		;get the pnames
10$:	cmp	(r0)+,mgene		;this vm?
	beq	20$			;yes
	cmp	r0,$hentr		;this the end
	blo	10$			;nope
	fatdev	<Device not installed>	;not here
20$:	tst	-(r0)			;compute slot
	sub	$pname,r0		;
	mov	r0,mslot		;save the slot
	return

;	get the VRT style filename

vrtnam::				;get a vrt filename
.if ne v11$c
	tst	k$mv11			; this V11?
	bne	5$			; yep
.endc
5$:	tst	k$mvrt			;is this VRT
	beq	30$			;nope
	edit	<! >			;pull off a space
	tstb	(r5)			;end of line?
	beq	30$			;yes - force a scan
	mov	#mname,r3		;point to our name
10$:	clrb	(r3)			;terminate the name
	cmpb	(r5),#'/		;this an option?
	beq	15$			;yes - end of name
	cmpb	(r5),#space		;is this the end?
	blos	20$			;yes
	movb	(r5)+,(r3)+		;move it in
	br	10$			;get more
15$:	clrb	@$column		;force acceptance of option
	clr	state			;and revert to state 0
	scan	<^M>			;pick up the options
20$:	edit	<! >			;remove trailing space
	tstb	mname			;did we get a name
	beq	30$			;nope
	tst	(pc)+			;we have the name
30$:	sec
	return

getval:	psh	r4			;save the output stream
	edit	<^J>			;store the size here
	call	value.			;get the value
	psh	r5			;save the pointer
	mov	$object,r5		;point to our number
	inc	r5			;skip the colon
	clr	r0
10$:	edit	<!#>,,20$		;get the next digit
	asl	r0
	psh	r0
	asl	r0
	asl	r0
	add	(sp)+,r0
	movb	-1(r5),r1		;get the last digit
	sub	#'0,r1			;clean it up
	add	r1,r0
	br	10$
20$:	pop	r5			;store the size
	pop	r4
	return

;	r1 ->	ascii stream
;	r2 ->	rad50 area with default type

conaf:	mov	#^rdk,(r2)+		;put in a name
	call	conar			;get the device
	cmpb	(r1),#':		;got a colon?
	bne	10$			;nope
	inc	r1			;yes - skip it
	mov	r0,-2(r2)		;yes
	beq	20$			;oops
	call	conar			;get the name this time
10$:	mov	r0,(r2)+		;get the filename
	call	conar			;
	mov	r0,(r2)+		;
	cmpb	(r1),#'.		;got a type?
	bne	20$			;nope
	inc	r1			;yes - skip it
	call	conar			;yes
	mov	r0,(r2)			;typ
20$:	return
.end
