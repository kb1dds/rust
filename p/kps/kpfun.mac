tap$c=1
gap$c=0
;	gold digits <repeat>
;	vf$cas - case
;	vf$fil - fill
;	vf$cha - digits
;
.title	kpfun - virtual functions
.include "kps:kpmac.mac"
.include "kps:kpkey.mac"

;	vf$fun - dispatch function
;
;	r0	virtual function code
;
;	r2	mode
;	r3	count

;	value	v$fmod	0		; mode
;	value	v$fcnt	1		; count

v$fmod:	.word	0
v$fsea:	.word	0
v$fcnt::.word	1
v$frpt::.word	0
v$fprv:	.word	0
v$fcol:	.word	0

  subr	vf$fun
	if	#vfmsk$ setoff r0	; not a function
		mov	r0,r3		;
		mov	#vfdft.!vfmsk$,r0
	else
	...	mov	#1,r3		; count

	bic	#^c127.,r0		; isolate the code
	if	r0 his #vfmax.		; too high
	...	clr	r0		; ooops
	psh	r0			; save command
	mov	r0,r4			; where we want it
	asl	r4			; function offset
	mov	v$fmod,r2		; setup mode
	mov	v$fcnt,v$frpt		; setup count
	if	eq			; sanity check
	...	mov #^o100001,v$frpt	;
	mov	#^o100001,v$fcnt	; setup for next one
     while <#^o77777> seton v$frpt	; more
	dec	v$frpt			;
	mov	p$odot,r0		; setup our dot
	mov	r0,r1			; twice
	pshs	<r5,r4,r3,r2>		; r2 = mode, r3 = count/char
	psh	v$ffun(r4)		; get the function
	if	#1 seton (sp)		; cancels limbo select
		bic	#1,(sp)		; remove the flag
		if  #polim$ seton v$asel; and in limbo
	...	... clr	v$asel		; zap select area
	call	@(sp)+			; call ye routine
	pops	<r2,r3,r4,r5>		;
     end				;
	inc	d$iwin			; display time
	pop	v$fprv			; save previous command
  end

code	repeat

v$fcnp:	.asciz	/Repeat: /
	.even

  subr	vf$cnt
	call	tt$lin #-1, #v$fcnp, #0
	mov	r5,v$fcnt
  end
code	general operations

  subr	vf$unk			; unknown
  end
  subr	vf$ent			; enter
  end

  subr	vf$exi			; exit
	call	cm$clo #0
	tran	ed$exi
  end

  subr	vf$qui			; quit
	call	ch$new		; check new data
	call	fi$abd		; purge file
	call	di$rpt		; repaint
	tran	ed$exi
  end

  subr	vf$res			; reset
	clr	v$fmod
	clr	v$asel
  end

c$oprm:	.asciz	/KEYPAD> /
	.even

  subr	vf$cmd			; command
	inc	c$oact		; command active
	call	tt$lin	#l$icom,#c$oprm	; get a command
	clr	c$oact		;
	call	co$dis		; setup to dispatch
	exit	if r0 eq	;
	call	(r0)		; call the action (here for overlay logic)
  end


  subr	vf$pnt			; repaint
	clr	v$frpt		;
	call	di$rpt		; repaint screen
  end


  subr	vf$hlp
	call	sc$ini
	call	hl$hlp
	call	di$rpt
  end
;???	section is wrong
;???	page is different
code	position operations

  subr	vf$adv
	bic	#cmmin$,v$fmod
	mov	v$fmod,v$fsea
  end

  subr	vf$bak
	bis	#cmmin$,v$fmod
	mov	v$fmod,v$fsea
  end

  subr	vf$crt	
	mov	#cmcha$,r2
	call	po$cur #-1
  end

  subr	vf$clf	
	mov	#cmcha$!cmmin$,r2
	call	po$cur #-1
  end

  subr	vf$cup	
	mov	#cmmin$,r2
	join
  subr	vf$cdn	
	clr	r2
  meet
	if	v$fprv ne #vfcup.
	and	v$fprv ne #vfcdn.
		call	po$rep
	...	mov	r0,v$fcol
	if	#cmmin$ seton r2
	...	call	po$sol
	call	po$cur v$fcol
.if ne new$c
	call	po$new	#1
	mov	r1,p$odot
.endc
  end

  subr	vf$bot
	mov	#cmall$,r2
	call	po$cmd
  end
  subr	vf$top
	mov	#cmall$!cmmin$,r2
	call	po$cmd
  end

  subr	vf$cha
	bis	#cmcha$,r2
	call	po$cmd
  end

  subr	vf$wrd
	bis	#cmspa$,r2
	call	po$cmd
	mov	r1,p$odot
  end

  subr	vf$lin
	call	po$cmd
  end

;	forward		x...
;
;	backward	....
;			...x

  subr	vf$eol
	if	#cmmin$ setoff r2	; forwards
		call	po$inf		; get class
		if	#poeol$!potop$ setoff r0 ; not at end of line
		...	dec	r3	; so count one less
		if	r3 ne		; more than one line
		...	call	po$pos	;
		call	po$eol		;
	else				;
		call	po$sol		; get to start of line
		call	po$pos		; move back lines
		call	po$eol		; end of that line
	end
	mov	r1,p$odot
  end

  subr	vf$sec				; section
	if	r3 eq
	...	mov	#1,r3
	asl	r3
	asl	r3
	asl	r3
	call	po$cmd
  end

  subr	vf$pag				; page
	if	#cmmin$ setoff r2
		call	fi$nxt
 	else
	...	call	vf$prv
 end
code	insert operations

  subr	vf$oln			; open line
.if eq new$c
	mov	#cr.,r1
	call	in$cha
.endc
	mov	#lf.,r3
	call	vf$dft
  end

  stub	vf$fee
	mov	#ff.,r3
	br	vf$dft

  stub	vf$tab
	mov	#ht.,r3
	br	vf$dft

  subr	vf$sin			; special insert
	mov	v$frpt,r3	; get it
	clr	v$frpt		;
	bic	#^c255,r3	; clean it up
	exit	if eq		; nothing specified
	inc	r3		; adjust for dispatcher decrement
	exit	if r3 eq #255.	; that crashs the display
	br	vf$dft		;
  end

  subr	vf$dft			; default - insert character
	call	de$sel		; delete selected, if any
				; r0 -> p$odot if deleted
	mov	r3,r1
	call	in$cha
	mov	r0,p$odot
  end
code	delete operations

  subr	vf$rub
	mov	#cmcha$!cmmin$,r2
	mov	#1,r3
	call	de$gen
	mov	r0,p$odot
  end

  subr	vf$dlc
	mov	#cmcha$,r2
	call	de$cmd
  end
  subr	vf$dle
;	mov	#cmcha$,r2
	call	de$cmd
  end
  subr	vf$dll
	clr	r2
	call	de$cmd
  end
  subr	vf$dlw
	mov	#cmspa$,r2
	call	de$cmd
  end
  subr	vf$udc
	call	de$und
  end
  subr	vf$udl
	call	de$und
  end
  subr	vf$udw
	call	de$und
  end
code	cut/paste operations

  subr	vf$sel	
	if	#polim$ seton v$asel	; special case
		mov	#1,v$asel	; reselect
	...	exit			;
	call	pa$swi
  end

  subr	vf$cop	
	call	pa$cop
  end

  subr	vf$cut	
	call	pa$cut
  end

  subr	vf$rem	
	if	v$asel ne
		call	pa$cut
	...	exit
	call	vf$dlc
  end

  subr	vf$app
	call	pa$apc
  end

  subr	vf$sub
	call	pa$rep
	call	vf$fnx
  end

  subr	vf$ins	
	call	pa$rep
  end
  subr	vf$rep	
	call	pa$rep
  end

  subr	vf$all	
	if	v$asel ne
	and	p$obot eq m$ksel
	and	p$otop eq p$odot
		clr	v$asel
	else
		mov	#1,v$asel
		mov	p$obot,m$ksel
	...	mov	p$otop,p$odot
  end
code	search operations

v$ffnd:	.asciz	/Model: /
	.even

	auto	fnd
  proc	vf$fnd	
	clr	v$frpt
	clr	fnd(sp)
	call	tt$lin #l$isea, #v$ffnd, #0

	mov	v$fmod,r2
	ifb	r1 eq #vfadv.!vfmsk$
		call	vf$adv
		inc	fnd(sp)
	elsifb	r1 eq #vfbak.!vfmsk$
		call	vf$bak
	...	inc	fnd(sp)
	mov	r2,v$fsea
	call	se$par
	if	fnd(sp) ne
		mov	p$odot,r0
		mov	r0,r1
	...	call	vf$fnx
  end

  subr	vf$fnx
	bis	s$tflg,r2		; or in stexa$
	call	se$nxt
	if	r1 ne
		mov	r0,p$odot
	else
	...	exit
  end
.if ne tap$c
code	file operations

v$fopn:	.asciz	/File: /
	.even

  subr	vf$opn
	clr	v$frpt
	call	fi$abd
	call	tt$lin #f$istr, #v$fopn, #0
	call	cm$edi #1
	clr	f$istr-2
	call	di$lin
  end

  subr	vf$nxt
	call	cm$nxt	#0
  end

  subr	vf$prv	
	call	tp$beg
	mov	p$obot,p$odot
	call	tp$clo
	call	tp$prv
	call	tp$edi #0
	call	tp$rst
	call	tp$end
	mov	p$obot,p$odot
  end

  subr	vf$sof
	call	tp$clo
	call	tp$edi	#1
	call	cm$rea
  end

  subr	vf$eof
      repeat
	call	cm$nxt	#0
	exit	if r0 eq
      end
  end

  subr	vf$sav
	call	tp$beg
	call	tp$clo
	call	tp$edi #0
	call	tp$rst
	call	tp$end
  end
.endc
.if ne gap$c
code	file operations

v$fopn:	.asciz	/File: /
	.even

  subr	vf$opn
	clr	v$frpt
	call	fi$abd
	call	tt$lin #f$istr, #v$fopn, #0
	call	cm$edi #1
	clr	f$istr-2
	call	di$lin
  end

  subr	vf$nxt
	call	cm$nxt	#0
  end

  subr	vf$prv	
	call	gp$prv
;	call	tp$beg
;	mov	p$obot,p$odot
;	call	tp$clo
;	call	tp$prv
;	call	tp$edi #0
;	call	tp$rst
;	call	tp$end
;	mov	p$obot,p$odot
  end

  subr	vf$sof
      repeat
	call	vf$prv
	exit	if r0 eq
      end
  end

  subr	vf$eof
      repeat
	call	vf$nxt
	exit	if r0 eq
      end
  end

;	Save and return to this position

  subr	vf$sav
	call	vf$eof
	call	tp$beg
	call	tp$clo
	call	tp$edi #0
	call	tp$rst
	call	tp$end
  end
.endc
code	format operations

;	Remainder in npwrd.mac

  subr	vf$htm			; view html
	call	ht$opt
  end

  subr	vf$fmt			; view formatted
	call	ht$ipt		;
  end

  subr	vf$rul
	movb	#fmhor.,r1
	call	in$cha
	mov	r0,p$odot
  end

.end
