;???;	V4? io$dn4+2=io$rem - update on next STB
.title	extern feature
.include "lib:share.mac"
$addef		;ast
$asdef		;address space
$chdef		;channel
$dedef		;device
$ekdef		;kernel
$exdef		;external
$fedef		;feature
$fkdef		;forks
$hadef		;handlers
$iqdef		;i/o queue
$mmdef		;memory management
$podef		;pool
$psdef		;ps
$rpdef		;rp
$sgdef		;sysgen
$tidef		;timer
$todef		;timeout
$tpdef		;transaction package
$vedef		;vectors

.psect	featur
.psect	featop
$fetop
.csect

map	fever.,,2
map	feupd.,,0

;$imgdef	EXTERN 2 0
;$imginf	fun=fea cre=hammo aut=ijh use=<SHAREplus external handlers>
;$imgham	yrs=<1985,1986,1987> oth=<>
$imggen	EXTERN 2 2 fea aut=ijh yea=1985 use=<SHAREplus external handlers>
;	%date
$imgdat	<01-Mar-2008 15:49:19.07>
;	%edit
;	<73   >

;	SHAREplus external handler feature
;
;	%build
;	goto 'p1'
;	macro rfs:extern/object:rfb:extern
;	link:
;	r link
;	rfb:extern.fea,rfb:extern=lib:featur,lib:shplib,rfb:extern,lib:share/Q
;	featur:20000
;	
;	^C
;	!if "'p1'" goto end
;	!set error none
;	!remove/feature extern!		issue only when NO DEVICE is external
;	!copy rfb:extern.fea sy:extern.fea
;	!install/feature extern
;	!set error error
;	end:
;	%end
.sbttl	overview

;	External handlers
;
;	. |install/feature external|	! install the feature
;	. |install/external dd|		! install handler
;
;	VM:EXTERN.FEX	The external feature.
;	VM:DD.SYX	The external handler.
;	Kernel handler	Internal dummy handler
;
;	External handlers are supported with three components:
;
;	EK	DDK.SYS	A dummy handler in kernel memory.
;			Has same name and characteristics as real handler.
;	EX	DD.SYX	The real handler in external memory.
;		EXTERN	External runtime in kernel par1
.sbttl	install

;	Install the kernel record and point to it.
; 
;	r3 ->	feature record
; 
;	Install kernel assist.
;	Link to bypass chains.

fe$ins::return 

;	Remove
; 
;	Make sure there are no references
;	Remove kernel dispatcher

fe$rem::return 
.sbttl	server preface

;	Define the server
;
;	Interface area follows header.

$febot	nam=EXTERN fid=feext. ver=fever. upd=feupd. pur=<External devices>
f$eker::.word	0			;-> kernel record
fe$beg:	return				;ex.pbg - never called
fe$exi:	return				;ex.pex - not attached to processes
fe$dis:	fall	ex$dis			;ex.pds - entry point

;	Dispatch call
;
;ek$xxx:jsr	r5,ek$trn		;transfer xxx
;	.word	ex.fxx			;forward xx code
;ek$trn:jsr	r4,ek$dis		;save r4 & relocate
;e$kpag:	.word	page
;
;e$kdis:psh	@#m$kip6		;save par6
;	psh	@#m$kip1		;save par1
;	mov	e$kpag,@#m$kip6		;map the handler
;	mov	@#f$emap+<feext.*2>,@#m$kip1 ;map the routine
;	call	@#m$mpa1+fe.bbs+ex.pds	;dispatch it
;	pop	@#m$kip1		;restore it
;	pop	@#m$kip6		;restore this
;	pop	r4			;
;	pop	r5			;
;	return				;and quit
;
;	r4 ->	e$kpag
;	r5 ->	ex.fxx

	stack	ret kp1 kp6 r4 r5	;
ex$dis:	sub	#ek.pag,r4		;point r4 back to start
	add	(r5)+,pc		;dispatch the call
	br	ex$sta			;ex.fst - start i/o
	br	ex$don			;ex.fdn - i/o done
	br	ex$abt			;ex.fab - abort i/o
	br	ex$pfx			;ex.fpf	- post fork
	br	ex$dfx			;ex.fdf	- deliver fork
	jmp	ex$tmo			;ex.tmo - post timio
	jmp	ex$dtm			;ex.dtm - deliver timio
;	fall	ex$isr			;ex.fis - deliver interrupt
	br	ex$isr
ex$pfx:	jmp	ex$pfk			;
ex$dfx:	jmp	ex$dfk			;
.sbttl	deliver interrupt

;	Deliver interrupt
;
;	jsr	r5,ek$trn
;	.word	ex.fi0			;forward interrupt
;	.word	ve.pc			;psuedo vector
;	.word	ve.ps			;psuedo pc
;
;	r4 ->	e$khan
;	r5 ->	ex.fxx

	stack	ret kp1 kp6 r4 r5	;
ex$isr:	mov	@#ps,(sp)		;write over return
	psh	#ek$rti			;setup rti path
	stack	ret psw kp1 kp6 r4 r5	;
	movb	ve.ps(r5),@#ps		;setup the expected psw
	jmp	@(r5)+			;call the handler
.sbttl	start I/O

;	Start I/O
;
;	The trick here is to maintain two I/O queues.
;	The problem is synchronising start, done and abort.
;	I/O start always comes here.
;	I/O done is dispatched to EXTERN by IO$DON in mio.
;	I/O abort is dispatched to EXTERN by CH$ABT in rch.
;
;	Start the next I/O queue element.
;	Ignore it if no current kernel queue element.
;	Ignore it if external handler already has one.
;
;	In system state - fork routines are blocked
;	By definition handler cannot be held during start I/O.
;	Pass element at pr7 to avoid holding external handler
;	
;	e$kcqe	Kernel CQE
;	e$xcqe	External CQE
;
;	r4 ->	kernel handler

	.enabl	lsb			;
ex$sta:	stack	ret kp1 kp6 r4 r5	;start I/O
	mov	ek.bas(r4),r0		;r0 -> external handler
	tst	ha.cqe(r4)		;is this a per-process device?
	bne	10$			;no
	mov	sp.r4(sp),r4		;yes - reset r4
	mov	sp.r5(sp),r5		;and r5
	br	20$			;and transfer it

;	Start I/O entry for I/O done
;
;	r0 ->	external handler
;	r4 ->	kernel handler
;
;	r1 ->	kernel queue element - local

ex$st2:
10$:	spl	7
	tst	ha.cqe(r0)		;external already got one?
	bne	30$			;yes - forget this
					;
	mov	ha.cqe(r4),r1		;no - get the new kernel element
	beq	30$			;no more to do
	mov	iq.lnk(r1),ha.cqe(r4)	;link it out
	clr	iq.lnk(r1)		;clean it up
					;
	mov	r1,ha.cqe(r0)		;put it in external queue
	spl	0			;come down
20$:	callr	ha.beg(r0)		;call the external start I/O routine
					;
30$:	spl	0			;come down
	return				;
	.dsabl	lsb			;
.sbttl	I/O done

;	I/O done
;
;	External I/O done passed here by IO$DON
;	I/O done must be issued from the kernel with a kernel queue.
;
;	The external handler is only held by external abort I/O.
;
;	If the external handler is not held then the external element
;	is placed on the kernel queue io$dnx is called.
;
;	If the kernel queue is held then the element is removed and
;	stored in r4. A fork is issued - the handler must be released
;	when the fork completes. The element, now in r4, is placed
;	on the kernel queue.
;
;	r4 ->	kernel handler
;
;	r4 ->	external ha.cqe
;	r5 ->	external queue element

	stack	ret kp1 kp6 r4 r5	;
	.enabl	lsb			;
ex$don:	mov	ek.bas(r4),r4		;r4 -> external handler
	add	#ha.cqe,r4		;r4 -> kernel cqe
	mov	(r4),r5			;r5 -> queue element
	beq	40$			;no queue element
					;
	sub	#tp.qbl,r5		;point to tp
	tstb	tp.rfu(r5)		;this an rt11s acp access?
	ble	10$			;no
	mov	r$mspu,tp.spu(r5) 	;yes - return special user code
	clr	r$mspu			;clear it for the next

	assume	hahol$ eq 100000
	assume	hadon$ eq 40000
10$:	asr	ha.hol-ha.cqe(r4)	;is the handler held?
	bmi	40$			;yes - catch it later

;	Handlers on hold return here after abtio is done.
;	Handlers are always in system or interrupt state here.
;	
;	r4 ->	ha.cqe
;	r5 ->	tp
;
;	There should be at most one request on the external queue.
;	The question remains: what happens when there is more than one.

	assume	ha.cqe+word eq ha.beg	;
ex$dn2:	psh	r3			;save r3
	mov	ha.xkh-ha.cqe(r4),r3	;r3 -> kernel handler for fork routine
	mov	tp.qsu(r5),(r4)		;link handler cqe forward
	bne	20$			;more to do
	inc	r4			;flag no more to do

;	Setup fork block
;
;	r3 ->	kernel handler
;	r4 ->	external ha.cqe
;		external ha.cqe+1 if no more requests
;	r5 ->	tp

20$:	mov	#50$,tp.fad(r5)		;setup completion address
	mov	r4,tp.fr4(r5)		;save r4
	mov	r5,tp.fr5(r5)		;save r5
	movi	tp.frk,r5,r4		;r4 -> tp fork block
	call	ex$ifk			;insert fork block
					;r4/r5 destroyed
	pop	r3			;done
40$:	return				;

;	I/O done fork routine
;	Abort I/O queue element cleanup
;	May not change r1
;
;	r4 ->	external ha.cqe if another request
;		external ha.cqe+1 if no request to start
;	r5 ->	tp
;
;	Complete request

50$:	psh	r4			;save completion address
	call	io$dn4+word		;complete element
	pop	r0			;get it back - but in r0
	bit	#1,r0			;more to do here?
	bne	60$			;no
	tst	(r0)+			;really got one?
	beq	70$			;no - dont be silly
	assume	ha.beg-ha.cqe eq 2	;
	jmp	(r0)			;yes - start the next
					;
;	r0 ->	external ha.cqe+1

	assume	ha.beg-ha.cqe eq 2	;
60$:	inc	r0			;r0 -> ha.beg
70$:	sub	#ha.beg,r0		;r0 -> external handler
	mov	ha.xkh(r0),r4		;r4 -> kernel handler
	br	ex$st2			;try for another kernel element
	.dsabl	lsb			;
.sbttl	I/O abort

;	Deliver I/O abort
;
;	Device flags dehab$!degab$ signal generic abort - i.e. internal queues.
;
;	The abtio logic treats the first member of a queue as an active element.
;	This is not true for the first member of the kernel queue - it is
;	waiting to be queued the the external handler. Thus complete that first.
;	Note, abtio logic calls repeatedly until all elements are done and
;	once more to catch HNDLR$/ABTIO$ logic.
;
;	Virtual device handlers expect r2/r3/r4 intact.
;	Called in system state
;	RT-11 V5.4 wants the CSW address in r5.
;
;	r1 ->	abort entry point
;
;	r0 ->	external handler
;	r2 ->	device record
;	r3 ->	csw
;genabt	r3=0	generic abort
;	sp.r4	job number
;
;	r4 ->	kernel handler
;	r5 ->	csw - v5.4 convention

	stack	ret kp1 kp6 r4 r5	;
ex$abt:	psh	r4			;ker(sp) -> kernel handler
	psh	ek.bas(r4)		;ext(sp) -> external handler
	stack	ext ker ret kp1 kp6 r4 r5 
	mov	(sp),r0			;r0 -> external handler
	sec				;set carry
	ror	ha.hol(r0)		;hold the handler
	bit	#dehab$!degab$,(r2)	;this handler want all aborts?
	bne	10$			;yes
	mov	(sp),r4			;r4 -> external handler
	add	#ha.cqe,r4		;point to current element
	jsr	r1,40$			;try to abort an element

;	Call handler abort routine

	stack	ext ker ret kp1 kp6 r4 r5 
10$:	mov	(sp),r1			;r1 -> external handler
	assume	ha.isr eq word		;second word of table
	add	ha.isr(r1),r1		;r1 -> abort entry point (isr-word)
	psh	r2			;r2 -> device record
	psh	r3			;r3 -> csw (save this)
	stack	r3 r2 ext ker ret kp1 kp6 r4 r5 
	mov	sp.r4(sp),r4		;r4 = job number
	mov	r3,r5			;r5 -> csw/flag
	call	(r1)			;call the routine
	pop	r3			;get back csw pointer - 0=> generic
	pop	r2			;get back device record
	stack	ext ker ret kp1 kp6 r4 r5 

;	mov	(sp),r5			;r5 -> external handler
;	mov	ha.cqe(r5),r5		;get first entry
;	beq	60$			;is none
;	cmp	-(r5),-(r5)		;backup to start of element

;	Look at the first element again
;	Clear the completion flag if this is an abort candidate

	mov	(sp),r4			;get the external handler again
	add	#ha.cqe,r4		;point to the first
	jsr	r1,40$			;is this to be aborted?
	clr	i.qcom(r5)		;yes - clear completion flag
	fall	20$			;do the next

;	Remove subsequent elements

20$:	mov	r5,r4			;get the next
30$:	jsr	r1,40$			;check it
	mov	(r5),(r4)		;remove us from link
	save				;
	sub	#tp.qsu,r5		;point to the start
	clr	tp.qco(r5)		;clear completion flag
;	call	io$rem			;remove the element
	call	io$dn4+2		;sic] 
	restore				;
	br	30$			;

;	Check element for abort

40$:	tst	(sp)+			;skip saved r1
	mov	(r4),r5			;get next element
	beq	60$			;all done
	cmp	-(r5),-(r5)		;point to the start
					;
	cmp	r3,iq.csw-iq.lnk(r5)	;this our channel?
	beq	50$			;yes
	tst	r3			;abort by CSW?
	bne	20$			;yes
	movb	iq.uni-iq.lnk(r5),-(sp)	;no
	bic	#iqjo$m,(sp)		;isolate job number
	asr	(sp)			;put it in place
	asr	(sp)			;
	asr	(sp)			;
	cmpb	(sp)+,p$hprn		;is this the same job?
	bne	20$			;no
50$:	jmp	(r1)			;yes - remove it

;	Aborts done - check for I/O done during hold

	stack	ext ker ret kp1 kp6 r4 r5 
60$:	pop	r4			;r4 -> external handler
	pop	r5			;r5 -> kernel handler
	stack	ret kp1 kp6 r4 r5 	;
	asl	ha.hol(r4)		;did external complete?
	bpl	110$			;nope

;	Handler completed - remove dead external fork elements

	map	lo.cqe  word,0		;fork cqe
	map	lo.lqe	word		;fork lqe

	add	#ek.fqu,r5		;r5 -> fork cqe, fork lqe
	mov	r5,r0			;r0 -> cqe
70$:	mov	r0,r1			;get another copy
80$:	mov	(r1),r0			;link it out
	beq	100$			;that was the last
	tst	fk.kpc(r0)		;got a routine?
	bne	70$			;yes - get the next
	spl	7			;no - block interrupts
	mov	(r0),(r1)		;yes - take it out
	bne	90$			;not the last
	mov	r1,lo.lqe(r5)		;change last queue element pointer
90$:	spl	0			;back down
	br	80$			;and look again

;	Complete top external queue element

100$:	clr	ha.hol(r4)		;clear hold flag
	add	#ha.cqe,r4		;point to cqe
	mov	(r4),r5			;r5 -> queue element
	sub	#tp.qbl,r5		;point to tp
	jmp	ex$dn2			;complete it
110$:	return				;
.sbttl	deliver fork

;	Deliver fork
;
;	r4 ->	kernel handler

	stack	ret kp1 kp6 r4 r5	;
ex$dfk:	psh	r4			;save ek
	stack	ek ret kp1 kp6 r4 r5	;
	clr	ek.fbl+fk.kpc(r4)	;signal not in use
10$:	mov	(sp),r5			;get the kernel handler
	add	#ek.fqu,r5		;r5 -> fork queue
	spl	7			;
	mov	(r5),r4			;pr7> get the fork pointer
	beq	30$			;pr7> nope, try the done routines
	mov	(r4),(r5)		;pr7> link it in
	bne	20$			;pr7> not empty
	mov	r5,2(r5)		;pr7> fix lqe
20$:	spl	0			;pr7>
	clr	(r4)+			;fk.nxt - clear the link
	mov	(r4)+,r3		;fk.fpc - r3 -> routine
	beq	10$			;oops, its been aborted
	mov	(r4)+,r5		;fk.fr5 - get fork user r5
	mov	(r4),r4			;fk.fr4 - get fork user r4
	call	(r3)			;call fork user
	br	10$			;look for another
30$:	spl	0			;come down
	pop	r4			;get back r4
	return				;all done
.sbttl	post fork

;	Post fork
;
;	Insert handler fork in kernel handler queue
;	Post system fork for kernel handler
;
;	fk.suc,,0	;successor
;	fk.kpc		;kernel pc
;	fk.kr5		;kernel r5
;	fk.kr4		;kernel r4
;	fk.bbs		;
;
;	ek.fqu	word*2	;fork queue
;	ek.fbl	word*4	;fork block
;
;	r4 ->	kernel handler

	stack	ret kp1 kp6 r4 r5k r5h	;
ex$pfk:	psh	r3			;save r3
	stack	r3 ret kp1 kp6 r4 r5k r5h
	mov	r4,r3			;r3 -> kernel handler

;	jsr	r5,fk$enq
;	.word	.-frkblk

	mov	sp.r5k(sp),r5		;r5 -> user fork offset
	mov	r5,r4			;point to the block
	add	(r5)+,r4		;r4 -> handler fork block

;	External fork block
;
;	r5h(sp)	r5
;	r4(sp)	r4
;	r4	fork block address
;	r5	fork routine address

	mov	r5,fk.kpc(r4)		;fk.kpc - fork routine address
	mov	sp.r5h(sp),fk.kr5(r4)	;fk.kr5 - fork r5
	mov	sp.r4(sp),fk.kr4(r4)	;fk.kr4 - fork r4

;	r3 ->	kernel handler
;	r4 ->	external fork block - filled in except for fk.kpc

	call	ex$ifk			;insert fork block
	pop	r3			;restore r3

;	Elide return to caller
;
;	External handler pushed sp.r5h
;	Remove sp.r5k - redundant copy of calling r5

	stack	ret kp1 kp6 r4 r5k r5h	;
	movi	sp.r5k,sp,r4		;r4 -> item to remove
20$:	mov	-(r4),2(r4)		;move them up
	cmp	r4,sp			;all done?
	bne	20$			;no
	tst	(sp)+			;yes
	return				;

;	Insert fork block
;
;	r3 ->	kernel handler
;	r4 ->	external fork block - filled in

ex$ifk:	clr	(r4)			;fk.suc - no successor
	psh	@#ps			;save the processor status
	movi	ek.fqu+2,r3,r5		;r5 -> kernel fork queue
	spl	7			;go up
	mov	r4,@(r5)+		;pr7> link from last element
	mov	r4,-(r5)		;pr7> update last pointer
	movb	(sp),@#ps		;reset it

;	Kernel fork block

	movi	ek.fbl,r3,r4		;r4 -> kernel fork block
	movi	ek.dfk,r3,r5		;r5 -> kernel fork routine
	spl	7			;
	tst	fk.kpc(r4)		;already busy?
	bne	10$			;yes
	clr	(r4)			;no - clear the link
	mov	r5,fk.kpc(r4)		;setup the address
	mov	r4,@f$klqe		;link us in
	mov	r4,f$klqe		;

10$:	movb	(sp)+,@#ps		;reset the ps
	return
.sbttl	timeout

;	Device timeout
;
;	SHAREplus timer ast
;
;	ad.suc,,0	successor
;	ad.cpc		client pc - e$kdto
;	ad.cps		client ps - (kernel ps for realtime timer)
;	ad.cr0		client r0 - #tirti. 
;	ad.cr1		client r1 - r4 -> user timer block
;	ad.hot		(terminal r2) or timer high-order time
;	ad.lot		(terminal r3) or timer low-order time
;
;	RT-11 timer element
;
;	to.hot	word,0	high-order time
;	to.lot		low order time
;	to.suc		next element
;	to.job		job number - ignored
;	to.seq		sequence - 177000:177377
;	to.tmo		timout signature = -1
;	to.com		completion routine - zeroed on call
;
;	.timio	tblk, hi, lo
;
;	jsr	r5,@$timit
;	.word	tbk-.
;	.word	0
;	.word	hi
;	.word	lo
;
;	r0	sequence number on entry
;
;	.ctimio	tblk
;
;	jsr	r5,@$timit
;	.word	tbk-.
;	.word	1
;
;	sp.r5->	callers r5
;
;	Single timio element supported.
;	.TIMIO automatically cancels any outstanding request.
;	This code is expected to execute in fork state.
;
;	r3 ->	handler tbk
;	r4 ->	kernel handler
;
;	r0 ->	vdb
;	r3 ->	ip.tbl

	stack	ret kp1 kp6 r4 r5k r5h	;
ex$tmo:	psh	r3			;save them
	stack	r3 ret kp1 kp6 r4 r5k r5h
	call	ex$ctm			;cancel it first
					;
	mov	sp.r5k(sp),r5		;r5 -> handler call
	mov	sp.r5h(sp),sp.r5k(sp)	;sp.r5k = handler return r5
					;now setup for rts pc
	mov	r5,r3			;r3 base
	add	(r5)+,r3		;r3 -> handler timer block
					;
	tst	(r5)+			;timio or ctimio?
	beq	10$			;timio
	mov	r5,sp.r5h(sp)		;clean up for return
	bne	40$			;quit

;	Setup the time

10$:	mov	(r5),ek.tho(r4)		;get the time twice
	mov	(r5)+,to.hot(r3)	;
	mov	(r5),ek.tlo(r4)		;
	mov	(r5)+,to.lot(r3)	;
	mov	r5,sp.r5h(sp)		;restore r5 on return
					;
	pshs	<r1,r0>			;
	call	@#ti$tik		;get current ticks
	add	r0,ek.tho(r4)		;add hot
	add	r1,ek.tlo(r4)		;add lot
	adc	ek.tho(r4)		;
	pops	<r0,r1>			;

;	Prepare to queue it

	clr	ek.tsu(r4)		;zap the link
	mov	r4,ek.tpc(r4)		;
	add	#ek.dtm,ek.tpc(r4)	;completion routine
	clr	ek.tps(r4)		;kernel psw
	mov	#tirti.,ek.tr0(r4)	;realtime marktime id
	mov	r3,ek.tr1(r4)		;handler tbl address

;	Queue it
;
;	Timer queue syncs at fork state
;
;	r2 ->	t$ique
;	r3 ->	ip.tbl

	add	#ek.tsu,r4		;r4 -> our element
	mov	#t$ique,r3		;r3 -> element queue
20$:	mov	r3,r5			;r5 -> previous item
	mov	(r3),r3			;r3 -> current
	beq	30$			;last - put us in
	cmp	ad.hot(r3),ad.hot(r4)	;this one earlier?
	blo	10$			;no - the next
	bhi	30$			;yes - put us in
	cmp	ad.lot(r3),ad.lot(r4) 	;no - check the low order
	blos	20$			;its earlier or same
30$:	mov	r3,(r4)			;link us forward
	mov	r4,(r5)			;and backward
					;
40$:	pop	r3			;
	return				;done
.sbttl	cancel & deliver timeout

;	Cancel existing timer request
;
;	r4 ->	kernel handler
;	ek.tr1	handler tbk address

ex$ctm:	tst	ek.tr1(r4)		;got a timer block active?
	beq	30$			;no
	mov	#t$ique,r3		;look for it
10$:	psh	r4			;yes - look for it
	add	#ek.tsu,(sp)		;(sp) -> timer adr
	cmp	(r3),(sp)+		;this the guy?
	beq	20$			;yes
	mov	(r3),r3			;get the next
	bne	10$			;more
	br	30$			;no more
20$:	mov	@(r3)+,-(r3)		;link it out
	clr	ek.tr1(r4)		;signal not active
30$:	return

;	Timer completion routine
;
;	fork level
;
;	r4 ->	kernel handler
;	ek.tr1	handler tbl address
;	to.com	handler completion routine address
;	to.seq	sequence value for r0

	stack	ret kp1 kp6 r4 r5	;
ex$dtm:	mov	ek.tr1(r4),r5		;r5 -> handler tbl
	clr	ek.tr1(r4)		;once only
	mov	to.com(r5),r1		;r0 -> completion routine
	beq	10$			;cancelled
	clr	to.com(r5)		;once only
	mov	to.seq(r5),r0		;sequence number
	call	(r1)			;transfer to handler
10$:	return				;

.end
