;	merge xev with conditionals
rst$c=1
v3=1
.title	kev - events
.include "lib:rust.mac"
.psect	kev
$addef		;asts
$fkdef		;fork
$qudef		;queue
$sidef		;signals
$stdef		;states
$prdef		;pcr
$psdef		;ps
$tpdef		;tp	

;	%build
;	macro	rxs:kev/object:rxb:kev
;	%end
;
;	External routines in XEV.MAC
;
;	Post events
;
;	Fork
;	Scheduler
;	Monitor ast
;	Client ast
.sbttl	post fork

;	Transaction packet fork
;
;	jsr	r5,fk$tpr

	stack	r5		;
fk$tpr::psh	r4		;fork a transaction packet
	mov	2(sp),r4	;get the tp
	add	#tp.frk,r4	;point to fork block
	br	fk$ins		;and insert it

;	Standard fork
;
;	jsr	r5,fk$enq
;	.word	.-frkblk

fk$enq::psh	r4		;fork enqueue
	mov	r5,r4		;point to the block
	add	(r5)+,r4	;add in the pic offset

;	Common fork
;
;	4(sp)	done address
;	2(sp)	r5
;	0(sp)	r4
;	r5	fork routine address
;	r4	fork block address

	stack	r4 r5 rou
fk$ins::add	#fk.bbs,r4	;point to last word of element
	pop	-(r4)		;store r4
	pop	-(r4)		;store r5
	mov	r5,-(r4)	;store fork goto address
	clr	-(r4)		;clear the fork link
	mov	#f$klqe,r5	;r5 -> cqe, lqe
	psh	@#ps		;save the ps
	spl	7		;go up
	mov	r4,@(r5)+	;pr7> link from last element
	mov	r4,-(r5)	;pr7> update last pointer
	movb	(sp)+,@#ps	;restore the ps
	return			;
.sbttl	scheduler routines

;	$cmsch - Change mode to scheduler
;
;	Disable the scheduler
;	Call in any state.

sc$cms::.enabl	lsb		;change mode scheduler
sc$dis::bis	#stdis$,s$csta	;disable the scheduler
10$:	return			;

;	$cmpro - change mode to process
;
;	Check to see if we should reschedule.
;	This code does not have a race condition.
;	Call in any state

sc$cmp::			;change mode to process
sc$enb::bic	#stdis$,s$csta	;enable the scheduler
	bne	10$		;nothing doing
	$float			;system state
	jmp	in$lan		;and force reschedule
	.dsabl	lsb		;

;	$enque	wait for resource
;	$stall	wait for event
;
;	$enque	adr.da, wai.sv - call in scheduler state
;	$stall	adr.da, wai.sv - call in system state
;
;	mov	#queue,r3
;	psh	@#ps
;	psh	addr
;	jsr	r5,in$sta
;	.word	wait
;
;	Must be called in system state
;
;	r3 ->	queue for $enque

.if ne v3
in$enq::psh	r4		;save that
	movb	(r5)+,r4	;pass wait state
	ovcal$	xe$enq	utl	;enqueue
in$sta::psh	r4		;save that
	movb	(r5)+,r4	;pass wait state
	ovcal$	xe$sta	utl	;stall
nop
;sic]	jmp	in$exi		;fudged by XE$ENQ/XE$STA
.iff
in$enq::tst	(pc)+		;c=0 => $enqueue
in$sta::sec			;c=1 => $stall
	psh	r4		;save this
	mov	p$hpcr,r4	;point to it
	bcs	10$		;its a stall
	$float			;float for enque
	psh	r3		;save it
	insque	r4,r3,qu.pre(r3);put us in the queue
	pop	r3		;
	bic	#stdis$,s$csta	;force the scheduler wide open
10$:	movb	(r5)+,pr.wai(r4);set the wait condition
	bic	#stdor$!stact$,s$csta ;force reschedule
	jmp	in$exi		;and exit here
.endc
.sbttl	post scheduler

;	$reviv	schedule process
;
;	$revive	#queue	
;
;	Call in system state.
;	Always force reschedule if its for current process
;
;	r3 ->	scheduler queue
;	r4 ->	pcr

.if ne v3
sc$pos::ovjmp$	xe$pos	utl	;post process
.iff
	assume	pr.suc eq 0	;
sc$pos::psh	r3		;save this guy
	stack	r3 ret		;optimised entry point from below
	cmp	(r4),r4		;is this in a queue?
	beq	10$		;no
	remque	r4		;yes - take it out
10$:	cmp	r3,pr.bqu(r4)	;lower than base priority?
	bhis	12$		;no	
	mov	pr.bqu(r4),r3	;yes - setup the base
12$:	cmp	r3,pr.tqu(r4)	;is it too high?
	blos	15$		;no
	mov	pr.tqu(r4),r3	;yes - chop it off
15$:	mov	r3,pr.que(r4)	;reset current queue
	cmp	r3,s$cpnd	;is this higher?
	bhi	25$		;definitely yes
	blo	20$		;nope
	cmp	(r3),r3		;was this queue empty?
	beq	26$		;yes - preempt them
20$:	cmp	r4,s$cprc	;is this the current process?
	bne	30$		;no
	tst	pr.ast(r4)	;got a pending monitor ast?
	bne	30$		;no
	br	26$		;yes - don't miss it
25$:	mov	r3,s$cpnd	;change to new high
26$:	bic	#stdor$,s$csta	;open the gate
30$:	insque	r4,r3,qu.pre(r3);insert at end of queue
	clrb	pr.wai(r4)	;state = able to run
	br	as$rr3		;restore r3 and return (below)
.endc
.sbttl	post monitor ast/signal

;	Post monitor ast
;
;	Call in system state or below.
;	Synchronise ast queue with $float	
;
;	Place ADB in pcr ast queue.
;	Reschedule process if no ast in progress.
;
;	r3 ->	scheduler queue
;	r4 ->	pcr
;	r5 ->	ad record
;
;	ad.suc		successor	
;	ad.kpc		kernel pc
;	ad.kpr	0	priority
;	ad.kps		kernel ps
;	ad.kp1		kernel par1
;	ad.ar5		ast r5

.if ne v3
as$pma::ovjmp$	xe$pma	utl	;post monitor ast
.iff
as$pma::.enabl	lsb		;post monitor ast
	call	in$fly		;ensure we are in system state
	psh	r3		;save this
	clr	(r5)		;terminate ast list
	movi	pr.asq,r4,r3	;point to ast queue
10$:	tst	(r3)		;this the last?
	beq	20$		;yes
	mov	(r3),r3		;no - get the next
	br	10$		;
20$:	mov	r5,(r3)		;put us in
	pop	r3		;get the scheduler queue
	bic	#stdor$,pr.ast(r4) ;asts active or disabled?
	beq	sc$pos		;no - schedule it
	return
.endc

;	Post monitor signal
;
;	r0 =	signal
;	r0 = 0	wake up process from process state
;	r4 ->	pcr

.if ne rst$c
as$pmw::ovjmp$	xe$pmw	utl	;post monitor wake
.endc

.if ne v3
as$pms::ovjmp$	xe$pms	utl	;post monitor signal
.iff
as$pms::			;post monitor signal
	call	in$fly		;ensure we are in system state
	bit	r0,pr.sig(r4)	;already active?
	bne	50$		;yes - don't repeat it
	bis	r0,pr.sig(r4)	;set the signal
	bic	#stdor$,pr.ast(r4)
	bne	50$		;asts are disabled
	psh	r3		;save this
	$revive	#s$cpsi		;signal them
as$rr3:	pop	r3		;get this back
50$:	return			;
	.dsabl	lsb		;
.endc
.sbttl	post client ast/signal

;	Post client ast
;
;	Can be called from any process state.
;	Must be in context of the target process.
;	Client AST's are delivered with ADR's.
;	If an ADR is not available the process blocks.
;
;	r0	user r0 - destroyed
;	r1	user r1
;	r2	user pc - destroyed
;	r3	user ps

.if ne v3
as$pca::ovcal$	xe$pca	utl	;post client ast
	jmp	sc$cmp		;change mode to process & return
.iff
as$pca::pshs	<r5,r4,r3>	;post client ast
	stack	r3,r4,r5	;
	mov	p$hpcr,r4	;r4 -> pcr
	$cmsch			;set scheduler state
	tst	p$hsta		;are we aborting?
	bmi	40$		;yes - skip this
	call	ad$acq		;acquire an adb
	series	ad,word suc cpc cps cr0 cr1
10$:	clr	(r3)+		;ad.suc - clear the link
	mov	r2,(r3)+	;ad.cpc
	mov	(sp),(r3)+	;ad.cps
	mov	r0,(r3)+	;ad.cr0
	mov	r1,(r3)		;ad.cr1
	sub	#ad.cr1,r3	;backup to the front

	bic	#stdor$,p$hast	;clear the dormant flag
	mov	p$hasq,r2	;is this the first?
	bne	30$		;nope - just queue it
	mov	r3,p$hasq	;yes it is
	bit	#stact$,pr.ast(r4) ;are we in a monitor ast?
	bne	40$		;yes - don't reschedule
				;??? Should call without reschedule
	bit	#stact$,p$hast	;are we in a client ast?
	bne	40$		;yes - dont reschedule us
	clr	r0		;force process reschedule
	call	as$pms		;post monitor signal
	br	40$

20$:	mov	(r2),r2		;get the next
30$:	tst	(r2)		;are we at the end?
	bne	20$		;nope
	mov	r3,(r2)		;yes
40$:	pops	<r3,r4,r5>	;restore them
	jmp	sc$cmp		;change mode to process & return
.endc

;	Post client signal
;
;	r0 =	signal
;
;	Only called from monitor ast/signal - thus no $revive required.

as$pcs::bis	r0,p$hsig	;set the signal
	bic	#stdor$,p$hast	;open the gate
	return			;

;	Wakeup login polling process for stray terminal interrupt
;
; ???	move to overlay?

.if ne rst$c	; from kdv - was sy$sti
as$sti::mov	s$ypol,r4		;got a polling process?
	beq	10$			;no
	bit	#prwak$,pr.sta(r4)	;already awake?
	bne	10$			;yes
	bis	#prwak$,pr.sta(r4)	;yes - wake them up
	call	as$pmw			;wakeup the process
10$:	return				;
.endc
.sbttl	post abort

;	Post abort for process
;
;	Call in any state except raw interrupt
;
;	ab$prc	Abort current process
;	ab$pos	Post abort other process
;
;	prcri$	Process cannot be aborted in critical section.
;		Destroy command clears this flag and sets unsafe volume.
;
;	r0	used

ab$prc::.enabl	lsb			;abort current process
	mov	p$hpcr,r4		;setup current process
	fall	ab$pos			;

;	Post abort
;
;	r4 ->	pcr

	assume	prabt$ eq 100000
ab$pos::				;post abort
	tst	pr.sta(r4)		;are they already aborting?
	bmi	10$			;yes - ignore this
	bis	#prabt$,pr.sta(r4) 	;they are now
	mov	#siabt$,r0		;signal abort
	br	as$pms			;post the monitor signal

;	Abort signal routine
;	Monitor ast state
;	Called as result of post abort
;
;	Abort process
;	Called from any state

ab$sig::call	te$zap			;stop the terminal
	br	ab$ctc			;join common
ab$set::call	te$res			;abort this process
ab$ctc::				;ctrl/c abort
	mov	p$hpcr,r4		;point to the pcr
	bis	#prabt$!prwak$,pr.sta(r4) ;flag abort & wake
	bis	pr.sta(r4),p$hsta  	;flag it again (plus prdel$ etc.)
	mov	#ab$rti,p$hrti		;reset the abort path
10$:	return				;
	.dsabl	lsb			;
.end
