rst$c=1	;was V3=0
.title	kte - kernel terminal
.include "lib:rust.mac"
.psect	kte
$cfdef		;command file
$eddef		;terminal editor
$fedef		;features
$fodef		;formatted output
$icdef		;image control
$jsdef		;jsw
$mmdef		;mmu (te$sig)
$prdef		;pcr
$sidef		;signal
$stdef		;states
$psdef		;ps
$tedef	ttv	;terminal
$ttdef		;terminal types
$txdef		;text

;	%build
;	macro	rxs:kte/object:rxb:kte
;	%end
;
;	%date
;	<20-Nov-2010 20:53:34.32>
;	%edit
;	<27   >
;
;	terminal data
;	dl interrupt service routines
;	high-speed ring input
;	ctrl/s, ctrl/q, ctrl/o
;	ctrl/c, ctrl/y, ctrl/o
;	unattached terminal support
;	get input ring
;	put input ring
;	put output ring
;
;	r5 ->	terminal record during interrupt service routines.
;
;	r0 =	character
;	r3 ->	terminal record during fork and process routines.
;	r4 ->	pcr during fork routines.
.sbttl	dl & dz service routines

;	DL, DZ & DH input service routines	
;
;	DL input is handled completely here.
;
;	DZ & DH interrupts are intercepted by IDB's.
;	The IDB normalizes the interrupt and passes control here.
;
;	Terminal input and output is allowed to break any rule it
;	sees fit if it achieves more speed.
;
;	The high-speed input ring is placed at a special address
;	so that the increment logic below will work.
;
;	te.isr	jsr r5,@#dl$isr
;	te.ikb	.word	rbu	;input buffer address
;	te.ich	.byte	0	;space for input character
;	te.tid	.byte	0	;terminal id

	series	te,word isr,,ikb ich
dl$isr::			;dl input service routine
	movb	@(r5)+,(r5)	;ich = rbu
	mov	(r5),@h$sput	;put it in the ring
dz$isr::			;dz input joins here
dh$isr::			;dh joins input here
	add	#word,h$sput	;pop past it
	bic	#hsrn$m,h$sput	;wrap around
	inc	h$scnt		;is this the first?
.if ne rst$c
	beq	te$pos		;yes - process it
	br	te$rti		;no - quit
.iff
	beq	te$pos		;yes - process it
	pop	r5		;nope 
	jmp	@p$hrti		;catch fpu traps
.endc
.sbttl	dl & dz output

;	DL & DZ output service routine
;
;	te.osr	jsr r5,@#dl$osr	
;	te.oct	.word	-1	;output count
;	te.ogt	.word	oring	;output ring get pointer
;	te.oto	.word	oring+	;wrap pointer
;
; ??? avoid redundant passes thru restart threshold

	series	te,word	osr,,oct ogt oto
dl$osr::				;dl output service routine
dz$osr::.enabl	lsb			;dz output joins here
	tstb	te.flo-te.oct(r5) 	;got a control character?
	bne	35$			;yes
	tst	(r5)			;te.oct - any more output?
	bmi	50$			;nope - adjust and exit
	dec	(r5)+			;yes
10$:	movb	@(r5)+,@te.tpb-te.oto(r5) ;@te.tpb = @te.ogt
	cmp	(r5),-(r5)		;is to.oto > te.ogt
	bhi	20$			;yes
	mov	te.obo-te.ogt(r5),(r5) 	;no - wrap
	br	30$			;
20$:	inc	(r5)			;te.ogt	- nope - step up
30$:	cmp	-(r5),#teoth.-1		;te.oct - is this the threshold?
	bne	te$rti			;nope
	inc	i$nins			;yes  - come down
	spl	0			;assume we were pr4
	psh	r4			;
	add	#te.frk-te.oct,r5 	;point to the fork block
	spl	7			;go up again
	mov	r5,@f$klqe		;insert us
	mov	r5,f$klqe		;
	jmp	in$exi			;and quit

;	Send control character

35$:	movb	te.flo-te.oct(r5),@te.tpb-te.oct(r5) ;send the control
	clrb	te.flo-te.oct(r5) 	;once only
	tst	te.oen-te.oct(r5) 	;leave interrupt enabled?
	bne	te$rti			;yes

;	No more - turn off the interrupt and exit

dh$osd::				;terminal output done
50$:	bic	te.oie-te.oct(r5),@te.tps-te.oct(r5) ;disable interrupts
te$rti:	pop	r5			;restore that
	jmp	@p$hrti			;catch possible fpu trap
	.dsabl	lsb			;

;	Terminal output fork routine - reschedule process
;
;	r5 ->	terminal control block (stored in fork block)

te$frk::mov	r5,r3			;r3 points to ter
;	mov	te.opa(r3),r2		;got an output ast?
;	beq	10$			;no
;	call	ev$pma			;yes - post it
	mov	te.oqu(r3),r2		;pass the queue address
	mov	te.pcr(r3),r4		;get the process
	jmp	te$rev			;revive it
.sbttl	terminal input fork

;	Post input high-speed fork
;
;	pr7

te$pos::inc	i$nins		;system state
	spl	0		;come down
	psh	r4		;save this
	spl	7		;go up
	mov	#h$sfrk,@f$klqe	;queue us
	mov	#h$sfrk,f$klqe	;
	jmp	in$exi		;and quit

;	Deliver highspeed input fork

te$del::mov	h$sget,r2	;point to ring
	movb	(r2)+,r0	;te.ich - input character
	movb	(r2)+,r1	;te.iid - terminal id
	bic	#hsrn$m,r2	;clean up the ring
	mov	r2,h$sget	;reset the ring
	call	te$ifk		;call input fork
20$:	dec	h$scnt		;any more?
	bpl	te$del		;yes
	return			;nope

;	Input fork routine
;
;	r0	character
;	r1	terminal number
;	r5	reserved for caller

te$ifk::asl	r1		;make tid a word offset
	mov	t$emap(r1),r3	; r3 -> terminal record
	beq	te$nop		;oops - no terminal
	mov	te.pcr(r3),r4	; r4 -> pcr - zero indicates none
	bne	10$		;it has a process
	call	@s$ysti		;stray terminal input - check login
10$:	bic	te.msk(r3),r0	;clean up the character (7/8 bits)
	cmpb	r0,#space	;is this a control character?
	bhis	te$ipt		;nope - just insert it
	movb	t$ecbm(r0),r1	;get the bit
	bmi	te$ctr		;simple control character
	mov	w$omap(r1),r1	;get the bit
	bit	r1,te.con(r3)	;is it enabled?
	beq	te$ctr		;no - simple control character
	movb	t$ecdt(r0),r2	;get the dispatch variable
	add	r2,pc		;and dispatch it
t$ecdb:				;control dispatch table base
.sbttl	terminal control

;	Terminal control keys

te$cq:	bic	#teocs$,te.omo(r3)	;ctrl/q - turn off ctrl-s
	bne	te$nop			;ctrl/o still active
te$reo::mov	te.oie(r3),te.oen(r3)	;reenable output
te$ref::tst	te.oct(r3)		;got any output
	bmi	te$nop			;no
	jmp	te$oen			;yes - select it again

te$cs:	bis	#teocs$,te.omo(r3)	;ctrl/s - stop it
te$dso:	clr	te.oen(r3)		;disable output
	br	te$ref			;go reflect this

te$co:	bit	#teoco$,te.omo(r3)	;output currently enabled?
	beq	te$pms			;yes - signal for a stop
	bic	#teoco$,te.omo(r3)	;no - restart this
	beq	te$reo			;go restart things
te$nop:	return				;ctrl/s still active

te$cc:	bit	r1,te.sig(r3)		;already processing one?
	bne	te$nop			;yes - ignore this
	tst	r4			;got a process?
	beq	te$ipt			;no - just insert it
	cmpb	r0,te.ila(r3)		;is this the second?
	bne	te$ipt			;no - just insert it
	call	te$ipt			;insert it first
	fall	te$cy			;
te$cy:	mov	te.pcr(r3),r4		;got a process (^c loses r4)
	beq	te$nop			;no - just ignore it
	bic	#prsus$,pr.sta(r4)	;resume the process
	bis	#prwak$,pr.sta(r4)	;wake them up
	br	te$pms			;post terminal signal

te$cb:
te$cf:
te$cp:
te$cx:
te$ct:
te$ch:
te$pms:	bis	r1,te.sig(r3)		;yes - set it
	mov	te.pcr(r3),r4		;get the pcr again
	beq	te$nop			;we have none - ignore this
	tst	pr.sta(r4)		;is it in abort?
	bmi	te$nop			;yes - ignore it
	mov	#siter$,r0		;setup terminal signal
	callr	as$pms			;post it to the process
.sbttl	terminal input put

;	Terminal input put
;
;	Kernel fork or system state.
;	Terminal input is ignored if the buffer is full.
;
;	r4	destroyed

.enabl	lsb
te$ctr:	tstb	r0			;control character
	beq	te$nop			;ignore nulls
te$c0:					;nulls only during read-all
te$ipt::				;put a character in the ring buffer
	cmpb	te.ict(r3),#teirs.-1	;too many characters?
	bhis	40$			;yep - ignore it
	movb	r0,te.ila(r3)		;remember it
	movb	r0,@te.ipt(r3)		;put it in the buffer
	cmp	te.ipt(r3),te.ito(r3)	;time to wrap?
	blo	10$			;nope
	mov	te.ibo(r3),te.ipt(r3)	;yes - wrap
	br	20$			;
10$:	inc	te.ipt(r3)		;step it up
20$:	inc	te.ict(r3)		;count it
	cmp	te.ict(r3),#teist.	;this the stop threshold?
	bne	22$			;no
	call	te$xof			;yes - stop it
;	post input ast for first	;
22$:	mov	te.iqu(r3),r2		;r2 -> queue

;	Revive terminal process and/or mailer
;	Revive if its waiting for input or output

te$rev::call	25$			;revive the process
	mov	#s$cp04,r2		;mailers go lower
	mov	te.mbx(r3),r4		;check a mailer
25$:	tst	r4			;do we have a process?
	beq	50$			;nope (c=0)
	tstb	pr.wai(r4)		;is it waiting?
	beq	50$			;no
	cmpb	pr.wai(r4),#prwto.	;waiting for input or output?
	bhi	30$			;nope
	psh	r3			;
	$revive	r2			;yes - revive them
	pop	r3			;
30$:	tst	(pc)+			;fine
40$:	sec				;no room
50$:	return				;and exit
.dsabl	lsb

;	Control character bitmap & dispatch table

.macro	tecadr c d e f g h i j
.irp x,<c d e f g h i j>
.iif lt x-t$ecdb,.error	;x out of range
	.byte	x-t$ecdb&377
.endr
.endm
meta	<tecbit c d e f g h i j><.irp x,<c d e f g h i j>><.byte x*2><.endr>

t$ecbm:;0	1	2	3	4	5	6	7
tecbit	tec0$v,	-1,	tecb$v,	tecc$v,	-1,	-1,	tecf$v,	-1	;000
tecbit	tech$v,	-1,	-1,	-1,	-1,	-1,	-1,	teco$v	;010
tecbit	tecp$v,	tecs$v,	-1,	tecs$v,	tect$v,	-1,	-1,	-1	;020
tecbit	tecx$v,	tecy$v,	-1,	-1,	-1,	-1,	-1,	-1	;030

t$ecdt:;0	1	2	3	4	5	6	7
tecadr	te$c0,	te$ctr,	te$cb,	te$cc,	te$ctr,	te$ctr,	te$cf,	te$ctr	;000
tecadr	te$ch,	te$ctr,	te$ctr,	te$ctr,	te$ctr,	te$ctr,	te$ctr,	te$co	;010
tecadr	te$cp,	te$cq,	te$ctr,	te$cs,	te$ct,	te$ctr,	te$ctr,	te$ctr	;020
tecadr	te$cx,	te$cy;,	te$ctr,	te$ctr,	te$ctr,	te$ctr,	te$ctr,	te$ctr	;030
.sbttl	terminal input get

;	Terminal input get
;
;	Get a character from a terminal.
;
;	Stop interruptions by blocking the scheduler.
;	The usual case is that no character is available.
;	Six empty returns before it stalls.
;
;	c=0	r0=character
;	c=1	no character

te$get::psh	r3			;save this
	call	@p$htti			;call the routine
	pop	r3			;
	return				;

te$tiq::.enabl	lsb
te$igt::
10$:	bis	#stdis$,s$csta		;$cmsch - stop scheduling
	movb	p$hlof+1,r3		;are they formatting?
	beq	20$			;no
	call	te$fea			;yes
	bcc	te$ion			;feature did it completely

20$:	mov	p$hter,r3		;get the terminal
	beq	50$			;is none - wait for it

	tst	te.ict(r3)		;got anything?
	beq	50$			;none - this is the usual case
	movb	@te.igt(r3),r0		;get the character
	cmp	te.igt(r3),te.ito(r3)	;time to wrap?
	blo	30$			;nope
	mov	te.ibo(r3),te.igt(r3)	;yes - wrap
	br	40$			;
30$:	inc	te.igt(r3)		;step it up
40$:	dec	te.ict(r3)		;one less character available
	cmp	te.ict(r3),#teirt.	;below restart threshold?
	bne	45$			;no
	call	te$xon			;yes - start it up
					;post output take asts
45$:	call	te$mai			;wakeup mailer (replace with ast)
	br	te$ios			;i/o done - check for asts

;	No character available, go back empty or stall
;
;	c=0	loop back, process state
;	c=1	return fail, process state

	assume	prabt$ eq 100000	;
	assume	edint$ eq 100000	;
50$:	$float				;go float
	bic	#stdis$,s$csta		;let em schedule
	psh	p$hsta			;check abort
	bis	p$hedc,(sp)+		;or edit interrupt
	bmi	90$			;yes

	mov	p$hter,r3		;get our terminal
	beq	60$			;none there
	tst	te.ict(r3)		;are they still empty?
	bne	80$			;nope - try again
60$:	incb	p$hifc			;count failure
	call	te$iow			;check for a wait
70$:	$stall	#10$,prwti.		;go stall and try it all again

80$:	$land				;come back home
	br	10$			;repeat it

90$:	bic	#edint$,p$hedc		;once-only for this
100$:	clr	r0			;no character
	br	te$iof			;i/o failed
	.dsabl	lsb

te$iow::bit	#jstts$!jsttr$,p$hjsw	;inhibiting terminal wait?
	beq	te$ion			;nope - unconditional wait
10$:	bit	#teiof$,p$hifc		;have we failed?
	beq	20$			;nope
	clr	p$hifc			;yes
	bit	#ictcl$,p$hic0		;are they insisting on looping?
	beq	te$ion			;no - go wait
	psh	r4			;yes - save this
	mov	p$hpcr,r4		;point to the pcr
	mov	#s$cp00,pr.que(r4)	;put us down real low
	bic	#stdor$,s$csta		;and force the scheduler
	pop	r4			;reset it
20$:	tst	(sp)+			;do not return
te$iof:	$land				;come down
	sec				;
te$ion:	return
.sbttl	terminal output put

;	Terminal output put
;
;	te.opt always points to an element. One element is not used.
;	te.oct is a semaphore and counter. -1 => an empty ring.
;	About one in fifty characters calls @te.sel to start I/O.
; ???	Test required to protect against stall during monitor ast.
;
;	r0 =	character
;
;	call	te$put
;
;	c=0	inserted
;	c=1	no room

te$put::psh	r3			;save this
	call	@p$htto			;call the routine
	pop	r3			;restore this
	return				;and quit

.enabl	lsb
te$toq::
te$opt::
10$:	bis	#stdis$,s$csta		;stop scheduling
	movb	p$hlof,r3		;are we formatting?
	beq	15$			;no
	call	te$fea			;call the feature
	bcc	50$			;it did it somehow
15$:	mov	p$hter,r3		;get the record
	beq	35$			;no ring - discard it
te$opd::				;device oriented output
	tstb	te.oco(r3)		;is output turned off?
	bne	30$			;yep - forget it
	cmp	te.oct(r3),#teors.-2	;any room?
	bpl	60$			;nope, go stall
	movb	r0,@te.opt(r3)		;
	cmp	te.opt(r3),te.oto(r3)	;time to wrap?
	blo	20$			;nope
	mov	te.obo(r3),te.opt(r3)	;yes - wrap
	br	25$			;
20$:	inc	te.opt(r3)		;step past this
25$:	inc	te.oct(r3)		;and count it
	bne	30$			;already activated
					;post input take asts
	call	@te.sel(r3)		;set it running
30$:	fall	te$ios			;

te$ios:
35$:	clr	p$hifc			;clear process header counter
	bic	#stdis$,s$csta		;permit reschedule
	bne	40$			;nothing pending
	call	sc$enb			;go schedule
40$:	clc				;signal we won
50$:	return				;process state

;	Wait for output
;
;	Do not wait if p$hter=0.
;	Do not wait if p$hlos&fotto$

60$:	$float				;output ring full
	bic	#stdis$,s$csta		;reenable the scheduler

	bit	#fotto$,p$hlos		;this going to someone else?
	bne	te$iof			;yes - just report failure
	mov	p$hter,r3		;get the record
	beq	70$			;is none - wait for event
	cmp	te.oct(r3),#teors.-2	;any room now?
	bmi	80$			;yes
;	incb	te.ofc(r3)		;yes, count the failure
;	call	te$iow			;should we wait?
	clr	p$hifc			;clear the fail counter
70$:	$stall	#10$,prwto.		;go stall

80$:	$land				;
	br	10$			;try again
.dsabl	lsb
.sbttl	logger and mailer

;	Dispatch the logger feature.
;
;	r3=0	output
;	r3=1	input
;	r3=2	reset

te$fea::psh	@#m$kip1		;yes - map it
	mov	f$emap+<felog.*2>,@#m$kip1 ;map it
	bne	10$			;we have one
	clr	p$hlof			;no feature
	sec				;
	br	20$			;and quit
10$:	call	m$mpa1			;call the feature
20$:	jmp	sy$rp1			;return restoring par1

;	Something significant to the mailer has occurred.
;	Revive the mailer if they are waiting for input or output.
;
;	Called in scheduler state
;	During mailbox operations te.sel points to te$mai

te$mai::tst	te.mbx(r3)		;got a mailbox?
	beq	20$			;no - forget it
	pshs	<r4,r3>			;yes
	mov	te.mbx(r3),r4		;get the mailbox pcr
	$float				;
	tstb	pr.wai(r4)		;waiting for anything at all?
	beq	10$			;no
	$revive	#s$cp04			;yes - revive them
10$:	$land				;
	pops	<r3,r4>			;restore them
20$:	return
.sbttl	select, deselect, xon, xoff

;	Host sync

.enabl	lsb
te$xof::bit	#tthsy$,tt.hsy(r3)	;host sync enabled?
	beq	20$			;no - ignore this
	mov	#tefcs$!ctrls,te.flo(r3);setup ctrls and flag
	psh	#tesxf.			;set up for the dispatch
	br	10$			;

te$xon::tst	te.flo(r3)		;is xof current?
	bpl	20$			;no - ignore this
	mov	#ctrlq,te.flo(r3)	;yes - setup ctrl/q
	psh	#tesxn.			;call the routine
10$:	add	te.sel(r3),(sp)		;compute the address
	jmp	@(sp)+			;call the routine

;	Terminal class dispatch for DL and DZ

	assume	tesxn. eq -6		;
	assume	tesxf. eq -4		;
	assume	tesde. eq -2		;
	assume	tesse. eq 0		;
	br	te$oen			;\ default xon
	br	te$oen			;! default xof
	br	te$des			;! deselect terminal
te$sel::fall	te$oen			;! select terminal
te$oen::spl	7			;/ go up (default select routine)
	bic	te.oie(r3),@te.tps(r3)	;turn it off
	bis	te.oen(r3),@te.tps(r3)	;set it on or leave it off
	br	te$s0r			;spl 0 and return
te$des:	spl	7			;stop I/O
	mov	#-1,te.oct(r3)		;turn it off
	mov	te.ogt(r3),te.opt(r3)	;align the pointers
te$s0r:	spl	0			;go down
20$:	return				;
.dsabl	lsb
.sbttl	zap, inits, resets, ctrl/o

;	Zap input & output

.enabl	lsb
te$zap::call	te$ino			;init output				
	fall	te$ini			;init input

;	Init terminal input

te$ini::				;init input
	clr	p$hifc			;clear fail count
	mov	p$hter,r3		;get the terminal record
	beq	10$			;is none
	spl	7			;block everything
 	clr	te.ict(r3)		;clear the counter
	mov	te.ipt(r3),te.igt(r3)	;align the pointers
	clrb	te.ila(r3)		;clear last character flag
	spl	0			;come down
	br	te$xon			;restart output

;	Init terminal output

te$ino::				;init output
	mov	p$hter,r3		;get the terminal record
	beq	10$			;is none
	psh	#tesde.			;offset to deselect
	add	te.sel(r3),(sp)		;add in the dispatch table base
	call	@(sp)+			;deselect the terminal
	fall	te$res			;and do the rest

;	Reset terminal - clean up last character

te$res::				;reset [ctrl/c] and [ctrl/o]
	mov	p$hter,r3		;get the terminal
	beq	10$			;forget it
	clrb	te.ila(r3)		;forget [ctrl/c]
	fall	te$rco			;

;	Reset [ctrl/o]
;
;	Called directly by RIM image exit
;
;	r3	burnt - and only r3

te$rco::clr	p$hifc			;
	mov	p$hter,r3		;get the terminal record
	beq	10$			;it has none
	bic	#teoco$,te.omo(r3)	;turn off [ctrl/o]
	bne	10$			;[ctrl/s] still on
	callr	te$reo			;reenable output

;	Set [ctrl/o]

te$sco::				;set ctrl/o
	bis	#edint$!edrpt$,p$hedc	;force a reprompt
	mov	p$hter,r3		;get the terminal
	beq	10$			;not there
	assume	cfdis$ eq 200		;
	tstb	p$hcfs			;display/everthing?
	bmi	10$			;yes - don't turn-off ctrl/o
	bis	#teoco$,te.omo(r3)	;set it
10$:	return				;
	.dsabl	lsb			;
.end
