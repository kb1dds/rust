.title	upo - pool management
.include "lib:rust.mac"
.psect	upo d
$podef		;pool
$qudef		;queues

;	RUST/XM kernel pool management.
;
;	%build
;	macro	rxs:upo/object:rxb:upo
;	%end
;
;	Create pool element
;
;	Only the system process creates or deletes system pool elements.
;	Thus, the pool is implicitly synchronised by system process access.
;
;	These routines are also called at build time.
;
;	sp.len	byte length of element
;	sp.typ	type code of element
;
;	sp.typ
;	poprc$	Process oriented - insert process number.
;	poclr$	Clear element.
;	null	Use pounr. - unknown record type
;
;	po.suc	word	successor
;	po.pre	word	predecessor
;	po.len	word	byte length of element
;	po.typ	byte	type of element. Zero indicates free.
;	po.prn	byte	process number. Zero indicates system element.
;
;	c=1	no room
;	c=1	zero length element requested (bugcheck)
.sbttl	create pool element

;	Create pool element
;
;	psh	typ
;	psh	len
;	call	po$cre
; or	mova	pool,r0
;	call	po$crs
;
;	Find smallest space that will accomodate pool element
;	This tends to keep large spaces intact
;
;	c=0
;	r0 ->	start of element
;
;	c=1	no pool space available
;	r0 	zero indicates failure too

	stack	r0 r1 r2 r3 dis kp1 ret len typ
ux$cpo::pshs	<r3,r2,r1>		;create pool element
	clr	-(sp)			;restores to r0 - assume failure
	mov	sp.len(sp),r2		; r2 = target length
	inc	r2			;make sure its even
	bic	#1,r2			;
	beq	60$			;oops - zero length element requested
	add	#po.bbs,r2		;add in our overhead to length

;	find appropriate empty	

	clr	-(sp)			;save the address
	psh	#-1			;look for smallest space
	stack	siz adr			;
	mov	r0,r3			;get pool header address
					;
10$:;	cmp	po.suc(r0),#p$ohed 	;is this the last?
	cmp	po.suc(r0),r3	 	;is this the last?
	beq	15$			;yes - see if we found one
	mov	(r0),r0			;get the next
	tstb	po.typ(r0)		;is this free?
	bne	10$			;nope
	cmp	po.len(r0),r2		;is this big enough?
	blo	10$			;nope
	cmp	po.len(r0),(sp)		;smaller than what we have?
	bhis	10$			;no - keep going
	mov	po.len(r0),(sp)		;yes - save it
	mov	r0,sp.adr(sp)		;and save the address
	br	10$			;look again

15$:	tst	(sp)+			;forget the size
	pop	r0			;get the address
	beq	60$			;we failed to find one

;	split element

	mov	r0,r1			;split this element
	add	r2,r1			;r1 -> potential empty
	mov	po.len(r0),r3		;compute length of new element
	sub	r2,r3			;compute the remainder
	cmp	r3,#po.bbs		;enough space for a header?
	blo	20$			;nope - use it all
	mov	r2,po.len(r0)		;set length of new one
	mov	r3,po.len(r1)		;set length of new empty
	clr	po.typ(r1)		;po.typ=empty
	insque	r1,r0			;insert the empty in the chain

;	clear element

20$:	bit	#poclr$,sp.typ(sp) 	;should we clear it?
	beq	40$			;nope
	bic	#poclr$,sp.typ(sp) 	;yes - remove the clear bit
	mov	r0,r1			;point to it
	add	#po.bbs,r1		;point past the header
	mov	sp.len(sp),r2		;get the length (must be <16kw)
	asr	r2			;get a word size
30$:	clr	(r1)+			;clear it
	sob	r2,30$			;

;	set process number

	assume	poprc$ eq 100000
40$:	mov	sp.typ(sp),po.typ(r0) 	;put in the type
	bpl	50$			;its a system element
	movb	p$hprn,po.prn(r0) 	;move in the process number

;	return status

50$:	add	#po.bbs,r0		;return r0 pointing past header
	assume	sp.r0 eq 0		;
	mov	r0,(sp)			;return this on stack
	tst	(pc)+			;c=0 => o.k.
60$:	sec				;c=1 => no room. r0 = 0
	stack	r0 r1 r2 r3 dis kp1 ret len typ
	pops	<r0,r1,r2,r3>		;get these back
	stack	dis kp1 ret len typ	;
	lopbs.=2*word			;2 local parameters
	mov	sp.ret(sp),sp.typ(sp) 	;move out parameters
	mov	(sp)+,lopbs.-word(sp)	;dis
	mov	(sp)+,lopbs.-word(sp)	;ret
	return
.sbttl	delete pool element

;	psh	#addr
;	call	po$del
;
;	addr=0	ignored
;
;	The algorithm relies on the pool header being a non-empty element.
;	Merge by moving back across empties and then merge all forward empties.
;	A side-effect is that this algorithm does some garbage collection.

	stack	r0 r1 r2 dis kp1 ret adr
ux$dpo::pshs	<r2,r1,r0>	;delete pool element
	mov	sp.adr(sp),r1	; r0 -> element
	beq	30$		;no element
	sub	#po.bbs,r1	;point back to element
	clr	po.typ(r1)	;make it an empty

;	move backward across empties

10$:	mov	r1,r0		;swap to previous
	mov	po.pre(r0),r1	;get the predecessor
	tstb	po.typ(r1)	;is this an empty?
	beq	10$		;yes - back up

;	merge all succeeding empties

20$:	mov	(r0),r1		;r1 -> successor
	tstb	po.typ(r1)	;is next empty?
	bne	30$		;no
	add	po.len(r1),po.len(r0) ;yes - get its length
	mov	(r1),(r0)	;get its successor
	mov	(r1),r1		;point to its successor
	mov	r0,po.pre(r1)	;and make us its predecessor
	br	20$		;try again

	stack	r0 r1 r2 dis kp1 ret adr
30$:	pops	<r0,r1,r2>	;restore these
	stack	dis kp1 ret adr
	mov	sp.ret(sp),sp.adr(sp) ;move out parameters
	mov	sp.kp1(sp),sp.ret(sp)
	pop	(sp)		;squeeze out sp.adr
	return
.end
.sbttl	allocate/deallocate secondary pool

;	mov	#wcnt,r0
;	call	po$alp

ux$alp::pshs	

ux$dep::

.end
