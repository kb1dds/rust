==DEFINE logical-name equivalence-name==

  Associate a logical name with an equivalence name.

**Logical-name**
    Upto three alphanumeric characters terminated by an optional colon.
**Equivalence-name**
    A device name, logical name or directory specification.
[[code format="text"]]
  .define lib du2         ! LIB: translates to DU2:
  .define tst sy:\test\   ! TST: translates to SY:\TEST\
  .define * nf:           ! Default translation is to NF:
[[code]]
**Catch-all**
  The catch-all logical name, asterix (*), redirects failed device
  name translations to the specified equivalence name:
[[code format="text"]]
  .define * dl1:          ! make DL1: the catch-all device
  .show volume xxx:       ! where XXX: is undefined
  Device name:   HD3:
  Bootstrap ID:  "BOOT V2.2"
  ...
[[code]]
* During loading the NF: driver automatically establishes itself as the catch-all device if the catch-all device is not defined.
* The purpose of the catch-all device is quite different under RT-11.

----
**/PATH path-name path-list**

  Creates a directory path.

  Upto four logical names may be specified for a path. The system
  searchs the directory specified by each logical name in turn.

**Path-name**
    A logical name. Upto three alphanumeric characters.
**Path-list**
    Upto four logical names separated by commas.
[[code format="text"]]
  .define/path dk dk,sy   ! Searches for DK: files on DK: then on SY:
[[code]]
* See also [[Delete_Command#PATH|DELETE/PATH]], [[Show_Command#PATHS|SHOW PATHS]]

----
**/PERMANENT logical-name equivalence-name**

  Modifies internal device name variables.

  This maintenance command is used to modify the internal default 
  assignments for DK:, SY: and the implicit boot device BO:.
[[code format="text"]]
  .define/perm bo: dl2:   ! modify system device index and unit
[[code]]
----
**/TRANSLATED logical-name equivalence-name**

  Assigns a translated equivalence name.

  The equivalence name you specify is translated fully before being
  assigned
[[code format="text"]]
  .define e1 dl0
  .define l1 e1           ! l1 = e1
  .show logical l1        
  L1  = E1

  .define l2 e1/trans     ! l2 = dl0
  .show logical l2        
  L2  = DL0
[[code]]
