**Y2M Project**

The Y2M project extends the RUST date from 2099 to approximately 2 million.

**This is a Work-In-Progress.**

This section documents the on-going RUST Y2M project.

RT-11's initial system date range of 1972 to 2004 was extended to 1972 to 2099 to handle Y2K.
The goal of the RUST Y2M project is to handle dates beyond 2099.
The following sections describe the chosen implementation and rationale.

----
**Project overview**

A brief overview of the implementation follows:

The internal system date rate is extended to 1972-2,099,124.
The display date handles the range 1972-100,000.
The standard C programming range is 1972-65,536.
The extended C programming range is 1972-2,099,124.

Until the initial project completes all these figures should be considered as provisional, .

----
**Project divisions**

The major divisions in this project are:

Basic structure and interface design. Completed. Some side-affects remain to be considered.
Operating system, bootstrap, file system and network implementation. Partially completed.
Windows emulator and file server implementation. Partially completed.
RUST and Windows Rider/C-library support. Completed.

RUST/SJ DCL and RUST/XM DCL implementation.
Utility implementation. No rush to implement these.

RT-11 structures define the starting point.

----
**RT-11 Date Representation**

The initial RT-11 date representation spells out the American Month/Day/Year format.
A five bit field holds the date. Bits 14 and 15 are unused.
[[code]]
         15 14 13 12 11 10 9  8  |7  6  5  4  3  2  1  0
Date:   [-  -  M  M  M  M  D  D  |D  D  D  Y  Y  Y  Y  Y  ]
               Month: 1-12 Day: 1-31       Year: 1972-2004kl
[[code]]
RT-11 handled Y2K by using bits 14 and 15 of the date word as an extension of the year field:
[[code]]
         15 14 13 12 11 10 9  8  |7  6  5  4  3  2  1  0
Date:   [E  E  M  M  M  M  D  D  |D  D  D  Y  Y  Y  Y  Y  ]
       Era:0-3 Month: 1-12 Day: 1-31       Year: 1972-2099
[[code]]
The RUST Y2M project extends the date with an additional 14-bit field:
[[code]]
         15 14 13 12 11 10 9  8  |7  6  5  4  3  2  1  0
Date:   [E  E  M  M  M  M  D  D  |D  D  D  Y  Y  Y  Y  Y  ]
       Era:0-3 Month: 1-12 Day: 1-31       Year: 1972-2M

         15 14 13 12 11 10 9  8  |7  6  5  4  3  2  1  0
        [-  -  X  X  X  X  X  X  |X  X  X  X  X  X  X  X  ]
               Extended date: 1972-2,xxx,xxx
[[code]]

----
**RT-11 Time Representation**

RT-11 presents the time as a 2-word "tick counter".
PDP-11 line clocks tick at 50 or 60 hertz (e.g. 50 hertz in Australia).

[[code]]
         15 14 13 12 11 10 9  8  |7  6  5  4  3  2  1  0
Time:   [-  -  -  -  -  -  -  -  |-  H  H  H  H  H  H  H  ]
                       HOT: High Order Time (0-101 or 0-

         15 14 13 12 11 10 9  8  |7  6  5  4  3  2  1  0
        [L  L  L  L  L  L  L  L  |L  L  L  L  L  L  L  L  ]
                       LOT: Low Order Time

        Clock Rate: 50hz or 60hz
[[code]]
TSX and RUST store the time in directory entries as a single word.
RT-11 does not store the time in directory entries but does include a programming example to show how the process takes place.

The time of day is stored as a second counter.
The value is divided by three so that it will fit into a 15-bit field.
The high-order bit is set as a flag.
[[code]]
File     15 14 13 12 11 10 9  8  |7  6  5  4  3  2  1  0
Time:   [1  T  T  T  T  T  T  T  |T  T  T  T  T  T  T  T  ]
            Second-in-day/3
[[code]]

----
**Programming implementation**

The RT-11 .SDTTM Program Request to set the date and time specifies the following data structure:
[[code]]
        .word   date
        .word   hot
        .word   lot
[[code]]
RUST extends the structure to hold the extended date:
[[code]]
        .word   date
        .word   hot
        .word   lot
        .word   date-extension
[[code]]
The .SDTTM Program Request is extended with two subcodes to implement .GTIMX and .STIMX.

[[code]]
Code
0   .SDTTM
1   .GTIMX
2   .STIMX
[[code]]

.GTIMX returns the date, extended date and the time.

.STIMX sets the date, extended date and the time.

----
**C-library RT_GTM**

[[code]]
.title	rtgtm - get extended time
.include "lib:crt.mac"
$emdef
smini$
cccod$

;	Get the extended RUST date/time
;
;	See rust.wikispaces.com/Y2M+Project
;
;	rt_gtm : (*rtTtim) int
;
;	ne =>	extended date supported
;	eq =>	extended date not supported

  proc	rt.gtm
	p1	ent,r1

	psh	r1			; emt data pointer
	mov	#-1,(r1)		; don't alter date
	mov	(r1)+,(r1)		; don't alter time
	psh	#emgtx$			; EMT code/subcode for .GTIMX
	mov	sp,r0			; point to them
	emt	^o375			; have a go
	cmp	(sp)+,(sp)+		; dump emt area
	mov	sp,r0			; assume FINE
	bnew	(r1),#-1,10$		; system supports .GTIMX
					;
	psh	r1			; do it by hand instead
	psh	#emgtm.*256		; EMT code
	mov	sp,r0			;
	emt	^o375			;
	cmp	(sp)+,(sp)+		;
	.date				;
	mov	r0,-(r1)		;
	clr	6(r1)			;
	clr	r0			; .GTIMX not supported
10$:	end

.end

[[code]]

----
**C-Library RT_STM**

[[code]]
..title	rtstm - set extended time
include "lib:crt.mac"
$cndef
$emdef
$rmdef
$rtdef
smini$
cccod$

;	Set the extended date
;	Earlier versions of RUST/RT-11 interpret the call as .SDTTM

  proc	rt.stm
	p1	ent,r1
	psh	r1			; pointer
	psh	#emstx$			; EMT code/subcode for .STIMX
	mov	sp,r0			;
	emt	^o375			; have a go
	cmp	(sp)+,(sp)+		; dump emt area
  end

.end

[[code]]

----
**Directory implementation**

RUST extended the RT-11 directory entry many years ago to hold additional fields:
[[code]]
        .....
        standard RT-11 directory entry
        .....
        .word   time-remainder
        .word   RSX/VMS-style UIC
        .word   RSX/VMS-style protection
[[code]]
The first of these extra words uses two bits to store the remainder of the division by three of the second counter.
[[code]]
Time          15 14 13 12 11 10 9  8  |7  6  5  4  3  2  1  0
Remainder:   [-  -  -  -  -  -  -  -  |-  -  -  -  -  -  R  R  ]
                                      Second-in-day/3 Remainder
[[code]]
The Y2M 14-bit year extension is stored in the upper 14-bits of that location.
[[code]]
Time          15 14 13 12 11 10 9  8  |7  6  5  4  3  2  1  0
Remainder:   [X  X  X  X  X  X  X  X  |X  X  X  X  X  X  R  R  ]
                                      Second-in-day/3 Remainder
[[code]]

...Need for directory flag...

----
**Network implementation**

The RUST transparent network file system NF will be extended to send and receive the extended date information.

----
**Bootstrap implementation**
**VUP implementation**

RT-11 DUP and RUST VUP pass time and date information across system boots.
The V11 emulator also passes this information to RUST and RT-11 systems at bootstrap.
The pre-existing 3-word field is extended with a 2-word field.
The first word holds the Rad50 signature "ERA".
The second word holds the 14-bit extended date field.

----
**DCL implementation**

The DCL implementation will take place after some related planned cleanup of DCL takes place.
DCL will accept and display 4 and 5 column year fields (controlled by a SET option).
There is no rush for this implementation to take place.

----
**System utilities implementation**

The implementation of Y2M is not urgent.
Standard Rider/C and MACRO library routines will be used for utilities.

----
**STB Implementation**

The RUST/XM system STB date will be replaced with a sequence number.
Other applications using the STB date format will be redesigned.

----
**Y2M maintenance application**
The maintenance application Y2M.SAV will test the following interfaces:

----
**Rider/C library implementation**

rt_gtx and rt_stx implement the underlying RT-11 programming interface.

... more to come ...







...